/* tslint:disable */
/* eslint-disable */
/**
 * Aha! REST API
 * API for interacting with Aha! product management platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Comment } from '../model';
// @ts-ignore
import type { CommentCreateRequest } from '../model';
// @ts-ignore
import type { EpicsEpicIdCommentsGet200Response } from '../model';
/**
 * CommentsApi - axios parameter creator
 * @export
 */
export const CommentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a list of comments associated with the specified epic.
         * @summary List comments on an epic
         * @param {string} epicId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        epicsEpicIdCommentsGet: async (epicId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'epicId' is not null or undefined
            assertParamExists('epicsEpicIdCommentsGet', 'epicId', epicId)
            const localVarPath = `/epics/{epic_id}/comments`
                .replace(`{${"epic_id"}}`, encodeURIComponent(String(epicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new comment to the specified feature.
         * @summary Create a comment on a feature
         * @param {string} featureId 
         * @param {CommentCreateRequest} commentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresFeatureIdCommentsPost: async (featureId: string, commentCreateRequest: CommentCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('featuresFeatureIdCommentsPost', 'featureId', featureId)
            // verify required parameter 'commentCreateRequest' is not null or undefined
            assertParamExists('featuresFeatureIdCommentsPost', 'commentCreateRequest', commentCreateRequest)
            const localVarPath = `/features/{feature_id}/comments`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commentCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of comments associated with the specified goal.
         * @summary List comments on a goal
         * @param {string} goalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsGoalIdCommentsGet: async (goalId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalId' is not null or undefined
            assertParamExists('goalsGoalIdCommentsGet', 'goalId', goalId)
            const localVarPath = `/goals/{goal_id}/comments`
                .replace(`{${"goal_id"}}`, encodeURIComponent(String(goalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of comments associated with the specified idea.
         * @summary List comments on an idea
         * @param {string} ideaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ideasIdeaIdCommentsGet: async (ideaId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ideaId' is not null or undefined
            assertParamExists('ideasIdeaIdCommentsGet', 'ideaId', ideaId)
            const localVarPath = `/ideas/{idea_id}/comments`
                .replace(`{${"idea_id"}}`, encodeURIComponent(String(ideaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of comments associated with the specified initiative.
         * @summary List comments on an initiative
         * @param {string} initiativeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiativesInitiativeIdCommentsGet: async (initiativeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'initiativeId' is not null or undefined
            assertParamExists('initiativesInitiativeIdCommentsGet', 'initiativeId', initiativeId)
            const localVarPath = `/initiatives/{initiative_id}/comments`
                .replace(`{${"initiative_id"}}`, encodeURIComponent(String(initiativeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of comments associated with the specified product.
         * @summary List comments in a product
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsProductIdCommentsGet: async (productId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('productsProductIdCommentsGet', 'productId', productId)
            const localVarPath = `/products/{product_id}/comments`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of comments associated with the specified release phase.
         * @summary List comments on a release phase
         * @param {string} releasePhaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasePhasesReleasePhaseIdCommentsGet: async (releasePhaseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'releasePhaseId' is not null or undefined
            assertParamExists('releasePhasesReleasePhaseIdCommentsGet', 'releasePhaseId', releasePhaseId)
            const localVarPath = `/release_phases/{release_phase_id}/comments`
                .replace(`{${"release_phase_id"}}`, encodeURIComponent(String(releasePhaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of comments associated with the specified release.
         * @summary List comments on a release
         * @param {string} releaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesReleaseIdCommentsGet: async (releaseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'releaseId' is not null or undefined
            assertParamExists('releasesReleaseIdCommentsGet', 'releaseId', releaseId)
            const localVarPath = `/releases/{release_id}/comments`
                .replace(`{${"release_id"}}`, encodeURIComponent(String(releaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of comments associated with the specified requirement.
         * @summary List comments on a requirement
         * @param {string} requirementId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requirementsRequirementIdCommentsGet: async (requirementId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requirementId' is not null or undefined
            assertParamExists('requirementsRequirementIdCommentsGet', 'requirementId', requirementId)
            const localVarPath = `/requirements/{requirement_id}/comments`
                .replace(`{${"requirement_id"}}`, encodeURIComponent(String(requirementId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of comments associated with the specified to-do.
         * @summary List comments on a to-do
         * @param {string} todoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosTodoIdCommentsGet: async (todoId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'todoId' is not null or undefined
            assertParamExists('todosTodoIdCommentsGet', 'todoId', todoId)
            const localVarPath = `/todos/{todo_id}/comments`
                .replace(`{${"todo_id"}}`, encodeURIComponent(String(todoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommentsApi - functional programming interface
 * @export
 */
export const CommentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a list of comments associated with the specified epic.
         * @summary List comments on an epic
         * @param {string} epicId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async epicsEpicIdCommentsGet(epicId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EpicsEpicIdCommentsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.epicsEpicIdCommentsGet(epicId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.epicsEpicIdCommentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Adds a new comment to the specified feature.
         * @summary Create a comment on a feature
         * @param {string} featureId 
         * @param {CommentCreateRequest} commentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresFeatureIdCommentsPost(featureId: string, commentCreateRequest: CommentCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresFeatureIdCommentsPost(featureId, commentCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.featuresFeatureIdCommentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of comments associated with the specified goal.
         * @summary List comments on a goal
         * @param {string} goalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async goalsGoalIdCommentsGet(goalId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EpicsEpicIdCommentsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.goalsGoalIdCommentsGet(goalId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.goalsGoalIdCommentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of comments associated with the specified idea.
         * @summary List comments on an idea
         * @param {string} ideaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ideasIdeaIdCommentsGet(ideaId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EpicsEpicIdCommentsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ideasIdeaIdCommentsGet(ideaId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.ideasIdeaIdCommentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of comments associated with the specified initiative.
         * @summary List comments on an initiative
         * @param {string} initiativeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initiativesInitiativeIdCommentsGet(initiativeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EpicsEpicIdCommentsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.initiativesInitiativeIdCommentsGet(initiativeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.initiativesInitiativeIdCommentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of comments associated with the specified product.
         * @summary List comments in a product
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsProductIdCommentsGet(productId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EpicsEpicIdCommentsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsProductIdCommentsGet(productId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.productsProductIdCommentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of comments associated with the specified release phase.
         * @summary List comments on a release phase
         * @param {string} releasePhaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async releasePhasesReleasePhaseIdCommentsGet(releasePhaseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EpicsEpicIdCommentsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.releasePhasesReleasePhaseIdCommentsGet(releasePhaseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.releasePhasesReleasePhaseIdCommentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of comments associated with the specified release.
         * @summary List comments on a release
         * @param {string} releaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async releasesReleaseIdCommentsGet(releaseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EpicsEpicIdCommentsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.releasesReleaseIdCommentsGet(releaseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.releasesReleaseIdCommentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of comments associated with the specified requirement.
         * @summary List comments on a requirement
         * @param {string} requirementId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requirementsRequirementIdCommentsGet(requirementId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EpicsEpicIdCommentsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requirementsRequirementIdCommentsGet(requirementId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.requirementsRequirementIdCommentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of comments associated with the specified to-do.
         * @summary List comments on a to-do
         * @param {string} todoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todosTodoIdCommentsGet(todoId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EpicsEpicIdCommentsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.todosTodoIdCommentsGet(todoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.todosTodoIdCommentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CommentsApi - factory interface
 * @export
 */
export const CommentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommentsApiFp(configuration)
    return {
        /**
         * Retrieves a list of comments associated with the specified epic.
         * @summary List comments on an epic
         * @param {CommentsApiEpicsEpicIdCommentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        epicsEpicIdCommentsGet(requestParameters: CommentsApiEpicsEpicIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response> {
            return localVarFp.epicsEpicIdCommentsGet(requestParameters.epicId, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new comment to the specified feature.
         * @summary Create a comment on a feature
         * @param {CommentsApiFeaturesFeatureIdCommentsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresFeatureIdCommentsPost(requestParameters: CommentsApiFeaturesFeatureIdCommentsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Comment> {
            return localVarFp.featuresFeatureIdCommentsPost(requestParameters.featureId, requestParameters.commentCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of comments associated with the specified goal.
         * @summary List comments on a goal
         * @param {CommentsApiGoalsGoalIdCommentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsGoalIdCommentsGet(requestParameters: CommentsApiGoalsGoalIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response> {
            return localVarFp.goalsGoalIdCommentsGet(requestParameters.goalId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of comments associated with the specified idea.
         * @summary List comments on an idea
         * @param {CommentsApiIdeasIdeaIdCommentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ideasIdeaIdCommentsGet(requestParameters: CommentsApiIdeasIdeaIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response> {
            return localVarFp.ideasIdeaIdCommentsGet(requestParameters.ideaId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of comments associated with the specified initiative.
         * @summary List comments on an initiative
         * @param {CommentsApiInitiativesInitiativeIdCommentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiativesInitiativeIdCommentsGet(requestParameters: CommentsApiInitiativesInitiativeIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response> {
            return localVarFp.initiativesInitiativeIdCommentsGet(requestParameters.initiativeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of comments associated with the specified product.
         * @summary List comments in a product
         * @param {CommentsApiProductsProductIdCommentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsProductIdCommentsGet(requestParameters: CommentsApiProductsProductIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response> {
            return localVarFp.productsProductIdCommentsGet(requestParameters.productId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of comments associated with the specified release phase.
         * @summary List comments on a release phase
         * @param {CommentsApiReleasePhasesReleasePhaseIdCommentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasePhasesReleasePhaseIdCommentsGet(requestParameters: CommentsApiReleasePhasesReleasePhaseIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response> {
            return localVarFp.releasePhasesReleasePhaseIdCommentsGet(requestParameters.releasePhaseId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of comments associated with the specified release.
         * @summary List comments on a release
         * @param {CommentsApiReleasesReleaseIdCommentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesReleaseIdCommentsGet(requestParameters: CommentsApiReleasesReleaseIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response> {
            return localVarFp.releasesReleaseIdCommentsGet(requestParameters.releaseId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of comments associated with the specified requirement.
         * @summary List comments on a requirement
         * @param {CommentsApiRequirementsRequirementIdCommentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requirementsRequirementIdCommentsGet(requestParameters: CommentsApiRequirementsRequirementIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response> {
            return localVarFp.requirementsRequirementIdCommentsGet(requestParameters.requirementId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of comments associated with the specified to-do.
         * @summary List comments on a to-do
         * @param {CommentsApiTodosTodoIdCommentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosTodoIdCommentsGet(requestParameters: CommentsApiTodosTodoIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response> {
            return localVarFp.todosTodoIdCommentsGet(requestParameters.todoId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommentsApi - interface
 * @export
 * @interface CommentsApi
 */
export interface CommentsApiInterface {
    /**
     * Retrieves a list of comments associated with the specified epic.
     * @summary List comments on an epic
     * @param {CommentsApiEpicsEpicIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    epicsEpicIdCommentsGet(requestParameters: CommentsApiEpicsEpicIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response>;

    /**
     * Adds a new comment to the specified feature.
     * @summary Create a comment on a feature
     * @param {CommentsApiFeaturesFeatureIdCommentsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    featuresFeatureIdCommentsPost(requestParameters: CommentsApiFeaturesFeatureIdCommentsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Comment>;

    /**
     * Retrieves a list of comments associated with the specified goal.
     * @summary List comments on a goal
     * @param {CommentsApiGoalsGoalIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    goalsGoalIdCommentsGet(requestParameters: CommentsApiGoalsGoalIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response>;

    /**
     * Retrieves a list of comments associated with the specified idea.
     * @summary List comments on an idea
     * @param {CommentsApiIdeasIdeaIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    ideasIdeaIdCommentsGet(requestParameters: CommentsApiIdeasIdeaIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response>;

    /**
     * Retrieves a list of comments associated with the specified initiative.
     * @summary List comments on an initiative
     * @param {CommentsApiInitiativesInitiativeIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    initiativesInitiativeIdCommentsGet(requestParameters: CommentsApiInitiativesInitiativeIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response>;

    /**
     * Retrieves a list of comments associated with the specified product.
     * @summary List comments in a product
     * @param {CommentsApiProductsProductIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    productsProductIdCommentsGet(requestParameters: CommentsApiProductsProductIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response>;

    /**
     * Retrieves a list of comments associated with the specified release phase.
     * @summary List comments on a release phase
     * @param {CommentsApiReleasePhasesReleasePhaseIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    releasePhasesReleasePhaseIdCommentsGet(requestParameters: CommentsApiReleasePhasesReleasePhaseIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response>;

    /**
     * Retrieves a list of comments associated with the specified release.
     * @summary List comments on a release
     * @param {CommentsApiReleasesReleaseIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    releasesReleaseIdCommentsGet(requestParameters: CommentsApiReleasesReleaseIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response>;

    /**
     * Retrieves a list of comments associated with the specified requirement.
     * @summary List comments on a requirement
     * @param {CommentsApiRequirementsRequirementIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    requirementsRequirementIdCommentsGet(requestParameters: CommentsApiRequirementsRequirementIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response>;

    /**
     * Retrieves a list of comments associated with the specified to-do.
     * @summary List comments on a to-do
     * @param {CommentsApiTodosTodoIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    todosTodoIdCommentsGet(requestParameters: CommentsApiTodosTodoIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response>;

}

/**
 * Request parameters for epicsEpicIdCommentsGet operation in CommentsApi.
 * @export
 * @interface CommentsApiEpicsEpicIdCommentsGetRequest
 */
export interface CommentsApiEpicsEpicIdCommentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CommentsApiEpicsEpicIdCommentsGet
     */
    readonly epicId: string
}

/**
 * Request parameters for featuresFeatureIdCommentsPost operation in CommentsApi.
 * @export
 * @interface CommentsApiFeaturesFeatureIdCommentsPostRequest
 */
export interface CommentsApiFeaturesFeatureIdCommentsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof CommentsApiFeaturesFeatureIdCommentsPost
     */
    readonly featureId: string

    /**
     * 
     * @type {CommentCreateRequest}
     * @memberof CommentsApiFeaturesFeatureIdCommentsPost
     */
    readonly commentCreateRequest: CommentCreateRequest
}

/**
 * Request parameters for goalsGoalIdCommentsGet operation in CommentsApi.
 * @export
 * @interface CommentsApiGoalsGoalIdCommentsGetRequest
 */
export interface CommentsApiGoalsGoalIdCommentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CommentsApiGoalsGoalIdCommentsGet
     */
    readonly goalId: string
}

/**
 * Request parameters for ideasIdeaIdCommentsGet operation in CommentsApi.
 * @export
 * @interface CommentsApiIdeasIdeaIdCommentsGetRequest
 */
export interface CommentsApiIdeasIdeaIdCommentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CommentsApiIdeasIdeaIdCommentsGet
     */
    readonly ideaId: string
}

/**
 * Request parameters for initiativesInitiativeIdCommentsGet operation in CommentsApi.
 * @export
 * @interface CommentsApiInitiativesInitiativeIdCommentsGetRequest
 */
export interface CommentsApiInitiativesInitiativeIdCommentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CommentsApiInitiativesInitiativeIdCommentsGet
     */
    readonly initiativeId: string
}

/**
 * Request parameters for productsProductIdCommentsGet operation in CommentsApi.
 * @export
 * @interface CommentsApiProductsProductIdCommentsGetRequest
 */
export interface CommentsApiProductsProductIdCommentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CommentsApiProductsProductIdCommentsGet
     */
    readonly productId: string
}

/**
 * Request parameters for releasePhasesReleasePhaseIdCommentsGet operation in CommentsApi.
 * @export
 * @interface CommentsApiReleasePhasesReleasePhaseIdCommentsGetRequest
 */
export interface CommentsApiReleasePhasesReleasePhaseIdCommentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CommentsApiReleasePhasesReleasePhaseIdCommentsGet
     */
    readonly releasePhaseId: string
}

/**
 * Request parameters for releasesReleaseIdCommentsGet operation in CommentsApi.
 * @export
 * @interface CommentsApiReleasesReleaseIdCommentsGetRequest
 */
export interface CommentsApiReleasesReleaseIdCommentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CommentsApiReleasesReleaseIdCommentsGet
     */
    readonly releaseId: string
}

/**
 * Request parameters for requirementsRequirementIdCommentsGet operation in CommentsApi.
 * @export
 * @interface CommentsApiRequirementsRequirementIdCommentsGetRequest
 */
export interface CommentsApiRequirementsRequirementIdCommentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CommentsApiRequirementsRequirementIdCommentsGet
     */
    readonly requirementId: string
}

/**
 * Request parameters for todosTodoIdCommentsGet operation in CommentsApi.
 * @export
 * @interface CommentsApiTodosTodoIdCommentsGetRequest
 */
export interface CommentsApiTodosTodoIdCommentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CommentsApiTodosTodoIdCommentsGet
     */
    readonly todoId: string
}

/**
 * CommentsApi - object-oriented interface
 * @export
 * @class CommentsApi
 * @extends {BaseAPI}
 */
export class CommentsApi extends BaseAPI implements CommentsApiInterface {
    /**
     * Retrieves a list of comments associated with the specified epic.
     * @summary List comments on an epic
     * @param {CommentsApiEpicsEpicIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public epicsEpicIdCommentsGet(requestParameters: CommentsApiEpicsEpicIdCommentsGetRequest, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).epicsEpicIdCommentsGet(requestParameters.epicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new comment to the specified feature.
     * @summary Create a comment on a feature
     * @param {CommentsApiFeaturesFeatureIdCommentsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public featuresFeatureIdCommentsPost(requestParameters: CommentsApiFeaturesFeatureIdCommentsPostRequest, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).featuresFeatureIdCommentsPost(requestParameters.featureId, requestParameters.commentCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of comments associated with the specified goal.
     * @summary List comments on a goal
     * @param {CommentsApiGoalsGoalIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public goalsGoalIdCommentsGet(requestParameters: CommentsApiGoalsGoalIdCommentsGetRequest, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).goalsGoalIdCommentsGet(requestParameters.goalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of comments associated with the specified idea.
     * @summary List comments on an idea
     * @param {CommentsApiIdeasIdeaIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public ideasIdeaIdCommentsGet(requestParameters: CommentsApiIdeasIdeaIdCommentsGetRequest, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).ideasIdeaIdCommentsGet(requestParameters.ideaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of comments associated with the specified initiative.
     * @summary List comments on an initiative
     * @param {CommentsApiInitiativesInitiativeIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public initiativesInitiativeIdCommentsGet(requestParameters: CommentsApiInitiativesInitiativeIdCommentsGetRequest, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).initiativesInitiativeIdCommentsGet(requestParameters.initiativeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of comments associated with the specified product.
     * @summary List comments in a product
     * @param {CommentsApiProductsProductIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public productsProductIdCommentsGet(requestParameters: CommentsApiProductsProductIdCommentsGetRequest, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).productsProductIdCommentsGet(requestParameters.productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of comments associated with the specified release phase.
     * @summary List comments on a release phase
     * @param {CommentsApiReleasePhasesReleasePhaseIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public releasePhasesReleasePhaseIdCommentsGet(requestParameters: CommentsApiReleasePhasesReleasePhaseIdCommentsGetRequest, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).releasePhasesReleasePhaseIdCommentsGet(requestParameters.releasePhaseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of comments associated with the specified release.
     * @summary List comments on a release
     * @param {CommentsApiReleasesReleaseIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public releasesReleaseIdCommentsGet(requestParameters: CommentsApiReleasesReleaseIdCommentsGetRequest, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).releasesReleaseIdCommentsGet(requestParameters.releaseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of comments associated with the specified requirement.
     * @summary List comments on a requirement
     * @param {CommentsApiRequirementsRequirementIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public requirementsRequirementIdCommentsGet(requestParameters: CommentsApiRequirementsRequirementIdCommentsGetRequest, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).requirementsRequirementIdCommentsGet(requestParameters.requirementId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of comments associated with the specified to-do.
     * @summary List comments on a to-do
     * @param {CommentsApiTodosTodoIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public todosTodoIdCommentsGet(requestParameters: CommentsApiTodosTodoIdCommentsGetRequest, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).todosTodoIdCommentsGet(requestParameters.todoId, options).then((request) => request(this.axios, this.basePath));
    }
}

