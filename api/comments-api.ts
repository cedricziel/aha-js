/* tslint:disable */
/* eslint-disable */
/**
 * Aha! REST API
 * API for interacting with Aha! product management platform.
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Comment } from '../model';
// @ts-ignore
import type { CommentCreateRequest } from '../model';
// @ts-ignore
import type { CommentsGetEpic200Response } from '../model';
/**
 * CommentsApi - axios parameter creator
 * @export
 */
export const CommentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new comment to the specified epic.
         * @summary Create a comment on an epic
         * @param {string} epicId 
         * @param {CommentCreateRequest} commentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsCreateEpic: async (epicId: string, commentCreateRequest: CommentCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'epicId' is not null or undefined
            assertParamExists('commentsCreateEpic', 'epicId', epicId)
            // verify required parameter 'commentCreateRequest' is not null or undefined
            assertParamExists('commentsCreateEpic', 'commentCreateRequest', commentCreateRequest)
            const localVarPath = `/epics/{epic_id}/comments`
                .replace(`{${"epic_id"}}`, encodeURIComponent(String(epicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commentCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new comment to the specified feature.
         * @summary Create a comment on a feature
         * @param {string} featureId 
         * @param {CommentCreateRequest} commentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsCreateFeature: async (featureId: string, commentCreateRequest: CommentCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('commentsCreateFeature', 'featureId', featureId)
            // verify required parameter 'commentCreateRequest' is not null or undefined
            assertParamExists('commentsCreateFeature', 'commentCreateRequest', commentCreateRequest)
            const localVarPath = `/features/{feature_id}/comments`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commentCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new comment to the specified idea.
         * @summary Create a comment on an idea
         * @param {string} ideaId 
         * @param {CommentCreateRequest} commentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsCreateIdea: async (ideaId: string, commentCreateRequest: CommentCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ideaId' is not null or undefined
            assertParamExists('commentsCreateIdea', 'ideaId', ideaId)
            // verify required parameter 'commentCreateRequest' is not null or undefined
            assertParamExists('commentsCreateIdea', 'commentCreateRequest', commentCreateRequest)
            const localVarPath = `/ideas/{idea_id}/comments`
                .replace(`{${"idea_id"}}`, encodeURIComponent(String(ideaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commentCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new comment to the specified initiative.
         * @summary Create a comment on an initiative
         * @param {string} initiativeId 
         * @param {CommentCreateRequest} commentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsCreateInitiative: async (initiativeId: string, commentCreateRequest: CommentCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'initiativeId' is not null or undefined
            assertParamExists('commentsCreateInitiative', 'initiativeId', initiativeId)
            // verify required parameter 'commentCreateRequest' is not null or undefined
            assertParamExists('commentsCreateInitiative', 'commentCreateRequest', commentCreateRequest)
            const localVarPath = `/initiatives/{initiative_id}/comments`
                .replace(`{${"initiative_id"}}`, encodeURIComponent(String(initiativeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commentCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new comment to the specified requirement.
         * @summary Create a comment on a requirement
         * @param {string} requirementId 
         * @param {CommentCreateRequest} commentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsCreateRequirement: async (requirementId: string, commentCreateRequest: CommentCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requirementId' is not null or undefined
            assertParamExists('commentsCreateRequirement', 'requirementId', requirementId)
            // verify required parameter 'commentCreateRequest' is not null or undefined
            assertParamExists('commentsCreateRequirement', 'commentCreateRequest', commentCreateRequest)
            const localVarPath = `/requirements/{requirement_id}/comments`
                .replace(`{${"requirement_id"}}`, encodeURIComponent(String(requirementId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commentCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of comments associated with the specified epic.
         * @summary List comments on an epic
         * @param {string} epicId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGetEpic: async (epicId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'epicId' is not null or undefined
            assertParamExists('commentsGetEpic', 'epicId', epicId)
            const localVarPath = `/epics/{epic_id}/comments`
                .replace(`{${"epic_id"}}`, encodeURIComponent(String(epicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of comments associated with the specified goal.
         * @summary List comments on a goal
         * @param {string} goalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGetGoal: async (goalId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalId' is not null or undefined
            assertParamExists('commentsGetGoal', 'goalId', goalId)
            const localVarPath = `/goals/{goal_id}/comments`
                .replace(`{${"goal_id"}}`, encodeURIComponent(String(goalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of comments associated with the specified idea.
         * @summary List comments on an idea
         * @param {string} ideaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGetIdea: async (ideaId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ideaId' is not null or undefined
            assertParamExists('commentsGetIdea', 'ideaId', ideaId)
            const localVarPath = `/ideas/{idea_id}/comments`
                .replace(`{${"idea_id"}}`, encodeURIComponent(String(ideaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of comments associated with the specified initiative.
         * @summary List comments on an initiative
         * @param {string} initiativeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGetInitiative: async (initiativeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'initiativeId' is not null or undefined
            assertParamExists('commentsGetInitiative', 'initiativeId', initiativeId)
            const localVarPath = `/initiatives/{initiative_id}/comments`
                .replace(`{${"initiative_id"}}`, encodeURIComponent(String(initiativeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of comments associated with the specified product.
         * @summary List comments in a product
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGetProduct: async (productId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('commentsGetProduct', 'productId', productId)
            const localVarPath = `/products/{product_id}/comments`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of comments associated with the specified release.
         * @summary List comments on a release
         * @param {string} releaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGetRelease: async (releaseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'releaseId' is not null or undefined
            assertParamExists('commentsGetRelease', 'releaseId', releaseId)
            const localVarPath = `/releases/{release_id}/comments`
                .replace(`{${"release_id"}}`, encodeURIComponent(String(releaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of comments associated with the specified release phase.
         * @summary List comments on a release phase
         * @param {string} releasePhaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGetReleasePhase: async (releasePhaseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'releasePhaseId' is not null or undefined
            assertParamExists('commentsGetReleasePhase', 'releasePhaseId', releasePhaseId)
            const localVarPath = `/release_phases/{release_phase_id}/comments`
                .replace(`{${"release_phase_id"}}`, encodeURIComponent(String(releasePhaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of comments associated with the specified requirement.
         * @summary List comments on a requirement
         * @param {string} requirementId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGetRequirement: async (requirementId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requirementId' is not null or undefined
            assertParamExists('commentsGetRequirement', 'requirementId', requirementId)
            const localVarPath = `/requirements/{requirement_id}/comments`
                .replace(`{${"requirement_id"}}`, encodeURIComponent(String(requirementId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of comments associated with the specified to-do.
         * @summary List comments on a to-do
         * @param {string} todoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGetTodo: async (todoId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'todoId' is not null or undefined
            assertParamExists('commentsGetTodo', 'todoId', todoId)
            const localVarPath = `/todos/{todo_id}/comments`
                .replace(`{${"todo_id"}}`, encodeURIComponent(String(todoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommentsApi - functional programming interface
 * @export
 */
export const CommentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new comment to the specified epic.
         * @summary Create a comment on an epic
         * @param {string} epicId 
         * @param {CommentCreateRequest} commentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsCreateEpic(epicId: string, commentCreateRequest: CommentCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsCreateEpic(epicId, commentCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.commentsCreateEpic']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Adds a new comment to the specified feature.
         * @summary Create a comment on a feature
         * @param {string} featureId 
         * @param {CommentCreateRequest} commentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsCreateFeature(featureId: string, commentCreateRequest: CommentCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsCreateFeature(featureId, commentCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.commentsCreateFeature']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Adds a new comment to the specified idea.
         * @summary Create a comment on an idea
         * @param {string} ideaId 
         * @param {CommentCreateRequest} commentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsCreateIdea(ideaId: string, commentCreateRequest: CommentCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsCreateIdea(ideaId, commentCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.commentsCreateIdea']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Adds a new comment to the specified initiative.
         * @summary Create a comment on an initiative
         * @param {string} initiativeId 
         * @param {CommentCreateRequest} commentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsCreateInitiative(initiativeId: string, commentCreateRequest: CommentCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsCreateInitiative(initiativeId, commentCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.commentsCreateInitiative']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Adds a new comment to the specified requirement.
         * @summary Create a comment on a requirement
         * @param {string} requirementId 
         * @param {CommentCreateRequest} commentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsCreateRequirement(requirementId: string, commentCreateRequest: CommentCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsCreateRequirement(requirementId, commentCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.commentsCreateRequirement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of comments associated with the specified epic.
         * @summary List comments on an epic
         * @param {string} epicId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsGetEpic(epicId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentsGetEpic200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsGetEpic(epicId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.commentsGetEpic']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of comments associated with the specified goal.
         * @summary List comments on a goal
         * @param {string} goalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsGetGoal(goalId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentsGetEpic200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsGetGoal(goalId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.commentsGetGoal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of comments associated with the specified idea.
         * @summary List comments on an idea
         * @param {string} ideaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsGetIdea(ideaId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentsGetEpic200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsGetIdea(ideaId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.commentsGetIdea']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of comments associated with the specified initiative.
         * @summary List comments on an initiative
         * @param {string} initiativeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsGetInitiative(initiativeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentsGetEpic200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsGetInitiative(initiativeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.commentsGetInitiative']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of comments associated with the specified product.
         * @summary List comments in a product
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsGetProduct(productId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentsGetEpic200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsGetProduct(productId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.commentsGetProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of comments associated with the specified release.
         * @summary List comments on a release
         * @param {string} releaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsGetRelease(releaseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentsGetEpic200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsGetRelease(releaseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.commentsGetRelease']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of comments associated with the specified release phase.
         * @summary List comments on a release phase
         * @param {string} releasePhaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsGetReleasePhase(releasePhaseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentsGetEpic200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsGetReleasePhase(releasePhaseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.commentsGetReleasePhase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of comments associated with the specified requirement.
         * @summary List comments on a requirement
         * @param {string} requirementId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsGetRequirement(requirementId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentsGetEpic200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsGetRequirement(requirementId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.commentsGetRequirement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of comments associated with the specified to-do.
         * @summary List comments on a to-do
         * @param {string} todoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsGetTodo(todoId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentsGetEpic200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsGetTodo(todoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.commentsGetTodo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CommentsApi - factory interface
 * @export
 */
export const CommentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommentsApiFp(configuration)
    return {
        /**
         * Adds a new comment to the specified epic.
         * @summary Create a comment on an epic
         * @param {CommentsApiCommentsCreateEpicRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsCreateEpic(requestParameters: CommentsApiCommentsCreateEpicRequest, options?: RawAxiosRequestConfig): AxiosPromise<Comment> {
            return localVarFp.commentsCreateEpic(requestParameters.epicId, requestParameters.commentCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new comment to the specified feature.
         * @summary Create a comment on a feature
         * @param {CommentsApiCommentsCreateFeatureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsCreateFeature(requestParameters: CommentsApiCommentsCreateFeatureRequest, options?: RawAxiosRequestConfig): AxiosPromise<Comment> {
            return localVarFp.commentsCreateFeature(requestParameters.featureId, requestParameters.commentCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new comment to the specified idea.
         * @summary Create a comment on an idea
         * @param {CommentsApiCommentsCreateIdeaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsCreateIdea(requestParameters: CommentsApiCommentsCreateIdeaRequest, options?: RawAxiosRequestConfig): AxiosPromise<Comment> {
            return localVarFp.commentsCreateIdea(requestParameters.ideaId, requestParameters.commentCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new comment to the specified initiative.
         * @summary Create a comment on an initiative
         * @param {CommentsApiCommentsCreateInitiativeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsCreateInitiative(requestParameters: CommentsApiCommentsCreateInitiativeRequest, options?: RawAxiosRequestConfig): AxiosPromise<Comment> {
            return localVarFp.commentsCreateInitiative(requestParameters.initiativeId, requestParameters.commentCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new comment to the specified requirement.
         * @summary Create a comment on a requirement
         * @param {CommentsApiCommentsCreateRequirementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsCreateRequirement(requestParameters: CommentsApiCommentsCreateRequirementRequest, options?: RawAxiosRequestConfig): AxiosPromise<Comment> {
            return localVarFp.commentsCreateRequirement(requestParameters.requirementId, requestParameters.commentCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of comments associated with the specified epic.
         * @summary List comments on an epic
         * @param {CommentsApiCommentsGetEpicRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGetEpic(requestParameters: CommentsApiCommentsGetEpicRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentsGetEpic200Response> {
            return localVarFp.commentsGetEpic(requestParameters.epicId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of comments associated with the specified goal.
         * @summary List comments on a goal
         * @param {CommentsApiCommentsGetGoalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGetGoal(requestParameters: CommentsApiCommentsGetGoalRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentsGetEpic200Response> {
            return localVarFp.commentsGetGoal(requestParameters.goalId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of comments associated with the specified idea.
         * @summary List comments on an idea
         * @param {CommentsApiCommentsGetIdeaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGetIdea(requestParameters: CommentsApiCommentsGetIdeaRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentsGetEpic200Response> {
            return localVarFp.commentsGetIdea(requestParameters.ideaId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of comments associated with the specified initiative.
         * @summary List comments on an initiative
         * @param {CommentsApiCommentsGetInitiativeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGetInitiative(requestParameters: CommentsApiCommentsGetInitiativeRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentsGetEpic200Response> {
            return localVarFp.commentsGetInitiative(requestParameters.initiativeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of comments associated with the specified product.
         * @summary List comments in a product
         * @param {CommentsApiCommentsGetProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGetProduct(requestParameters: CommentsApiCommentsGetProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentsGetEpic200Response> {
            return localVarFp.commentsGetProduct(requestParameters.productId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of comments associated with the specified release.
         * @summary List comments on a release
         * @param {CommentsApiCommentsGetReleaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGetRelease(requestParameters: CommentsApiCommentsGetReleaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentsGetEpic200Response> {
            return localVarFp.commentsGetRelease(requestParameters.releaseId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of comments associated with the specified release phase.
         * @summary List comments on a release phase
         * @param {CommentsApiCommentsGetReleasePhaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGetReleasePhase(requestParameters: CommentsApiCommentsGetReleasePhaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentsGetEpic200Response> {
            return localVarFp.commentsGetReleasePhase(requestParameters.releasePhaseId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of comments associated with the specified requirement.
         * @summary List comments on a requirement
         * @param {CommentsApiCommentsGetRequirementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGetRequirement(requestParameters: CommentsApiCommentsGetRequirementRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentsGetEpic200Response> {
            return localVarFp.commentsGetRequirement(requestParameters.requirementId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of comments associated with the specified to-do.
         * @summary List comments on a to-do
         * @param {CommentsApiCommentsGetTodoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGetTodo(requestParameters: CommentsApiCommentsGetTodoRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentsGetEpic200Response> {
            return localVarFp.commentsGetTodo(requestParameters.todoId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommentsApi - interface
 * @export
 * @interface CommentsApi
 */
export interface CommentsApiInterface {
    /**
     * Adds a new comment to the specified epic.
     * @summary Create a comment on an epic
     * @param {CommentsApiCommentsCreateEpicRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    commentsCreateEpic(requestParameters: CommentsApiCommentsCreateEpicRequest, options?: RawAxiosRequestConfig): AxiosPromise<Comment>;

    /**
     * Adds a new comment to the specified feature.
     * @summary Create a comment on a feature
     * @param {CommentsApiCommentsCreateFeatureRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    commentsCreateFeature(requestParameters: CommentsApiCommentsCreateFeatureRequest, options?: RawAxiosRequestConfig): AxiosPromise<Comment>;

    /**
     * Adds a new comment to the specified idea.
     * @summary Create a comment on an idea
     * @param {CommentsApiCommentsCreateIdeaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    commentsCreateIdea(requestParameters: CommentsApiCommentsCreateIdeaRequest, options?: RawAxiosRequestConfig): AxiosPromise<Comment>;

    /**
     * Adds a new comment to the specified initiative.
     * @summary Create a comment on an initiative
     * @param {CommentsApiCommentsCreateInitiativeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    commentsCreateInitiative(requestParameters: CommentsApiCommentsCreateInitiativeRequest, options?: RawAxiosRequestConfig): AxiosPromise<Comment>;

    /**
     * Adds a new comment to the specified requirement.
     * @summary Create a comment on a requirement
     * @param {CommentsApiCommentsCreateRequirementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    commentsCreateRequirement(requestParameters: CommentsApiCommentsCreateRequirementRequest, options?: RawAxiosRequestConfig): AxiosPromise<Comment>;

    /**
     * Retrieves a list of comments associated with the specified epic.
     * @summary List comments on an epic
     * @param {CommentsApiCommentsGetEpicRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    commentsGetEpic(requestParameters: CommentsApiCommentsGetEpicRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentsGetEpic200Response>;

    /**
     * Retrieves a list of comments associated with the specified goal.
     * @summary List comments on a goal
     * @param {CommentsApiCommentsGetGoalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    commentsGetGoal(requestParameters: CommentsApiCommentsGetGoalRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentsGetEpic200Response>;

    /**
     * Retrieves a list of comments associated with the specified idea.
     * @summary List comments on an idea
     * @param {CommentsApiCommentsGetIdeaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    commentsGetIdea(requestParameters: CommentsApiCommentsGetIdeaRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentsGetEpic200Response>;

    /**
     * Retrieves a list of comments associated with the specified initiative.
     * @summary List comments on an initiative
     * @param {CommentsApiCommentsGetInitiativeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    commentsGetInitiative(requestParameters: CommentsApiCommentsGetInitiativeRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentsGetEpic200Response>;

    /**
     * Retrieves a list of comments associated with the specified product.
     * @summary List comments in a product
     * @param {CommentsApiCommentsGetProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    commentsGetProduct(requestParameters: CommentsApiCommentsGetProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentsGetEpic200Response>;

    /**
     * Retrieves a list of comments associated with the specified release.
     * @summary List comments on a release
     * @param {CommentsApiCommentsGetReleaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    commentsGetRelease(requestParameters: CommentsApiCommentsGetReleaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentsGetEpic200Response>;

    /**
     * Retrieves a list of comments associated with the specified release phase.
     * @summary List comments on a release phase
     * @param {CommentsApiCommentsGetReleasePhaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    commentsGetReleasePhase(requestParameters: CommentsApiCommentsGetReleasePhaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentsGetEpic200Response>;

    /**
     * Retrieves a list of comments associated with the specified requirement.
     * @summary List comments on a requirement
     * @param {CommentsApiCommentsGetRequirementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    commentsGetRequirement(requestParameters: CommentsApiCommentsGetRequirementRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentsGetEpic200Response>;

    /**
     * Retrieves a list of comments associated with the specified to-do.
     * @summary List comments on a to-do
     * @param {CommentsApiCommentsGetTodoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    commentsGetTodo(requestParameters: CommentsApiCommentsGetTodoRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentsGetEpic200Response>;

}

/**
 * Request parameters for commentsCreateEpic operation in CommentsApi.
 * @export
 * @interface CommentsApiCommentsCreateEpicRequest
 */
export interface CommentsApiCommentsCreateEpicRequest {
    /**
     * 
     * @type {string}
     * @memberof CommentsApiCommentsCreateEpic
     */
    readonly epicId: string

    /**
     * 
     * @type {CommentCreateRequest}
     * @memberof CommentsApiCommentsCreateEpic
     */
    readonly commentCreateRequest: CommentCreateRequest
}

/**
 * Request parameters for commentsCreateFeature operation in CommentsApi.
 * @export
 * @interface CommentsApiCommentsCreateFeatureRequest
 */
export interface CommentsApiCommentsCreateFeatureRequest {
    /**
     * 
     * @type {string}
     * @memberof CommentsApiCommentsCreateFeature
     */
    readonly featureId: string

    /**
     * 
     * @type {CommentCreateRequest}
     * @memberof CommentsApiCommentsCreateFeature
     */
    readonly commentCreateRequest: CommentCreateRequest
}

/**
 * Request parameters for commentsCreateIdea operation in CommentsApi.
 * @export
 * @interface CommentsApiCommentsCreateIdeaRequest
 */
export interface CommentsApiCommentsCreateIdeaRequest {
    /**
     * 
     * @type {string}
     * @memberof CommentsApiCommentsCreateIdea
     */
    readonly ideaId: string

    /**
     * 
     * @type {CommentCreateRequest}
     * @memberof CommentsApiCommentsCreateIdea
     */
    readonly commentCreateRequest: CommentCreateRequest
}

/**
 * Request parameters for commentsCreateInitiative operation in CommentsApi.
 * @export
 * @interface CommentsApiCommentsCreateInitiativeRequest
 */
export interface CommentsApiCommentsCreateInitiativeRequest {
    /**
     * 
     * @type {string}
     * @memberof CommentsApiCommentsCreateInitiative
     */
    readonly initiativeId: string

    /**
     * 
     * @type {CommentCreateRequest}
     * @memberof CommentsApiCommentsCreateInitiative
     */
    readonly commentCreateRequest: CommentCreateRequest
}

/**
 * Request parameters for commentsCreateRequirement operation in CommentsApi.
 * @export
 * @interface CommentsApiCommentsCreateRequirementRequest
 */
export interface CommentsApiCommentsCreateRequirementRequest {
    /**
     * 
     * @type {string}
     * @memberof CommentsApiCommentsCreateRequirement
     */
    readonly requirementId: string

    /**
     * 
     * @type {CommentCreateRequest}
     * @memberof CommentsApiCommentsCreateRequirement
     */
    readonly commentCreateRequest: CommentCreateRequest
}

/**
 * Request parameters for commentsGetEpic operation in CommentsApi.
 * @export
 * @interface CommentsApiCommentsGetEpicRequest
 */
export interface CommentsApiCommentsGetEpicRequest {
    /**
     * 
     * @type {string}
     * @memberof CommentsApiCommentsGetEpic
     */
    readonly epicId: string
}

/**
 * Request parameters for commentsGetGoal operation in CommentsApi.
 * @export
 * @interface CommentsApiCommentsGetGoalRequest
 */
export interface CommentsApiCommentsGetGoalRequest {
    /**
     * 
     * @type {string}
     * @memberof CommentsApiCommentsGetGoal
     */
    readonly goalId: string
}

/**
 * Request parameters for commentsGetIdea operation in CommentsApi.
 * @export
 * @interface CommentsApiCommentsGetIdeaRequest
 */
export interface CommentsApiCommentsGetIdeaRequest {
    /**
     * 
     * @type {string}
     * @memberof CommentsApiCommentsGetIdea
     */
    readonly ideaId: string
}

/**
 * Request parameters for commentsGetInitiative operation in CommentsApi.
 * @export
 * @interface CommentsApiCommentsGetInitiativeRequest
 */
export interface CommentsApiCommentsGetInitiativeRequest {
    /**
     * 
     * @type {string}
     * @memberof CommentsApiCommentsGetInitiative
     */
    readonly initiativeId: string
}

/**
 * Request parameters for commentsGetProduct operation in CommentsApi.
 * @export
 * @interface CommentsApiCommentsGetProductRequest
 */
export interface CommentsApiCommentsGetProductRequest {
    /**
     * 
     * @type {string}
     * @memberof CommentsApiCommentsGetProduct
     */
    readonly productId: string
}

/**
 * Request parameters for commentsGetRelease operation in CommentsApi.
 * @export
 * @interface CommentsApiCommentsGetReleaseRequest
 */
export interface CommentsApiCommentsGetReleaseRequest {
    /**
     * 
     * @type {string}
     * @memberof CommentsApiCommentsGetRelease
     */
    readonly releaseId: string
}

/**
 * Request parameters for commentsGetReleasePhase operation in CommentsApi.
 * @export
 * @interface CommentsApiCommentsGetReleasePhaseRequest
 */
export interface CommentsApiCommentsGetReleasePhaseRequest {
    /**
     * 
     * @type {string}
     * @memberof CommentsApiCommentsGetReleasePhase
     */
    readonly releasePhaseId: string
}

/**
 * Request parameters for commentsGetRequirement operation in CommentsApi.
 * @export
 * @interface CommentsApiCommentsGetRequirementRequest
 */
export interface CommentsApiCommentsGetRequirementRequest {
    /**
     * 
     * @type {string}
     * @memberof CommentsApiCommentsGetRequirement
     */
    readonly requirementId: string
}

/**
 * Request parameters for commentsGetTodo operation in CommentsApi.
 * @export
 * @interface CommentsApiCommentsGetTodoRequest
 */
export interface CommentsApiCommentsGetTodoRequest {
    /**
     * 
     * @type {string}
     * @memberof CommentsApiCommentsGetTodo
     */
    readonly todoId: string
}

/**
 * CommentsApi - object-oriented interface
 * @export
 * @class CommentsApi
 * @extends {BaseAPI}
 */
export class CommentsApi extends BaseAPI implements CommentsApiInterface {
    /**
     * Adds a new comment to the specified epic.
     * @summary Create a comment on an epic
     * @param {CommentsApiCommentsCreateEpicRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public commentsCreateEpic(requestParameters: CommentsApiCommentsCreateEpicRequest, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).commentsCreateEpic(requestParameters.epicId, requestParameters.commentCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new comment to the specified feature.
     * @summary Create a comment on a feature
     * @param {CommentsApiCommentsCreateFeatureRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public commentsCreateFeature(requestParameters: CommentsApiCommentsCreateFeatureRequest, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).commentsCreateFeature(requestParameters.featureId, requestParameters.commentCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new comment to the specified idea.
     * @summary Create a comment on an idea
     * @param {CommentsApiCommentsCreateIdeaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public commentsCreateIdea(requestParameters: CommentsApiCommentsCreateIdeaRequest, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).commentsCreateIdea(requestParameters.ideaId, requestParameters.commentCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new comment to the specified initiative.
     * @summary Create a comment on an initiative
     * @param {CommentsApiCommentsCreateInitiativeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public commentsCreateInitiative(requestParameters: CommentsApiCommentsCreateInitiativeRequest, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).commentsCreateInitiative(requestParameters.initiativeId, requestParameters.commentCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new comment to the specified requirement.
     * @summary Create a comment on a requirement
     * @param {CommentsApiCommentsCreateRequirementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public commentsCreateRequirement(requestParameters: CommentsApiCommentsCreateRequirementRequest, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).commentsCreateRequirement(requestParameters.requirementId, requestParameters.commentCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of comments associated with the specified epic.
     * @summary List comments on an epic
     * @param {CommentsApiCommentsGetEpicRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public commentsGetEpic(requestParameters: CommentsApiCommentsGetEpicRequest, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).commentsGetEpic(requestParameters.epicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of comments associated with the specified goal.
     * @summary List comments on a goal
     * @param {CommentsApiCommentsGetGoalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public commentsGetGoal(requestParameters: CommentsApiCommentsGetGoalRequest, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).commentsGetGoal(requestParameters.goalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of comments associated with the specified idea.
     * @summary List comments on an idea
     * @param {CommentsApiCommentsGetIdeaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public commentsGetIdea(requestParameters: CommentsApiCommentsGetIdeaRequest, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).commentsGetIdea(requestParameters.ideaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of comments associated with the specified initiative.
     * @summary List comments on an initiative
     * @param {CommentsApiCommentsGetInitiativeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public commentsGetInitiative(requestParameters: CommentsApiCommentsGetInitiativeRequest, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).commentsGetInitiative(requestParameters.initiativeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of comments associated with the specified product.
     * @summary List comments in a product
     * @param {CommentsApiCommentsGetProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public commentsGetProduct(requestParameters: CommentsApiCommentsGetProductRequest, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).commentsGetProduct(requestParameters.productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of comments associated with the specified release.
     * @summary List comments on a release
     * @param {CommentsApiCommentsGetReleaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public commentsGetRelease(requestParameters: CommentsApiCommentsGetReleaseRequest, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).commentsGetRelease(requestParameters.releaseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of comments associated with the specified release phase.
     * @summary List comments on a release phase
     * @param {CommentsApiCommentsGetReleasePhaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public commentsGetReleasePhase(requestParameters: CommentsApiCommentsGetReleasePhaseRequest, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).commentsGetReleasePhase(requestParameters.releasePhaseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of comments associated with the specified requirement.
     * @summary List comments on a requirement
     * @param {CommentsApiCommentsGetRequirementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public commentsGetRequirement(requestParameters: CommentsApiCommentsGetRequirementRequest, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).commentsGetRequirement(requestParameters.requirementId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of comments associated with the specified to-do.
     * @summary List comments on a to-do
     * @param {CommentsApiCommentsGetTodoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public commentsGetTodo(requestParameters: CommentsApiCommentsGetTodoRequest, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).commentsGetTodo(requestParameters.todoId, options).then((request) => request(this.axios, this.basePath));
    }
}

