/* tslint:disable */
/* eslint-disable */
/**
 * Aha! REST API
 * API for interacting with Aha! product management platform.  ## Rate Limiting The API enforces rate limits to ensure fair usage: - **300 requests per minute** per account - **20 requests per second** per account  When rate limits are exceeded, the API returns a `429 Too Many Requests` response with a `retry_after` header indicating when to retry.  ## Authentication The API supports two authentication methods: - **OAuth 2.0**: For web applications and integrations requiring user consent - **API Tokens**: For server-to-server integrations and personal access  ## Request Headers - **User-Agent**: Required header to identify the client application - **Content-Type**: Set to `application/json` for POST/PUT requests - **Authorization**: Bearer token or OAuth access token  ## Response Format All responses are in JSON format. List endpoints include pagination metadata in the `meta.pagination` object.  ## Error Handling The API uses standard HTTP status codes and includes detailed error messages in the response body for debugging. 
 *
 * The version of the OpenAPI document: 1.0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Competitor } from '../model';
// @ts-ignore
import type { CompetitorCreateRequest } from '../model';
// @ts-ignore
import type { CompetitorUpdateRequest } from '../model';
// @ts-ignore
import type { CompetitorsListProduct200Response } from '../model';
/**
 * CompetitorsApi - axios parameter creator
 */
export const CompetitorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new competitor to the specified product.
         * @summary Create a competitor
         * @param {string} productId 
         * @param {CompetitorCreateRequest} competitorCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitorsCreate: async (productId: string, competitorCreateRequest: CompetitorCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('competitorsCreate', 'productId', productId)
            // verify required parameter 'competitorCreateRequest' is not null or undefined
            assertParamExists('competitorsCreate', 'competitorCreateRequest', competitorCreateRequest)
            const localVarPath = `/products/{product_id}/competitors`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(competitorCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the specified competitor.
         * @summary Delete a competitor
         * @param {string} competitorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitorsDelete: async (competitorId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'competitorId' is not null or undefined
            assertParamExists('competitorsDelete', 'competitorId', competitorId)
            const localVarPath = `/competitors/{competitor_id}`
                .replace(`{${"competitor_id"}}`, encodeURIComponent(String(competitorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves details of the specified competitor.
         * @summary Get a specific competitor
         * @param {string} competitorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitorsGet: async (competitorId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'competitorId' is not null or undefined
            assertParamExists('competitorsGet', 'competitorId', competitorId)
            const localVarPath = `/competitors/{competitor_id}`
                .replace(`{${"competitor_id"}}`, encodeURIComponent(String(competitorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of competitors associated with the specified product.
         * @summary List competitors in a product
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitorsListProduct: async (productId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('competitorsListProduct', 'productId', productId)
            const localVarPath = `/products/{product_id}/competitors`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the details of the specified competitor.
         * @summary Update a competitor
         * @param {string} competitorId 
         * @param {CompetitorUpdateRequest} competitorUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitorsUpdate: async (competitorId: string, competitorUpdateRequest: CompetitorUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'competitorId' is not null or undefined
            assertParamExists('competitorsUpdate', 'competitorId', competitorId)
            // verify required parameter 'competitorUpdateRequest' is not null or undefined
            assertParamExists('competitorsUpdate', 'competitorUpdateRequest', competitorUpdateRequest)
            const localVarPath = `/competitors/{competitor_id}`
                .replace(`{${"competitor_id"}}`, encodeURIComponent(String(competitorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(competitorUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompetitorsApi - functional programming interface
 */
export const CompetitorsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompetitorsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new competitor to the specified product.
         * @summary Create a competitor
         * @param {string} productId 
         * @param {CompetitorCreateRequest} competitorCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async competitorsCreate(productId: string, competitorCreateRequest: CompetitorCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Competitor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.competitorsCreate(productId, competitorCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompetitorsApi.competitorsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Removes the specified competitor.
         * @summary Delete a competitor
         * @param {string} competitorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async competitorsDelete(competitorId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.competitorsDelete(competitorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompetitorsApi.competitorsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves details of the specified competitor.
         * @summary Get a specific competitor
         * @param {string} competitorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async competitorsGet(competitorId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Competitor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.competitorsGet(competitorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompetitorsApi.competitorsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of competitors associated with the specified product.
         * @summary List competitors in a product
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async competitorsListProduct(productId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompetitorsListProduct200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.competitorsListProduct(productId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompetitorsApi.competitorsListProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the details of the specified competitor.
         * @summary Update a competitor
         * @param {string} competitorId 
         * @param {CompetitorUpdateRequest} competitorUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async competitorsUpdate(competitorId: string, competitorUpdateRequest: CompetitorUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Competitor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.competitorsUpdate(competitorId, competitorUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompetitorsApi.competitorsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CompetitorsApi - factory interface
 */
export const CompetitorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompetitorsApiFp(configuration)
    return {
        /**
         * Adds a new competitor to the specified product.
         * @summary Create a competitor
         * @param {CompetitorsApiCompetitorsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitorsCreate(requestParameters: CompetitorsApiCompetitorsCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Competitor> {
            return localVarFp.competitorsCreate(requestParameters.productId, requestParameters.competitorCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the specified competitor.
         * @summary Delete a competitor
         * @param {CompetitorsApiCompetitorsDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitorsDelete(requestParameters: CompetitorsApiCompetitorsDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.competitorsDelete(requestParameters.competitorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves details of the specified competitor.
         * @summary Get a specific competitor
         * @param {CompetitorsApiCompetitorsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitorsGet(requestParameters: CompetitorsApiCompetitorsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Competitor> {
            return localVarFp.competitorsGet(requestParameters.competitorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of competitors associated with the specified product.
         * @summary List competitors in a product
         * @param {CompetitorsApiCompetitorsListProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitorsListProduct(requestParameters: CompetitorsApiCompetitorsListProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<CompetitorsListProduct200Response> {
            return localVarFp.competitorsListProduct(requestParameters.productId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the details of the specified competitor.
         * @summary Update a competitor
         * @param {CompetitorsApiCompetitorsUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitorsUpdate(requestParameters: CompetitorsApiCompetitorsUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Competitor> {
            return localVarFp.competitorsUpdate(requestParameters.competitorId, requestParameters.competitorUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompetitorsApi - interface
 */
export interface CompetitorsApiInterface {
    /**
     * Adds a new competitor to the specified product.
     * @summary Create a competitor
     * @param {CompetitorsApiCompetitorsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    competitorsCreate(requestParameters: CompetitorsApiCompetitorsCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Competitor>;

    /**
     * Removes the specified competitor.
     * @summary Delete a competitor
     * @param {CompetitorsApiCompetitorsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    competitorsDelete(requestParameters: CompetitorsApiCompetitorsDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Retrieves details of the specified competitor.
     * @summary Get a specific competitor
     * @param {CompetitorsApiCompetitorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    competitorsGet(requestParameters: CompetitorsApiCompetitorsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Competitor>;

    /**
     * Retrieves a list of competitors associated with the specified product.
     * @summary List competitors in a product
     * @param {CompetitorsApiCompetitorsListProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    competitorsListProduct(requestParameters: CompetitorsApiCompetitorsListProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<CompetitorsListProduct200Response>;

    /**
     * Updates the details of the specified competitor.
     * @summary Update a competitor
     * @param {CompetitorsApiCompetitorsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    competitorsUpdate(requestParameters: CompetitorsApiCompetitorsUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Competitor>;

}

/**
 * Request parameters for competitorsCreate operation in CompetitorsApi.
 */
export interface CompetitorsApiCompetitorsCreateRequest {
    readonly productId: string

    readonly competitorCreateRequest: CompetitorCreateRequest
}

/**
 * Request parameters for competitorsDelete operation in CompetitorsApi.
 */
export interface CompetitorsApiCompetitorsDeleteRequest {
    readonly competitorId: string
}

/**
 * Request parameters for competitorsGet operation in CompetitorsApi.
 */
export interface CompetitorsApiCompetitorsGetRequest {
    readonly competitorId: string
}

/**
 * Request parameters for competitorsListProduct operation in CompetitorsApi.
 */
export interface CompetitorsApiCompetitorsListProductRequest {
    readonly productId: string
}

/**
 * Request parameters for competitorsUpdate operation in CompetitorsApi.
 */
export interface CompetitorsApiCompetitorsUpdateRequest {
    readonly competitorId: string

    readonly competitorUpdateRequest: CompetitorUpdateRequest
}

/**
 * CompetitorsApi - object-oriented interface
 */
export class CompetitorsApi extends BaseAPI implements CompetitorsApiInterface {
    /**
     * Adds a new competitor to the specified product.
     * @summary Create a competitor
     * @param {CompetitorsApiCompetitorsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public competitorsCreate(requestParameters: CompetitorsApiCompetitorsCreateRequest, options?: RawAxiosRequestConfig) {
        return CompetitorsApiFp(this.configuration).competitorsCreate(requestParameters.productId, requestParameters.competitorCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the specified competitor.
     * @summary Delete a competitor
     * @param {CompetitorsApiCompetitorsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public competitorsDelete(requestParameters: CompetitorsApiCompetitorsDeleteRequest, options?: RawAxiosRequestConfig) {
        return CompetitorsApiFp(this.configuration).competitorsDelete(requestParameters.competitorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves details of the specified competitor.
     * @summary Get a specific competitor
     * @param {CompetitorsApiCompetitorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public competitorsGet(requestParameters: CompetitorsApiCompetitorsGetRequest, options?: RawAxiosRequestConfig) {
        return CompetitorsApiFp(this.configuration).competitorsGet(requestParameters.competitorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of competitors associated with the specified product.
     * @summary List competitors in a product
     * @param {CompetitorsApiCompetitorsListProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public competitorsListProduct(requestParameters: CompetitorsApiCompetitorsListProductRequest, options?: RawAxiosRequestConfig) {
        return CompetitorsApiFp(this.configuration).competitorsListProduct(requestParameters.productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the details of the specified competitor.
     * @summary Update a competitor
     * @param {CompetitorsApiCompetitorsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public competitorsUpdate(requestParameters: CompetitorsApiCompetitorsUpdateRequest, options?: RawAxiosRequestConfig) {
        return CompetitorsApiFp(this.configuration).competitorsUpdate(requestParameters.competitorId, requestParameters.competitorUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

