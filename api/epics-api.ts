/* tslint:disable */
/* eslint-disable */
/**
 * Aha! REST API
 * API for interacting with Aha! product management platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Epic } from '../model';
// @ts-ignore
import type { EpicCreateRequest } from '../model';
// @ts-ignore
import type { EpicUpdateRequest } from '../model';
// @ts-ignore
import type { EpicsEpicIdCommentsGet200Response } from '../model';
// @ts-ignore
import type { ProductsProductIdEpicsGet200Response } from '../model';
/**
 * EpicsApi - axios parameter creator
 * @export
 */
export const EpicsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a list of comments associated with the specified epic.
         * @summary List comments on an epic
         * @param {string} epicId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        epicsEpicIdCommentsGet: async (epicId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'epicId' is not null or undefined
            assertParamExists('epicsEpicIdCommentsGet', 'epicId', epicId)
            const localVarPath = `/epics/{epic_id}/comments`
                .replace(`{${"epic_id"}}`, encodeURIComponent(String(epicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the specified epic.
         * @summary Delete an epic
         * @param {string} epicId Numeric ID or key of the epic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        epicsEpicIdDelete: async (epicId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'epicId' is not null or undefined
            assertParamExists('epicsEpicIdDelete', 'epicId', epicId)
            const localVarPath = `/epics/{epic_id}`
                .replace(`{${"epic_id"}}`, encodeURIComponent(String(epicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves details of a specific epic by its ID.
         * @summary Get a specific epic
         * @param {string} epicId Numeric ID or key of the epic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        epicsEpicIdGet: async (epicId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'epicId' is not null or undefined
            assertParamExists('epicsEpicIdGet', 'epicId', epicId)
            const localVarPath = `/epics/{epic_id}`
                .replace(`{${"epic_id"}}`, encodeURIComponent(String(epicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the details of the specified epic.
         * @summary Update an epic
         * @param {string} epicId Numeric ID or key of the epic
         * @param {EpicUpdateRequest} epicUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        epicsEpicIdPut: async (epicId: string, epicUpdateRequest: EpicUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'epicId' is not null or undefined
            assertParamExists('epicsEpicIdPut', 'epicId', epicId)
            // verify required parameter 'epicUpdateRequest' is not null or undefined
            assertParamExists('epicsEpicIdPut', 'epicUpdateRequest', epicUpdateRequest)
            const localVarPath = `/epics/{epic_id}`
                .replace(`{${"epic_id"}}`, encodeURIComponent(String(epicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(epicUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of epics associated with the specified goal.
         * @summary List epics associated with a goal
         * @param {string} goalId Numeric ID or key of the goal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsGoalIdEpicsGet: async (goalId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalId' is not null or undefined
            assertParamExists('goalsGoalIdEpicsGet', 'goalId', goalId)
            const localVarPath = `/goals/{goal_id}/epics`
                .replace(`{${"goal_id"}}`, encodeURIComponent(String(goalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of epics associated with the specified initiative.
         * @summary List epics associated with an initiative
         * @param {string} initiativeId Numeric ID or key of the initiative
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiativesInitiativeIdEpicsGet: async (initiativeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'initiativeId' is not null or undefined
            assertParamExists('initiativesInitiativeIdEpicsGet', 'initiativeId', initiativeId)
            const localVarPath = `/initiatives/{initiative_id}/epics`
                .replace(`{${"initiative_id"}}`, encodeURIComponent(String(initiativeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of epics associated with the specified product.
         * @summary List epics in a product
         * @param {string} productId Numeric ID or key of the product
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsProductIdEpicsGet: async (productId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('productsProductIdEpicsGet', 'productId', productId)
            const localVarPath = `/products/{product_id}/epics`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new epic in the specified product.
         * @summary Create an epic in a product
         * @param {string} productId Numeric ID or key of the product the epic should be created in
         * @param {EpicCreateRequest} epicCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsProductIdEpicsPost: async (productId: string, epicCreateRequest: EpicCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('productsProductIdEpicsPost', 'productId', productId)
            // verify required parameter 'epicCreateRequest' is not null or undefined
            assertParamExists('productsProductIdEpicsPost', 'epicCreateRequest', epicCreateRequest)
            const localVarPath = `/products/{product_id}/epics`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(epicCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of epics associated with the specified release.
         * @summary List epics in a release
         * @param {string} releaseId Numeric ID or key of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesReleaseIdEpicsGet: async (releaseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'releaseId' is not null or undefined
            assertParamExists('releasesReleaseIdEpicsGet', 'releaseId', releaseId)
            const localVarPath = `/releases/{release_id}/epics`
                .replace(`{${"release_id"}}`, encodeURIComponent(String(releaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new epic in the specified release.
         * @summary Create an epic in a release
         * @param {string} releaseId Numeric ID or key of the release the epic should be created in
         * @param {EpicCreateRequest} epicCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesReleaseIdEpicsPost: async (releaseId: string, epicCreateRequest: EpicCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'releaseId' is not null or undefined
            assertParamExists('releasesReleaseIdEpicsPost', 'releaseId', releaseId)
            // verify required parameter 'epicCreateRequest' is not null or undefined
            assertParamExists('releasesReleaseIdEpicsPost', 'epicCreateRequest', epicCreateRequest)
            const localVarPath = `/releases/{release_id}/epics`
                .replace(`{${"release_id"}}`, encodeURIComponent(String(releaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(epicCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EpicsApi - functional programming interface
 * @export
 */
export const EpicsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EpicsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a list of comments associated with the specified epic.
         * @summary List comments on an epic
         * @param {string} epicId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async epicsEpicIdCommentsGet(epicId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EpicsEpicIdCommentsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.epicsEpicIdCommentsGet(epicId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EpicsApi.epicsEpicIdCommentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes the specified epic.
         * @summary Delete an epic
         * @param {string} epicId Numeric ID or key of the epic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async epicsEpicIdDelete(epicId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.epicsEpicIdDelete(epicId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EpicsApi.epicsEpicIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves details of a specific epic by its ID.
         * @summary Get a specific epic
         * @param {string} epicId Numeric ID or key of the epic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async epicsEpicIdGet(epicId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Epic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.epicsEpicIdGet(epicId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EpicsApi.epicsEpicIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the details of the specified epic.
         * @summary Update an epic
         * @param {string} epicId Numeric ID or key of the epic
         * @param {EpicUpdateRequest} epicUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async epicsEpicIdPut(epicId: string, epicUpdateRequest: EpicUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Epic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.epicsEpicIdPut(epicId, epicUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EpicsApi.epicsEpicIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of epics associated with the specified goal.
         * @summary List epics associated with a goal
         * @param {string} goalId Numeric ID or key of the goal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async goalsGoalIdEpicsGet(goalId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductsProductIdEpicsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.goalsGoalIdEpicsGet(goalId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EpicsApi.goalsGoalIdEpicsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of epics associated with the specified initiative.
         * @summary List epics associated with an initiative
         * @param {string} initiativeId Numeric ID or key of the initiative
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initiativesInitiativeIdEpicsGet(initiativeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductsProductIdEpicsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.initiativesInitiativeIdEpicsGet(initiativeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EpicsApi.initiativesInitiativeIdEpicsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of epics associated with the specified product.
         * @summary List epics in a product
         * @param {string} productId Numeric ID or key of the product
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsProductIdEpicsGet(productId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductsProductIdEpicsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsProductIdEpicsGet(productId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EpicsApi.productsProductIdEpicsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new epic in the specified product.
         * @summary Create an epic in a product
         * @param {string} productId Numeric ID or key of the product the epic should be created in
         * @param {EpicCreateRequest} epicCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsProductIdEpicsPost(productId: string, epicCreateRequest: EpicCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Epic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsProductIdEpicsPost(productId, epicCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EpicsApi.productsProductIdEpicsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of epics associated with the specified release.
         * @summary List epics in a release
         * @param {string} releaseId Numeric ID or key of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async releasesReleaseIdEpicsGet(releaseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductsProductIdEpicsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.releasesReleaseIdEpicsGet(releaseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EpicsApi.releasesReleaseIdEpicsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new epic in the specified release.
         * @summary Create an epic in a release
         * @param {string} releaseId Numeric ID or key of the release the epic should be created in
         * @param {EpicCreateRequest} epicCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async releasesReleaseIdEpicsPost(releaseId: string, epicCreateRequest: EpicCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Epic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.releasesReleaseIdEpicsPost(releaseId, epicCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EpicsApi.releasesReleaseIdEpicsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EpicsApi - factory interface
 * @export
 */
export const EpicsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EpicsApiFp(configuration)
    return {
        /**
         * Retrieves a list of comments associated with the specified epic.
         * @summary List comments on an epic
         * @param {EpicsApiEpicsEpicIdCommentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        epicsEpicIdCommentsGet(requestParameters: EpicsApiEpicsEpicIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response> {
            return localVarFp.epicsEpicIdCommentsGet(requestParameters.epicId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the specified epic.
         * @summary Delete an epic
         * @param {EpicsApiEpicsEpicIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        epicsEpicIdDelete(requestParameters: EpicsApiEpicsEpicIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.epicsEpicIdDelete(requestParameters.epicId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves details of a specific epic by its ID.
         * @summary Get a specific epic
         * @param {EpicsApiEpicsEpicIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        epicsEpicIdGet(requestParameters: EpicsApiEpicsEpicIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Epic> {
            return localVarFp.epicsEpicIdGet(requestParameters.epicId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the details of the specified epic.
         * @summary Update an epic
         * @param {EpicsApiEpicsEpicIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        epicsEpicIdPut(requestParameters: EpicsApiEpicsEpicIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Epic> {
            return localVarFp.epicsEpicIdPut(requestParameters.epicId, requestParameters.epicUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of epics associated with the specified goal.
         * @summary List epics associated with a goal
         * @param {EpicsApiGoalsGoalIdEpicsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsGoalIdEpicsGet(requestParameters: EpicsApiGoalsGoalIdEpicsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductsProductIdEpicsGet200Response> {
            return localVarFp.goalsGoalIdEpicsGet(requestParameters.goalId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of epics associated with the specified initiative.
         * @summary List epics associated with an initiative
         * @param {EpicsApiInitiativesInitiativeIdEpicsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiativesInitiativeIdEpicsGet(requestParameters: EpicsApiInitiativesInitiativeIdEpicsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductsProductIdEpicsGet200Response> {
            return localVarFp.initiativesInitiativeIdEpicsGet(requestParameters.initiativeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of epics associated with the specified product.
         * @summary List epics in a product
         * @param {EpicsApiProductsProductIdEpicsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsProductIdEpicsGet(requestParameters: EpicsApiProductsProductIdEpicsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductsProductIdEpicsGet200Response> {
            return localVarFp.productsProductIdEpicsGet(requestParameters.productId, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new epic in the specified product.
         * @summary Create an epic in a product
         * @param {EpicsApiProductsProductIdEpicsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsProductIdEpicsPost(requestParameters: EpicsApiProductsProductIdEpicsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Epic> {
            return localVarFp.productsProductIdEpicsPost(requestParameters.productId, requestParameters.epicCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of epics associated with the specified release.
         * @summary List epics in a release
         * @param {EpicsApiReleasesReleaseIdEpicsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesReleaseIdEpicsGet(requestParameters: EpicsApiReleasesReleaseIdEpicsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductsProductIdEpicsGet200Response> {
            return localVarFp.releasesReleaseIdEpicsGet(requestParameters.releaseId, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new epic in the specified release.
         * @summary Create an epic in a release
         * @param {EpicsApiReleasesReleaseIdEpicsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesReleaseIdEpicsPost(requestParameters: EpicsApiReleasesReleaseIdEpicsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Epic> {
            return localVarFp.releasesReleaseIdEpicsPost(requestParameters.releaseId, requestParameters.epicCreateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EpicsApi - interface
 * @export
 * @interface EpicsApi
 */
export interface EpicsApiInterface {
    /**
     * Retrieves a list of comments associated with the specified epic.
     * @summary List comments on an epic
     * @param {EpicsApiEpicsEpicIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpicsApiInterface
     */
    epicsEpicIdCommentsGet(requestParameters: EpicsApiEpicsEpicIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response>;

    /**
     * Deletes the specified epic.
     * @summary Delete an epic
     * @param {EpicsApiEpicsEpicIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpicsApiInterface
     */
    epicsEpicIdDelete(requestParameters: EpicsApiEpicsEpicIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Retrieves details of a specific epic by its ID.
     * @summary Get a specific epic
     * @param {EpicsApiEpicsEpicIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpicsApiInterface
     */
    epicsEpicIdGet(requestParameters: EpicsApiEpicsEpicIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Epic>;

    /**
     * Updates the details of the specified epic.
     * @summary Update an epic
     * @param {EpicsApiEpicsEpicIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpicsApiInterface
     */
    epicsEpicIdPut(requestParameters: EpicsApiEpicsEpicIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Epic>;

    /**
     * Retrieves a list of epics associated with the specified goal.
     * @summary List epics associated with a goal
     * @param {EpicsApiGoalsGoalIdEpicsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpicsApiInterface
     */
    goalsGoalIdEpicsGet(requestParameters: EpicsApiGoalsGoalIdEpicsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductsProductIdEpicsGet200Response>;

    /**
     * Retrieves a list of epics associated with the specified initiative.
     * @summary List epics associated with an initiative
     * @param {EpicsApiInitiativesInitiativeIdEpicsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpicsApiInterface
     */
    initiativesInitiativeIdEpicsGet(requestParameters: EpicsApiInitiativesInitiativeIdEpicsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductsProductIdEpicsGet200Response>;

    /**
     * Retrieves a list of epics associated with the specified product.
     * @summary List epics in a product
     * @param {EpicsApiProductsProductIdEpicsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpicsApiInterface
     */
    productsProductIdEpicsGet(requestParameters: EpicsApiProductsProductIdEpicsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductsProductIdEpicsGet200Response>;

    /**
     * Creates a new epic in the specified product.
     * @summary Create an epic in a product
     * @param {EpicsApiProductsProductIdEpicsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpicsApiInterface
     */
    productsProductIdEpicsPost(requestParameters: EpicsApiProductsProductIdEpicsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Epic>;

    /**
     * Retrieves a list of epics associated with the specified release.
     * @summary List epics in a release
     * @param {EpicsApiReleasesReleaseIdEpicsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpicsApiInterface
     */
    releasesReleaseIdEpicsGet(requestParameters: EpicsApiReleasesReleaseIdEpicsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductsProductIdEpicsGet200Response>;

    /**
     * Creates a new epic in the specified release.
     * @summary Create an epic in a release
     * @param {EpicsApiReleasesReleaseIdEpicsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpicsApiInterface
     */
    releasesReleaseIdEpicsPost(requestParameters: EpicsApiReleasesReleaseIdEpicsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Epic>;

}

/**
 * Request parameters for epicsEpicIdCommentsGet operation in EpicsApi.
 * @export
 * @interface EpicsApiEpicsEpicIdCommentsGetRequest
 */
export interface EpicsApiEpicsEpicIdCommentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof EpicsApiEpicsEpicIdCommentsGet
     */
    readonly epicId: string
}

/**
 * Request parameters for epicsEpicIdDelete operation in EpicsApi.
 * @export
 * @interface EpicsApiEpicsEpicIdDeleteRequest
 */
export interface EpicsApiEpicsEpicIdDeleteRequest {
    /**
     * Numeric ID or key of the epic
     * @type {string}
     * @memberof EpicsApiEpicsEpicIdDelete
     */
    readonly epicId: string
}

/**
 * Request parameters for epicsEpicIdGet operation in EpicsApi.
 * @export
 * @interface EpicsApiEpicsEpicIdGetRequest
 */
export interface EpicsApiEpicsEpicIdGetRequest {
    /**
     * Numeric ID or key of the epic
     * @type {string}
     * @memberof EpicsApiEpicsEpicIdGet
     */
    readonly epicId: string
}

/**
 * Request parameters for epicsEpicIdPut operation in EpicsApi.
 * @export
 * @interface EpicsApiEpicsEpicIdPutRequest
 */
export interface EpicsApiEpicsEpicIdPutRequest {
    /**
     * Numeric ID or key of the epic
     * @type {string}
     * @memberof EpicsApiEpicsEpicIdPut
     */
    readonly epicId: string

    /**
     * 
     * @type {EpicUpdateRequest}
     * @memberof EpicsApiEpicsEpicIdPut
     */
    readonly epicUpdateRequest: EpicUpdateRequest
}

/**
 * Request parameters for goalsGoalIdEpicsGet operation in EpicsApi.
 * @export
 * @interface EpicsApiGoalsGoalIdEpicsGetRequest
 */
export interface EpicsApiGoalsGoalIdEpicsGetRequest {
    /**
     * Numeric ID or key of the goal
     * @type {string}
     * @memberof EpicsApiGoalsGoalIdEpicsGet
     */
    readonly goalId: string
}

/**
 * Request parameters for initiativesInitiativeIdEpicsGet operation in EpicsApi.
 * @export
 * @interface EpicsApiInitiativesInitiativeIdEpicsGetRequest
 */
export interface EpicsApiInitiativesInitiativeIdEpicsGetRequest {
    /**
     * Numeric ID or key of the initiative
     * @type {string}
     * @memberof EpicsApiInitiativesInitiativeIdEpicsGet
     */
    readonly initiativeId: string
}

/**
 * Request parameters for productsProductIdEpicsGet operation in EpicsApi.
 * @export
 * @interface EpicsApiProductsProductIdEpicsGetRequest
 */
export interface EpicsApiProductsProductIdEpicsGetRequest {
    /**
     * Numeric ID or key of the product
     * @type {string}
     * @memberof EpicsApiProductsProductIdEpicsGet
     */
    readonly productId: string
}

/**
 * Request parameters for productsProductIdEpicsPost operation in EpicsApi.
 * @export
 * @interface EpicsApiProductsProductIdEpicsPostRequest
 */
export interface EpicsApiProductsProductIdEpicsPostRequest {
    /**
     * Numeric ID or key of the product the epic should be created in
     * @type {string}
     * @memberof EpicsApiProductsProductIdEpicsPost
     */
    readonly productId: string

    /**
     * 
     * @type {EpicCreateRequest}
     * @memberof EpicsApiProductsProductIdEpicsPost
     */
    readonly epicCreateRequest: EpicCreateRequest
}

/**
 * Request parameters for releasesReleaseIdEpicsGet operation in EpicsApi.
 * @export
 * @interface EpicsApiReleasesReleaseIdEpicsGetRequest
 */
export interface EpicsApiReleasesReleaseIdEpicsGetRequest {
    /**
     * Numeric ID or key of the release
     * @type {string}
     * @memberof EpicsApiReleasesReleaseIdEpicsGet
     */
    readonly releaseId: string
}

/**
 * Request parameters for releasesReleaseIdEpicsPost operation in EpicsApi.
 * @export
 * @interface EpicsApiReleasesReleaseIdEpicsPostRequest
 */
export interface EpicsApiReleasesReleaseIdEpicsPostRequest {
    /**
     * Numeric ID or key of the release the epic should be created in
     * @type {string}
     * @memberof EpicsApiReleasesReleaseIdEpicsPost
     */
    readonly releaseId: string

    /**
     * 
     * @type {EpicCreateRequest}
     * @memberof EpicsApiReleasesReleaseIdEpicsPost
     */
    readonly epicCreateRequest: EpicCreateRequest
}

/**
 * EpicsApi - object-oriented interface
 * @export
 * @class EpicsApi
 * @extends {BaseAPI}
 */
export class EpicsApi extends BaseAPI implements EpicsApiInterface {
    /**
     * Retrieves a list of comments associated with the specified epic.
     * @summary List comments on an epic
     * @param {EpicsApiEpicsEpicIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpicsApi
     */
    public epicsEpicIdCommentsGet(requestParameters: EpicsApiEpicsEpicIdCommentsGetRequest, options?: RawAxiosRequestConfig) {
        return EpicsApiFp(this.configuration).epicsEpicIdCommentsGet(requestParameters.epicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the specified epic.
     * @summary Delete an epic
     * @param {EpicsApiEpicsEpicIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpicsApi
     */
    public epicsEpicIdDelete(requestParameters: EpicsApiEpicsEpicIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return EpicsApiFp(this.configuration).epicsEpicIdDelete(requestParameters.epicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves details of a specific epic by its ID.
     * @summary Get a specific epic
     * @param {EpicsApiEpicsEpicIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpicsApi
     */
    public epicsEpicIdGet(requestParameters: EpicsApiEpicsEpicIdGetRequest, options?: RawAxiosRequestConfig) {
        return EpicsApiFp(this.configuration).epicsEpicIdGet(requestParameters.epicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the details of the specified epic.
     * @summary Update an epic
     * @param {EpicsApiEpicsEpicIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpicsApi
     */
    public epicsEpicIdPut(requestParameters: EpicsApiEpicsEpicIdPutRequest, options?: RawAxiosRequestConfig) {
        return EpicsApiFp(this.configuration).epicsEpicIdPut(requestParameters.epicId, requestParameters.epicUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of epics associated with the specified goal.
     * @summary List epics associated with a goal
     * @param {EpicsApiGoalsGoalIdEpicsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpicsApi
     */
    public goalsGoalIdEpicsGet(requestParameters: EpicsApiGoalsGoalIdEpicsGetRequest, options?: RawAxiosRequestConfig) {
        return EpicsApiFp(this.configuration).goalsGoalIdEpicsGet(requestParameters.goalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of epics associated with the specified initiative.
     * @summary List epics associated with an initiative
     * @param {EpicsApiInitiativesInitiativeIdEpicsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpicsApi
     */
    public initiativesInitiativeIdEpicsGet(requestParameters: EpicsApiInitiativesInitiativeIdEpicsGetRequest, options?: RawAxiosRequestConfig) {
        return EpicsApiFp(this.configuration).initiativesInitiativeIdEpicsGet(requestParameters.initiativeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of epics associated with the specified product.
     * @summary List epics in a product
     * @param {EpicsApiProductsProductIdEpicsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpicsApi
     */
    public productsProductIdEpicsGet(requestParameters: EpicsApiProductsProductIdEpicsGetRequest, options?: RawAxiosRequestConfig) {
        return EpicsApiFp(this.configuration).productsProductIdEpicsGet(requestParameters.productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new epic in the specified product.
     * @summary Create an epic in a product
     * @param {EpicsApiProductsProductIdEpicsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpicsApi
     */
    public productsProductIdEpicsPost(requestParameters: EpicsApiProductsProductIdEpicsPostRequest, options?: RawAxiosRequestConfig) {
        return EpicsApiFp(this.configuration).productsProductIdEpicsPost(requestParameters.productId, requestParameters.epicCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of epics associated with the specified release.
     * @summary List epics in a release
     * @param {EpicsApiReleasesReleaseIdEpicsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpicsApi
     */
    public releasesReleaseIdEpicsGet(requestParameters: EpicsApiReleasesReleaseIdEpicsGetRequest, options?: RawAxiosRequestConfig) {
        return EpicsApiFp(this.configuration).releasesReleaseIdEpicsGet(requestParameters.releaseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new epic in the specified release.
     * @summary Create an epic in a release
     * @param {EpicsApiReleasesReleaseIdEpicsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpicsApi
     */
    public releasesReleaseIdEpicsPost(requestParameters: EpicsApiReleasesReleaseIdEpicsPostRequest, options?: RawAxiosRequestConfig) {
        return EpicsApiFp(this.configuration).releasesReleaseIdEpicsPost(requestParameters.releaseId, requestParameters.epicCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

