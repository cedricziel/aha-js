/* tslint:disable */
/* eslint-disable */
/**
 * Aha! REST API
 * API for interacting with Aha! product management platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { MeAssignedRecordsResponse } from '../model';
// @ts-ignore
import type { MePendingTasksResponse } from '../model';
// @ts-ignore
import type { MeProfileResponse } from '../model';
/**
 * MeApi - axios parameter creator
 * @export
 */
export const MeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a list of records currently assigned to the authenticated user.
         * @summary Get records assigned to current user
         * @param {number} [page] Page number for pagination
         * @param {number} [perPage] Number of records per page
         * @param {MeGetAssignedRecordsTypeEnum} [type] Filter records by type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meGetAssignedRecords: async (page?: number, perPage?: number, type?: MeGetAssignedRecordsTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/assigned`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of pending tasks currently assigned to the authenticated user.
         * @summary Get pending tasks assigned to current user
         * @param {number} [page] Page number for pagination
         * @param {number} [perPage] Number of tasks per page
         * @param {string} [dueDateStart] Filter tasks due on or after this date
         * @param {string} [dueDateEnd] Filter tasks due on or before this date
         * @param {MeGetPendingTasksPriorityEnum} [priority] Filter tasks by priority level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meGetPendingTasks: async (page?: number, perPage?: number, dueDateStart?: string, dueDateEnd?: string, priority?: MeGetPendingTasksPriorityEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (dueDateStart !== undefined) {
                localVarQueryParameter['due_date_start'] = (dueDateStart as any instanceof Date) ?
                    (dueDateStart as any).toISOString().substring(0,10) :
                    dueDateStart;
            }

            if (dueDateEnd !== undefined) {
                localVarQueryParameter['due_date_end'] = (dueDateEnd as any instanceof Date) ?
                    (dueDateEnd as any).toISOString().substring(0,10) :
                    dueDateEnd;
            }

            if (priority !== undefined) {
                localVarQueryParameter['priority'] = priority;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves profile information for the currently authenticated user.
         * @summary Get current user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meGetProfile: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeApi - functional programming interface
 * @export
 */
export const MeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a list of records currently assigned to the authenticated user.
         * @summary Get records assigned to current user
         * @param {number} [page] Page number for pagination
         * @param {number} [perPage] Number of records per page
         * @param {MeGetAssignedRecordsTypeEnum} [type] Filter records by type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meGetAssignedRecords(page?: number, perPage?: number, type?: MeGetAssignedRecordsTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeAssignedRecordsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meGetAssignedRecords(page, perPage, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeApi.meGetAssignedRecords']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of pending tasks currently assigned to the authenticated user.
         * @summary Get pending tasks assigned to current user
         * @param {number} [page] Page number for pagination
         * @param {number} [perPage] Number of tasks per page
         * @param {string} [dueDateStart] Filter tasks due on or after this date
         * @param {string} [dueDateEnd] Filter tasks due on or before this date
         * @param {MeGetPendingTasksPriorityEnum} [priority] Filter tasks by priority level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meGetPendingTasks(page?: number, perPage?: number, dueDateStart?: string, dueDateEnd?: string, priority?: MeGetPendingTasksPriorityEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MePendingTasksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meGetPendingTasks(page, perPage, dueDateStart, dueDateEnd, priority, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeApi.meGetPendingTasks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves profile information for the currently authenticated user.
         * @summary Get current user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meGetProfile(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeProfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meGetProfile(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeApi.meGetProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MeApi - factory interface
 * @export
 */
export const MeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeApiFp(configuration)
    return {
        /**
         * Retrieves a list of records currently assigned to the authenticated user.
         * @summary Get records assigned to current user
         * @param {MeApiMeGetAssignedRecordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meGetAssignedRecords(requestParameters: MeApiMeGetAssignedRecordsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<MeAssignedRecordsResponse> {
            return localVarFp.meGetAssignedRecords(requestParameters.page, requestParameters.perPage, requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of pending tasks currently assigned to the authenticated user.
         * @summary Get pending tasks assigned to current user
         * @param {MeApiMeGetPendingTasksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meGetPendingTasks(requestParameters: MeApiMeGetPendingTasksRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<MePendingTasksResponse> {
            return localVarFp.meGetPendingTasks(requestParameters.page, requestParameters.perPage, requestParameters.dueDateStart, requestParameters.dueDateEnd, requestParameters.priority, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves profile information for the currently authenticated user.
         * @summary Get current user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meGetProfile(options?: RawAxiosRequestConfig): AxiosPromise<MeProfileResponse> {
            return localVarFp.meGetProfile(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MeApi - interface
 * @export
 * @interface MeApi
 */
export interface MeApiInterface {
    /**
     * Retrieves a list of records currently assigned to the authenticated user.
     * @summary Get records assigned to current user
     * @param {MeApiMeGetAssignedRecordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApiInterface
     */
    meGetAssignedRecords(requestParameters?: MeApiMeGetAssignedRecordsRequest, options?: RawAxiosRequestConfig): AxiosPromise<MeAssignedRecordsResponse>;

    /**
     * Retrieves a list of pending tasks currently assigned to the authenticated user.
     * @summary Get pending tasks assigned to current user
     * @param {MeApiMeGetPendingTasksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApiInterface
     */
    meGetPendingTasks(requestParameters?: MeApiMeGetPendingTasksRequest, options?: RawAxiosRequestConfig): AxiosPromise<MePendingTasksResponse>;

    /**
     * Retrieves profile information for the currently authenticated user.
     * @summary Get current user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApiInterface
     */
    meGetProfile(options?: RawAxiosRequestConfig): AxiosPromise<MeProfileResponse>;

}

/**
 * Request parameters for meGetAssignedRecords operation in MeApi.
 * @export
 * @interface MeApiMeGetAssignedRecordsRequest
 */
export interface MeApiMeGetAssignedRecordsRequest {
    /**
     * Page number for pagination
     * @type {number}
     * @memberof MeApiMeGetAssignedRecords
     */
    readonly page?: number

    /**
     * Number of records per page
     * @type {number}
     * @memberof MeApiMeGetAssignedRecords
     */
    readonly perPage?: number

    /**
     * Filter records by type
     * @type {'feature' | 'epic' | 'requirement' | 'idea' | 'initiative' | 'goal' | 'release' | 'todo'}
     * @memberof MeApiMeGetAssignedRecords
     */
    readonly type?: MeGetAssignedRecordsTypeEnum
}

/**
 * Request parameters for meGetPendingTasks operation in MeApi.
 * @export
 * @interface MeApiMeGetPendingTasksRequest
 */
export interface MeApiMeGetPendingTasksRequest {
    /**
     * Page number for pagination
     * @type {number}
     * @memberof MeApiMeGetPendingTasks
     */
    readonly page?: number

    /**
     * Number of tasks per page
     * @type {number}
     * @memberof MeApiMeGetPendingTasks
     */
    readonly perPage?: number

    /**
     * Filter tasks due on or after this date
     * @type {string}
     * @memberof MeApiMeGetPendingTasks
     */
    readonly dueDateStart?: string

    /**
     * Filter tasks due on or before this date
     * @type {string}
     * @memberof MeApiMeGetPendingTasks
     */
    readonly dueDateEnd?: string

    /**
     * Filter tasks by priority level
     * @type {'low' | 'medium' | 'high' | 'urgent'}
     * @memberof MeApiMeGetPendingTasks
     */
    readonly priority?: MeGetPendingTasksPriorityEnum
}

/**
 * MeApi - object-oriented interface
 * @export
 * @class MeApi
 * @extends {BaseAPI}
 */
export class MeApi extends BaseAPI implements MeApiInterface {
    /**
     * Retrieves a list of records currently assigned to the authenticated user.
     * @summary Get records assigned to current user
     * @param {MeApiMeGetAssignedRecordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    public meGetAssignedRecords(requestParameters: MeApiMeGetAssignedRecordsRequest = {}, options?: RawAxiosRequestConfig) {
        return MeApiFp(this.configuration).meGetAssignedRecords(requestParameters.page, requestParameters.perPage, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of pending tasks currently assigned to the authenticated user.
     * @summary Get pending tasks assigned to current user
     * @param {MeApiMeGetPendingTasksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    public meGetPendingTasks(requestParameters: MeApiMeGetPendingTasksRequest = {}, options?: RawAxiosRequestConfig) {
        return MeApiFp(this.configuration).meGetPendingTasks(requestParameters.page, requestParameters.perPage, requestParameters.dueDateStart, requestParameters.dueDateEnd, requestParameters.priority, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves profile information for the currently authenticated user.
     * @summary Get current user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    public meGetProfile(options?: RawAxiosRequestConfig) {
        return MeApiFp(this.configuration).meGetProfile(options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const MeGetAssignedRecordsTypeEnum = {
    FEATURE: 'feature',
    EPIC: 'epic',
    REQUIREMENT: 'requirement',
    IDEA: 'idea',
    INITIATIVE: 'initiative',
    GOAL: 'goal',
    RELEASE: 'release',
    TODO: 'todo'
} as const;
export type MeGetAssignedRecordsTypeEnum = typeof MeGetAssignedRecordsTypeEnum[keyof typeof MeGetAssignedRecordsTypeEnum];
/**
 * @export
 */
export const MeGetPendingTasksPriorityEnum = {
    LOW: 'low',
    MEDIUM: 'medium',
    HIGH: 'high',
    URGENT: 'urgent'
} as const;
export type MeGetPendingTasksPriorityEnum = typeof MeGetPendingTasksPriorityEnum[keyof typeof MeGetPendingTasksPriorityEnum];
