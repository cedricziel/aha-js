/* tslint:disable */
/* eslint-disable */
/**
 * Aha! REST API
 * API for interacting with Aha! product management platform.  ## Rate Limiting The API enforces rate limits to ensure fair usage: - **300 requests per minute** per account - **20 requests per second** per account  When rate limits are exceeded, the API returns a `429 Too Many Requests` response with a `retry_after` header indicating when to retry.  ## Authentication The API supports two authentication methods: - **OAuth 2.0**: For web applications and integrations requiring user consent - **API Tokens**: For server-to-server integrations and personal access  ## Request Headers - **User-Agent**: Required header to identify the client application - **Content-Type**: Set to `application/json` for POST/PUT requests - **Authorization**: Bearer token or OAuth access token  ## Response Format All responses are in JSON format. List endpoints include pagination metadata in the `meta.pagination` object.  ## Error Handling The API uses standard HTTP status codes and includes detailed error messages in the response body for debugging. 
 *
 * The version of the OpenAPI document: 1.0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { StrategicModelCreateRequest } from '../model';
// @ts-ignore
import type { StrategicModelGetResponse } from '../model';
// @ts-ignore
import type { StrategicModelUpdateRequest } from '../model';
// @ts-ignore
import type { StrategicModelsListResponse } from '../model';
/**
 * StrategicModelsApi - axios parameter creator
 */
export const StrategicModelsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new strategic model in the account.
         * @summary Create a strategic model
         * @param {StrategicModelCreateRequest} strategicModelCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategicModelsCreate: async (strategicModelCreateRequest: StrategicModelCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'strategicModelCreateRequest' is not null or undefined
            assertParamExists('strategicModelsCreate', 'strategicModelCreateRequest', strategicModelCreateRequest)
            const localVarPath = `/strategic_models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(strategicModelCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a specific strategic model by its ID.
         * @summary Delete a strategic model
         * @param {string} id Numeric ID of the strategic model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategicModelsDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('strategicModelsDelete', 'id', id)
            const localVarPath = `/strategic_models/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a specific strategic model by its ID.
         * @summary Get a strategic model
         * @param {string} id Numeric ID of the strategic model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategicModelsGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('strategicModelsGet', 'id', id)
            const localVarPath = `/strategic_models/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all strategic models in the account.
         * @summary List strategic models
         * @param {string} [q] Search term to match against strategic model name.
         * @param {StrategicModelsListTypeEnum} [type] Filter by strategic model type.
         * @param {string} [updatedSince] UTC timestamp (in ISO8601 format). If provided, only strategic models updated after the timestamp will be returned.
         * @param {number} [page] Page number for pagination.
         * @param {number} [perPage] Number of strategic models per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategicModelsList: async (q?: string, type?: StrategicModelsListTypeEnum, updatedSince?: string, page?: number, perPage?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/strategic_models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (updatedSince !== undefined) {
                localVarQueryParameter['updated_since'] = (updatedSince as any instanceof Date) ?
                    (updatedSince as any).toISOString() :
                    updatedSince;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a specific strategic model by its ID.
         * @summary Update a strategic model
         * @param {string} id Numeric ID of the strategic model
         * @param {StrategicModelUpdateRequest} strategicModelUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategicModelsUpdate: async (id: string, strategicModelUpdateRequest: StrategicModelUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('strategicModelsUpdate', 'id', id)
            // verify required parameter 'strategicModelUpdateRequest' is not null or undefined
            assertParamExists('strategicModelsUpdate', 'strategicModelUpdateRequest', strategicModelUpdateRequest)
            const localVarPath = `/strategic_models/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(strategicModelUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StrategicModelsApi - functional programming interface
 */
export const StrategicModelsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StrategicModelsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new strategic model in the account.
         * @summary Create a strategic model
         * @param {StrategicModelCreateRequest} strategicModelCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async strategicModelsCreate(strategicModelCreateRequest: StrategicModelCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StrategicModelGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.strategicModelsCreate(strategicModelCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StrategicModelsApi.strategicModelsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes a specific strategic model by its ID.
         * @summary Delete a strategic model
         * @param {string} id Numeric ID of the strategic model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async strategicModelsDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.strategicModelsDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StrategicModelsApi.strategicModelsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a specific strategic model by its ID.
         * @summary Get a strategic model
         * @param {string} id Numeric ID of the strategic model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async strategicModelsGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StrategicModelGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.strategicModelsGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StrategicModelsApi.strategicModelsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of all strategic models in the account.
         * @summary List strategic models
         * @param {string} [q] Search term to match against strategic model name.
         * @param {StrategicModelsListTypeEnum} [type] Filter by strategic model type.
         * @param {string} [updatedSince] UTC timestamp (in ISO8601 format). If provided, only strategic models updated after the timestamp will be returned.
         * @param {number} [page] Page number for pagination.
         * @param {number} [perPage] Number of strategic models per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async strategicModelsList(q?: string, type?: StrategicModelsListTypeEnum, updatedSince?: string, page?: number, perPage?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StrategicModelsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.strategicModelsList(q, type, updatedSince, page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StrategicModelsApi.strategicModelsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates a specific strategic model by its ID.
         * @summary Update a strategic model
         * @param {string} id Numeric ID of the strategic model
         * @param {StrategicModelUpdateRequest} strategicModelUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async strategicModelsUpdate(id: string, strategicModelUpdateRequest: StrategicModelUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StrategicModelGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.strategicModelsUpdate(id, strategicModelUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StrategicModelsApi.strategicModelsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StrategicModelsApi - factory interface
 */
export const StrategicModelsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StrategicModelsApiFp(configuration)
    return {
        /**
         * Creates a new strategic model in the account.
         * @summary Create a strategic model
         * @param {StrategicModelsApiStrategicModelsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategicModelsCreate(requestParameters: StrategicModelsApiStrategicModelsCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<StrategicModelGetResponse> {
            return localVarFp.strategicModelsCreate(requestParameters.strategicModelCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a specific strategic model by its ID.
         * @summary Delete a strategic model
         * @param {StrategicModelsApiStrategicModelsDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategicModelsDelete(requestParameters: StrategicModelsApiStrategicModelsDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.strategicModelsDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a specific strategic model by its ID.
         * @summary Get a strategic model
         * @param {StrategicModelsApiStrategicModelsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategicModelsGet(requestParameters: StrategicModelsApiStrategicModelsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<StrategicModelGetResponse> {
            return localVarFp.strategicModelsGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all strategic models in the account.
         * @summary List strategic models
         * @param {StrategicModelsApiStrategicModelsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategicModelsList(requestParameters: StrategicModelsApiStrategicModelsListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<StrategicModelsListResponse> {
            return localVarFp.strategicModelsList(requestParameters.q, requestParameters.type, requestParameters.updatedSince, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a specific strategic model by its ID.
         * @summary Update a strategic model
         * @param {StrategicModelsApiStrategicModelsUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategicModelsUpdate(requestParameters: StrategicModelsApiStrategicModelsUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<StrategicModelGetResponse> {
            return localVarFp.strategicModelsUpdate(requestParameters.id, requestParameters.strategicModelUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StrategicModelsApi - interface
 */
export interface StrategicModelsApiInterface {
    /**
     * Creates a new strategic model in the account.
     * @summary Create a strategic model
     * @param {StrategicModelsApiStrategicModelsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    strategicModelsCreate(requestParameters: StrategicModelsApiStrategicModelsCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<StrategicModelGetResponse>;

    /**
     * Deletes a specific strategic model by its ID.
     * @summary Delete a strategic model
     * @param {StrategicModelsApiStrategicModelsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    strategicModelsDelete(requestParameters: StrategicModelsApiStrategicModelsDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Retrieves a specific strategic model by its ID.
     * @summary Get a strategic model
     * @param {StrategicModelsApiStrategicModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    strategicModelsGet(requestParameters: StrategicModelsApiStrategicModelsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<StrategicModelGetResponse>;

    /**
     * Retrieves a list of all strategic models in the account.
     * @summary List strategic models
     * @param {StrategicModelsApiStrategicModelsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    strategicModelsList(requestParameters?: StrategicModelsApiStrategicModelsListRequest, options?: RawAxiosRequestConfig): AxiosPromise<StrategicModelsListResponse>;

    /**
     * Updates a specific strategic model by its ID.
     * @summary Update a strategic model
     * @param {StrategicModelsApiStrategicModelsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    strategicModelsUpdate(requestParameters: StrategicModelsApiStrategicModelsUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<StrategicModelGetResponse>;

}

/**
 * Request parameters for strategicModelsCreate operation in StrategicModelsApi.
 */
export interface StrategicModelsApiStrategicModelsCreateRequest {
    readonly strategicModelCreateRequest: StrategicModelCreateRequest
}

/**
 * Request parameters for strategicModelsDelete operation in StrategicModelsApi.
 */
export interface StrategicModelsApiStrategicModelsDeleteRequest {
    /**
     * Numeric ID of the strategic model
     */
    readonly id: string
}

/**
 * Request parameters for strategicModelsGet operation in StrategicModelsApi.
 */
export interface StrategicModelsApiStrategicModelsGetRequest {
    /**
     * Numeric ID of the strategic model
     */
    readonly id: string
}

/**
 * Request parameters for strategicModelsList operation in StrategicModelsApi.
 */
export interface StrategicModelsApiStrategicModelsListRequest {
    /**
     * Search term to match against strategic model name.
     */
    readonly q?: string

    /**
     * Filter by strategic model type.
     */
    readonly type?: StrategicModelsListTypeEnum

    /**
     * UTC timestamp (in ISO8601 format). If provided, only strategic models updated after the timestamp will be returned.
     */
    readonly updatedSince?: string

    /**
     * Page number for pagination.
     */
    readonly page?: number

    /**
     * Number of strategic models per page.
     */
    readonly perPage?: number
}

/**
 * Request parameters for strategicModelsUpdate operation in StrategicModelsApi.
 */
export interface StrategicModelsApiStrategicModelsUpdateRequest {
    /**
     * Numeric ID of the strategic model
     */
    readonly id: string

    readonly strategicModelUpdateRequest: StrategicModelUpdateRequest
}

/**
 * StrategicModelsApi - object-oriented interface
 */
export class StrategicModelsApi extends BaseAPI implements StrategicModelsApiInterface {
    /**
     * Creates a new strategic model in the account.
     * @summary Create a strategic model
     * @param {StrategicModelsApiStrategicModelsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public strategicModelsCreate(requestParameters: StrategicModelsApiStrategicModelsCreateRequest, options?: RawAxiosRequestConfig) {
        return StrategicModelsApiFp(this.configuration).strategicModelsCreate(requestParameters.strategicModelCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a specific strategic model by its ID.
     * @summary Delete a strategic model
     * @param {StrategicModelsApiStrategicModelsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public strategicModelsDelete(requestParameters: StrategicModelsApiStrategicModelsDeleteRequest, options?: RawAxiosRequestConfig) {
        return StrategicModelsApiFp(this.configuration).strategicModelsDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a specific strategic model by its ID.
     * @summary Get a strategic model
     * @param {StrategicModelsApiStrategicModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public strategicModelsGet(requestParameters: StrategicModelsApiStrategicModelsGetRequest, options?: RawAxiosRequestConfig) {
        return StrategicModelsApiFp(this.configuration).strategicModelsGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of all strategic models in the account.
     * @summary List strategic models
     * @param {StrategicModelsApiStrategicModelsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public strategicModelsList(requestParameters: StrategicModelsApiStrategicModelsListRequest = {}, options?: RawAxiosRequestConfig) {
        return StrategicModelsApiFp(this.configuration).strategicModelsList(requestParameters.q, requestParameters.type, requestParameters.updatedSince, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a specific strategic model by its ID.
     * @summary Update a strategic model
     * @param {StrategicModelsApiStrategicModelsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public strategicModelsUpdate(requestParameters: StrategicModelsApiStrategicModelsUpdateRequest, options?: RawAxiosRequestConfig) {
        return StrategicModelsApiFp(this.configuration).strategicModelsUpdate(requestParameters.id, requestParameters.strategicModelUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

export const StrategicModelsListTypeEnum = {
    SWOT: 'swot',
    PORTER_FIVE_FORCES: 'porter_five_forces',
    ANSOFF_MATRIX: 'ansoff_matrix',
    VALUE_PROPOSITION_CANVAS: 'value_proposition_canvas',
    BUSINESS_MODEL_CANVAS: 'business_model_canvas',
    LEAN_CANVAS: 'lean_canvas',
    CUSTOM: 'custom'
} as const;
export type StrategicModelsListTypeEnum = typeof StrategicModelsListTypeEnum[keyof typeof StrategicModelsListTypeEnum];
