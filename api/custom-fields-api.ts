/* tslint:disable */
/* eslint-disable */
/**
 * Aha! REST API
 * API for interacting with Aha! product management platform.  ## Rate Limiting The API enforces rate limits to ensure fair usage: - **300 requests per minute** per account - **20 requests per second** per account  When rate limits are exceeded, the API returns a `429 Too Many Requests` response with a `retry_after` header indicating when to retry.  ## Authentication The API supports two authentication methods: - **OAuth 2.0**: For web applications and integrations requiring user consent - **API Tokens**: For server-to-server integrations and personal access  ## Request Headers - **User-Agent**: Required header to identify the client application - **Content-Type**: Set to `application/json` for POST/PUT requests - **Authorization**: Bearer token or OAuth access token  ## Response Format All responses are in JSON format. List endpoints include pagination metadata in the `meta.pagination` object.  ## Error Handling The API uses standard HTTP status codes and includes detailed error messages in the response body for debugging. 
 *
 * The version of the OpenAPI document: 1.0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CustomFieldOptionCreateRequest } from '../model';
// @ts-ignore
import type { CustomFieldsCreateOption201Response } from '../model';
// @ts-ignore
import type { CustomFieldsListAll200Response } from '../model';
// @ts-ignore
import type { CustomFieldsListOptions200Response } from '../model';
/**
 * CustomFieldsApi - axios parameter creator
 */
export const CustomFieldsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new option for a custom field.
         * @summary Create a custom field option
         * @param {string} customFieldDefinitionId Numeric ID of the custom field
         * @param {CustomFieldOptionCreateRequest} customFieldOptionCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customFieldsCreateOption: async (customFieldDefinitionId: string, customFieldOptionCreateRequest: CustomFieldOptionCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customFieldDefinitionId' is not null or undefined
            assertParamExists('customFieldsCreateOption', 'customFieldDefinitionId', customFieldDefinitionId)
            // verify required parameter 'customFieldOptionCreateRequest' is not null or undefined
            assertParamExists('customFieldsCreateOption', 'customFieldOptionCreateRequest', customFieldOptionCreateRequest)
            const localVarPath = `/custom_field_definitions/{custom_field_definition_id}/options`
                .replace(`{${"custom_field_definition_id"}}`, encodeURIComponent(String(customFieldDefinitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customFieldOptionCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all custom field definitions.
         * @summary List all custom fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customFieldsListAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/custom_field_definitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of options for a specific custom field.  This is useful for custom fields that include options, such as tags and choice lists. 
         * @summary List options for a custom field
         * @param {string} customFieldDefinitionId Numeric ID of the custom field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customFieldsListOptions: async (customFieldDefinitionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customFieldDefinitionId' is not null or undefined
            assertParamExists('customFieldsListOptions', 'customFieldDefinitionId', customFieldDefinitionId)
            const localVarPath = `/custom_field_definitions/{custom_field_definition_id}/options`
                .replace(`{${"custom_field_definition_id"}}`, encodeURIComponent(String(customFieldDefinitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomFieldsApi - functional programming interface
 */
export const CustomFieldsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomFieldsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new option for a custom field.
         * @summary Create a custom field option
         * @param {string} customFieldDefinitionId Numeric ID of the custom field
         * @param {CustomFieldOptionCreateRequest} customFieldOptionCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customFieldsCreateOption(customFieldDefinitionId: string, customFieldOptionCreateRequest: CustomFieldOptionCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsCreateOption201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customFieldsCreateOption(customFieldDefinitionId, customFieldOptionCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomFieldsApi.customFieldsCreateOption']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of all custom field definitions.
         * @summary List all custom fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customFieldsListAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsListAll200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customFieldsListAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomFieldsApi.customFieldsListAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of options for a specific custom field.  This is useful for custom fields that include options, such as tags and choice lists. 
         * @summary List options for a custom field
         * @param {string} customFieldDefinitionId Numeric ID of the custom field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customFieldsListOptions(customFieldDefinitionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsListOptions200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customFieldsListOptions(customFieldDefinitionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomFieldsApi.customFieldsListOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomFieldsApi - factory interface
 */
export const CustomFieldsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomFieldsApiFp(configuration)
    return {
        /**
         * Creates a new option for a custom field.
         * @summary Create a custom field option
         * @param {CustomFieldsApiCustomFieldsCreateOptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customFieldsCreateOption(requestParameters: CustomFieldsApiCustomFieldsCreateOptionRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomFieldsCreateOption201Response> {
            return localVarFp.customFieldsCreateOption(requestParameters.customFieldDefinitionId, requestParameters.customFieldOptionCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all custom field definitions.
         * @summary List all custom fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customFieldsListAll(options?: RawAxiosRequestConfig): AxiosPromise<CustomFieldsListAll200Response> {
            return localVarFp.customFieldsListAll(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of options for a specific custom field.  This is useful for custom fields that include options, such as tags and choice lists. 
         * @summary List options for a custom field
         * @param {CustomFieldsApiCustomFieldsListOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customFieldsListOptions(requestParameters: CustomFieldsApiCustomFieldsListOptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomFieldsListOptions200Response> {
            return localVarFp.customFieldsListOptions(requestParameters.customFieldDefinitionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomFieldsApi - interface
 */
export interface CustomFieldsApiInterface {
    /**
     * Creates a new option for a custom field.
     * @summary Create a custom field option
     * @param {CustomFieldsApiCustomFieldsCreateOptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customFieldsCreateOption(requestParameters: CustomFieldsApiCustomFieldsCreateOptionRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomFieldsCreateOption201Response>;

    /**
     * Retrieves a list of all custom field definitions.
     * @summary List all custom fields
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customFieldsListAll(options?: RawAxiosRequestConfig): AxiosPromise<CustomFieldsListAll200Response>;

    /**
     * Retrieves a list of options for a specific custom field.  This is useful for custom fields that include options, such as tags and choice lists. 
     * @summary List options for a custom field
     * @param {CustomFieldsApiCustomFieldsListOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customFieldsListOptions(requestParameters: CustomFieldsApiCustomFieldsListOptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomFieldsListOptions200Response>;

}

/**
 * Request parameters for customFieldsCreateOption operation in CustomFieldsApi.
 */
export interface CustomFieldsApiCustomFieldsCreateOptionRequest {
    /**
     * Numeric ID of the custom field
     */
    readonly customFieldDefinitionId: string

    readonly customFieldOptionCreateRequest: CustomFieldOptionCreateRequest
}

/**
 * Request parameters for customFieldsListOptions operation in CustomFieldsApi.
 */
export interface CustomFieldsApiCustomFieldsListOptionsRequest {
    /**
     * Numeric ID of the custom field
     */
    readonly customFieldDefinitionId: string
}

/**
 * CustomFieldsApi - object-oriented interface
 */
export class CustomFieldsApi extends BaseAPI implements CustomFieldsApiInterface {
    /**
     * Creates a new option for a custom field.
     * @summary Create a custom field option
     * @param {CustomFieldsApiCustomFieldsCreateOptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public customFieldsCreateOption(requestParameters: CustomFieldsApiCustomFieldsCreateOptionRequest, options?: RawAxiosRequestConfig) {
        return CustomFieldsApiFp(this.configuration).customFieldsCreateOption(requestParameters.customFieldDefinitionId, requestParameters.customFieldOptionCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of all custom field definitions.
     * @summary List all custom fields
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public customFieldsListAll(options?: RawAxiosRequestConfig) {
        return CustomFieldsApiFp(this.configuration).customFieldsListAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of options for a specific custom field.  This is useful for custom fields that include options, such as tags and choice lists. 
     * @summary List options for a custom field
     * @param {CustomFieldsApiCustomFieldsListOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public customFieldsListOptions(requestParameters: CustomFieldsApiCustomFieldsListOptionsRequest, options?: RawAxiosRequestConfig) {
        return CustomFieldsApiFp(this.configuration).customFieldsListOptions(requestParameters.customFieldDefinitionId, options).then((request) => request(this.axios, this.basePath));
    }
}

