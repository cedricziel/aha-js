/* tslint:disable */
/* eslint-disable */
/**
 * Aha! REST API
 * API for interacting with Aha! product management platform.
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { IdeaEndorsementRequest } from '../model';
// @ts-ignore
import type { IdeasCreateEndorsement201Response } from '../model';
// @ts-ignore
import type { IdeasGetEndorsements200Response } from '../model';
/**
 * IdeaVotesApi - axios parameter creator
 * @export
 */
export const IdeaVotesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an endorsement (proxy vote) on an idea on behalf of another user.
         * @summary Create an endorsement (proxy vote)
         * @param {string} id Numeric ID or key of the idea
         * @param {IdeaEndorsementRequest} ideaEndorsementRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ideasCreateEndorsement: async (id: string, ideaEndorsementRequest: IdeaEndorsementRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ideasCreateEndorsement', 'id', id)
            // verify required parameter 'ideaEndorsementRequest' is not null or undefined
            assertParamExists('ideasCreateEndorsement', 'ideaEndorsementRequest', ideaEndorsementRequest)
            const localVarPath = `/ideas/{id}/endorsements`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ideaEndorsementRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all endorsements for a specific idea.
         * @summary Get endorsements for an idea
         * @param {string} id Numeric ID or key of the idea
         * @param {boolean} [proxy] If set to true, only returns proxy votes (votes with an associated organization)
         * @param {number} [page] Page number for pagination
         * @param {number} [perPage] Number of endorsements per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ideasGetEndorsements: async (id: string, proxy?: boolean, page?: number, perPage?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ideasGetEndorsements', 'id', id)
            const localVarPath = `/ideas/{id}/endorsements`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (proxy !== undefined) {
                localVarQueryParameter['proxy'] = proxy;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdeaVotesApi - functional programming interface
 * @export
 */
export const IdeaVotesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdeaVotesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates an endorsement (proxy vote) on an idea on behalf of another user.
         * @summary Create an endorsement (proxy vote)
         * @param {string} id Numeric ID or key of the idea
         * @param {IdeaEndorsementRequest} ideaEndorsementRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ideasCreateEndorsement(id: string, ideaEndorsementRequest: IdeaEndorsementRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdeasCreateEndorsement201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ideasCreateEndorsement(id, ideaEndorsementRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdeaVotesApi.ideasCreateEndorsement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves all endorsements for a specific idea.
         * @summary Get endorsements for an idea
         * @param {string} id Numeric ID or key of the idea
         * @param {boolean} [proxy] If set to true, only returns proxy votes (votes with an associated organization)
         * @param {number} [page] Page number for pagination
         * @param {number} [perPage] Number of endorsements per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ideasGetEndorsements(id: string, proxy?: boolean, page?: number, perPage?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdeasGetEndorsements200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ideasGetEndorsements(id, proxy, page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdeaVotesApi.ideasGetEndorsements']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IdeaVotesApi - factory interface
 * @export
 */
export const IdeaVotesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdeaVotesApiFp(configuration)
    return {
        /**
         * Creates an endorsement (proxy vote) on an idea on behalf of another user.
         * @summary Create an endorsement (proxy vote)
         * @param {IdeaVotesApiIdeasCreateEndorsementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ideasCreateEndorsement(requestParameters: IdeaVotesApiIdeasCreateEndorsementRequest, options?: RawAxiosRequestConfig): AxiosPromise<IdeasCreateEndorsement201Response> {
            return localVarFp.ideasCreateEndorsement(requestParameters.id, requestParameters.ideaEndorsementRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all endorsements for a specific idea.
         * @summary Get endorsements for an idea
         * @param {IdeaVotesApiIdeasGetEndorsementsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ideasGetEndorsements(requestParameters: IdeaVotesApiIdeasGetEndorsementsRequest, options?: RawAxiosRequestConfig): AxiosPromise<IdeasGetEndorsements200Response> {
            return localVarFp.ideasGetEndorsements(requestParameters.id, requestParameters.proxy, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IdeaVotesApi - interface
 * @export
 * @interface IdeaVotesApi
 */
export interface IdeaVotesApiInterface {
    /**
     * Creates an endorsement (proxy vote) on an idea on behalf of another user.
     * @summary Create an endorsement (proxy vote)
     * @param {IdeaVotesApiIdeasCreateEndorsementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaVotesApiInterface
     */
    ideasCreateEndorsement(requestParameters: IdeaVotesApiIdeasCreateEndorsementRequest, options?: RawAxiosRequestConfig): AxiosPromise<IdeasCreateEndorsement201Response>;

    /**
     * Retrieves all endorsements for a specific idea.
     * @summary Get endorsements for an idea
     * @param {IdeaVotesApiIdeasGetEndorsementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaVotesApiInterface
     */
    ideasGetEndorsements(requestParameters: IdeaVotesApiIdeasGetEndorsementsRequest, options?: RawAxiosRequestConfig): AxiosPromise<IdeasGetEndorsements200Response>;

}

/**
 * Request parameters for ideasCreateEndorsement operation in IdeaVotesApi.
 * @export
 * @interface IdeaVotesApiIdeasCreateEndorsementRequest
 */
export interface IdeaVotesApiIdeasCreateEndorsementRequest {
    /**
     * Numeric ID or key of the idea
     * @type {string}
     * @memberof IdeaVotesApiIdeasCreateEndorsement
     */
    readonly id: string

    /**
     * 
     * @type {IdeaEndorsementRequest}
     * @memberof IdeaVotesApiIdeasCreateEndorsement
     */
    readonly ideaEndorsementRequest: IdeaEndorsementRequest
}

/**
 * Request parameters for ideasGetEndorsements operation in IdeaVotesApi.
 * @export
 * @interface IdeaVotesApiIdeasGetEndorsementsRequest
 */
export interface IdeaVotesApiIdeasGetEndorsementsRequest {
    /**
     * Numeric ID or key of the idea
     * @type {string}
     * @memberof IdeaVotesApiIdeasGetEndorsements
     */
    readonly id: string

    /**
     * If set to true, only returns proxy votes (votes with an associated organization)
     * @type {boolean}
     * @memberof IdeaVotesApiIdeasGetEndorsements
     */
    readonly proxy?: boolean

    /**
     * Page number for pagination
     * @type {number}
     * @memberof IdeaVotesApiIdeasGetEndorsements
     */
    readonly page?: number

    /**
     * Number of endorsements per page
     * @type {number}
     * @memberof IdeaVotesApiIdeasGetEndorsements
     */
    readonly perPage?: number
}

/**
 * IdeaVotesApi - object-oriented interface
 * @export
 * @class IdeaVotesApi
 * @extends {BaseAPI}
 */
export class IdeaVotesApi extends BaseAPI implements IdeaVotesApiInterface {
    /**
     * Creates an endorsement (proxy vote) on an idea on behalf of another user.
     * @summary Create an endorsement (proxy vote)
     * @param {IdeaVotesApiIdeasCreateEndorsementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaVotesApi
     */
    public ideasCreateEndorsement(requestParameters: IdeaVotesApiIdeasCreateEndorsementRequest, options?: RawAxiosRequestConfig) {
        return IdeaVotesApiFp(this.configuration).ideasCreateEndorsement(requestParameters.id, requestParameters.ideaEndorsementRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all endorsements for a specific idea.
     * @summary Get endorsements for an idea
     * @param {IdeaVotesApiIdeasGetEndorsementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaVotesApi
     */
    public ideasGetEndorsements(requestParameters: IdeaVotesApiIdeasGetEndorsementsRequest, options?: RawAxiosRequestConfig) {
        return IdeaVotesApiFp(this.configuration).ideasGetEndorsements(requestParameters.id, requestParameters.proxy, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }
}

