/* tslint:disable */
/* eslint-disable */
/**
 * Aha! REST API
 * API for interacting with Aha! product management platform.
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Comment } from '../model';
// @ts-ignore
import type { CommentCreateRequest } from '../model';
// @ts-ignore
import type { CommentsGetEpic200Response } from '../model';
/**
 * RequirementsApi - axios parameter creator
 * @export
 */
export const RequirementsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new comment to the specified requirement.
         * @summary Create a comment on a requirement
         * @param {string} requirementId 
         * @param {CommentCreateRequest} commentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsCreateRequirement: async (requirementId: string, commentCreateRequest: CommentCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requirementId' is not null or undefined
            assertParamExists('commentsCreateRequirement', 'requirementId', requirementId)
            // verify required parameter 'commentCreateRequest' is not null or undefined
            assertParamExists('commentsCreateRequirement', 'commentCreateRequest', commentCreateRequest)
            const localVarPath = `/requirements/{requirement_id}/comments`
                .replace(`{${"requirement_id"}}`, encodeURIComponent(String(requirementId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commentCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of comments associated with the specified requirement.
         * @summary List comments on a requirement
         * @param {string} requirementId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGetRequirement: async (requirementId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requirementId' is not null or undefined
            assertParamExists('commentsGetRequirement', 'requirementId', requirementId)
            const localVarPath = `/requirements/{requirement_id}/comments`
                .replace(`{${"requirement_id"}}`, encodeURIComponent(String(requirementId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RequirementsApi - functional programming interface
 * @export
 */
export const RequirementsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RequirementsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new comment to the specified requirement.
         * @summary Create a comment on a requirement
         * @param {string} requirementId 
         * @param {CommentCreateRequest} commentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsCreateRequirement(requirementId: string, commentCreateRequest: CommentCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsCreateRequirement(requirementId, commentCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequirementsApi.commentsCreateRequirement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of comments associated with the specified requirement.
         * @summary List comments on a requirement
         * @param {string} requirementId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsGetRequirement(requirementId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentsGetEpic200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsGetRequirement(requirementId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequirementsApi.commentsGetRequirement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RequirementsApi - factory interface
 * @export
 */
export const RequirementsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RequirementsApiFp(configuration)
    return {
        /**
         * Adds a new comment to the specified requirement.
         * @summary Create a comment on a requirement
         * @param {RequirementsApiCommentsCreateRequirementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsCreateRequirement(requestParameters: RequirementsApiCommentsCreateRequirementRequest, options?: RawAxiosRequestConfig): AxiosPromise<Comment> {
            return localVarFp.commentsCreateRequirement(requestParameters.requirementId, requestParameters.commentCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of comments associated with the specified requirement.
         * @summary List comments on a requirement
         * @param {RequirementsApiCommentsGetRequirementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGetRequirement(requestParameters: RequirementsApiCommentsGetRequirementRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentsGetEpic200Response> {
            return localVarFp.commentsGetRequirement(requestParameters.requirementId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RequirementsApi - interface
 * @export
 * @interface RequirementsApi
 */
export interface RequirementsApiInterface {
    /**
     * Adds a new comment to the specified requirement.
     * @summary Create a comment on a requirement
     * @param {RequirementsApiCommentsCreateRequirementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequirementsApiInterface
     */
    commentsCreateRequirement(requestParameters: RequirementsApiCommentsCreateRequirementRequest, options?: RawAxiosRequestConfig): AxiosPromise<Comment>;

    /**
     * Retrieves a list of comments associated with the specified requirement.
     * @summary List comments on a requirement
     * @param {RequirementsApiCommentsGetRequirementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequirementsApiInterface
     */
    commentsGetRequirement(requestParameters: RequirementsApiCommentsGetRequirementRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentsGetEpic200Response>;

}

/**
 * Request parameters for commentsCreateRequirement operation in RequirementsApi.
 * @export
 * @interface RequirementsApiCommentsCreateRequirementRequest
 */
export interface RequirementsApiCommentsCreateRequirementRequest {
    /**
     * 
     * @type {string}
     * @memberof RequirementsApiCommentsCreateRequirement
     */
    readonly requirementId: string

    /**
     * 
     * @type {CommentCreateRequest}
     * @memberof RequirementsApiCommentsCreateRequirement
     */
    readonly commentCreateRequest: CommentCreateRequest
}

/**
 * Request parameters for commentsGetRequirement operation in RequirementsApi.
 * @export
 * @interface RequirementsApiCommentsGetRequirementRequest
 */
export interface RequirementsApiCommentsGetRequirementRequest {
    /**
     * 
     * @type {string}
     * @memberof RequirementsApiCommentsGetRequirement
     */
    readonly requirementId: string
}

/**
 * RequirementsApi - object-oriented interface
 * @export
 * @class RequirementsApi
 * @extends {BaseAPI}
 */
export class RequirementsApi extends BaseAPI implements RequirementsApiInterface {
    /**
     * Adds a new comment to the specified requirement.
     * @summary Create a comment on a requirement
     * @param {RequirementsApiCommentsCreateRequirementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequirementsApi
     */
    public commentsCreateRequirement(requestParameters: RequirementsApiCommentsCreateRequirementRequest, options?: RawAxiosRequestConfig) {
        return RequirementsApiFp(this.configuration).commentsCreateRequirement(requestParameters.requirementId, requestParameters.commentCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of comments associated with the specified requirement.
     * @summary List comments on a requirement
     * @param {RequirementsApiCommentsGetRequirementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequirementsApi
     */
    public commentsGetRequirement(requestParameters: RequirementsApiCommentsGetRequirementRequest, options?: RawAxiosRequestConfig) {
        return RequirementsApiFp(this.configuration).commentsGetRequirement(requestParameters.requirementId, options).then((request) => request(this.axios, this.basePath));
    }
}

