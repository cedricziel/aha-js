/* tslint:disable */
/* eslint-disable */
/**
 * Aha! REST API
 * API for interacting with Aha! product management platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Feature } from '../model';
// @ts-ignore
import type { FeatureCreateRequest } from '../model';
// @ts-ignore
import type { FeatureGetResponse } from '../model';
// @ts-ignore
import type { FeaturesIdCustomFieldsPutRequest } from '../model';
// @ts-ignore
import type { FeaturesIdCustomFieldsTagPutRequest } from '../model';
// @ts-ignore
import type { FeaturesIdCustomFieldsWorksheetPutRequest } from '../model';
// @ts-ignore
import type { FeaturesIdEpicPutRequest } from '../model';
// @ts-ignore
import type { FeaturesIdGoalsPutRequest } from '../model';
// @ts-ignore
import type { FeaturesIdProgressPutRequest } from '../model';
// @ts-ignore
import type { FeaturesIdPutRequest } from '../model';
// @ts-ignore
import type { FeaturesListResponse } from '../model';
/**
 * FeaturesApi - axios parameter creator
 * @export
 */
export const FeaturesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Updates the custom fields of an existing feature. 
         * @summary Update a feature\'s custom fields
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdCustomFieldsPutRequest} featuresIdCustomFieldsPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdCustomFieldsPut: async (id: string, featuresIdCustomFieldsPutRequest: FeaturesIdCustomFieldsPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('featuresIdCustomFieldsPut', 'id', id)
            // verify required parameter 'featuresIdCustomFieldsPutRequest' is not null or undefined
            assertParamExists('featuresIdCustomFieldsPut', 'featuresIdCustomFieldsPutRequest', featuresIdCustomFieldsPutRequest)
            const localVarPath = `/features/{id}/custom_fields`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featuresIdCustomFieldsPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the custom fields of an existing feature with tag-like values. 
         * @summary Update a feature\'s custom fields with tag-like value
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdCustomFieldsTagPutRequest} featuresIdCustomFieldsTagPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdCustomFieldsTagPut: async (id: string, featuresIdCustomFieldsTagPutRequest: FeaturesIdCustomFieldsTagPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('featuresIdCustomFieldsTagPut', 'id', id)
            // verify required parameter 'featuresIdCustomFieldsTagPutRequest' is not null or undefined
            assertParamExists('featuresIdCustomFieldsTagPut', 'featuresIdCustomFieldsTagPutRequest', featuresIdCustomFieldsTagPutRequest)
            const localVarPath = `/features/{id}/custom_fields/tag`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featuresIdCustomFieldsTagPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the custom worksheet fields of an existing feature. 
         * @summary Update a feature\'s custom worksheet fields
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdCustomFieldsWorksheetPutRequest} featuresIdCustomFieldsWorksheetPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdCustomFieldsWorksheetPut: async (id: string, featuresIdCustomFieldsWorksheetPutRequest: FeaturesIdCustomFieldsWorksheetPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('featuresIdCustomFieldsWorksheetPut', 'id', id)
            // verify required parameter 'featuresIdCustomFieldsWorksheetPutRequest' is not null or undefined
            assertParamExists('featuresIdCustomFieldsWorksheetPut', 'featuresIdCustomFieldsWorksheetPutRequest', featuresIdCustomFieldsWorksheetPutRequest)
            const localVarPath = `/features/{id}/custom_fields/worksheet`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featuresIdCustomFieldsWorksheetPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the specified feature.
         * @summary Delete a feature
         * @param {string} id Numeric ID or key of the feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('featuresIdDelete', 'id', id)
            const localVarPath = `/features/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the epic of an existing feature. 
         * @summary Update a feature\'s epic
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdEpicPutRequest} featuresIdEpicPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdEpicPut: async (id: string, featuresIdEpicPutRequest: FeaturesIdEpicPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('featuresIdEpicPut', 'id', id)
            // verify required parameter 'featuresIdEpicPutRequest' is not null or undefined
            assertParamExists('featuresIdEpicPut', 'featuresIdEpicPutRequest', featuresIdEpicPutRequest)
            const localVarPath = `/features/{id}/epic`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featuresIdEpicPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the details of a specific feature.
         * @summary Get a specific feature
         * @param {string} id Numeric ID or key of the feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('featuresIdGet', 'id', id)
            const localVarPath = `/features/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the goals of an existing feature. 
         * @summary Update a feature\'s goals
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdGoalsPutRequest} featuresIdGoalsPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdGoalsPut: async (id: string, featuresIdGoalsPutRequest: FeaturesIdGoalsPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('featuresIdGoalsPut', 'id', id)
            // verify required parameter 'featuresIdGoalsPutRequest' is not null or undefined
            assertParamExists('featuresIdGoalsPut', 'featuresIdGoalsPutRequest', featuresIdGoalsPutRequest)
            const localVarPath = `/features/{id}/goals`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featuresIdGoalsPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the progress of an existing feature. May only be set when the progress_source is manual. 
         * @summary Update a feature\'s progress
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdProgressPutRequest} featuresIdProgressPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdProgressPut: async (id: string, featuresIdProgressPutRequest: FeaturesIdProgressPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('featuresIdProgressPut', 'id', id)
            // verify required parameter 'featuresIdProgressPutRequest' is not null or undefined
            assertParamExists('featuresIdProgressPut', 'featuresIdProgressPutRequest', featuresIdProgressPutRequest)
            const localVarPath = `/features/{id}/progress`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featuresIdProgressPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing feature with the provided attributes. 
         * @summary Update a feature
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdPutRequest} featuresIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdPut: async (id: string, featuresIdPutRequest: FeaturesIdPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('featuresIdPut', 'id', id)
            // verify required parameter 'featuresIdPutRequest' is not null or undefined
            assertParamExists('featuresIdPut', 'featuresIdPutRequest', featuresIdPutRequest)
            const localVarPath = `/features/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featuresIdPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of features associated with a specific release. 
         * @summary List features in a release
         * @param {string} releaseId Numeric ID or key of the release
         * @param {string} [q] Search term to match against feature name
         * @param {string} [updatedSince] UTC timestamp (in ISO8601 format). If provided, only features updated after the timestamp will be returned
         * @param {string} [tag] String tag value. If provided, only features with the associated tag will be returned
         * @param {string} [assignedToUser] ID or email address of a user. If provided, only features assigned to that user will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesReleaseIdFeaturesGet: async (releaseId: string, q?: string, updatedSince?: string, tag?: string, assignedToUser?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'releaseId' is not null or undefined
            assertParamExists('releasesReleaseIdFeaturesGet', 'releaseId', releaseId)
            const localVarPath = `/releases/{release_id}/features`
                .replace(`{${"release_id"}}`, encodeURIComponent(String(releaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (updatedSince !== undefined) {
                localVarQueryParameter['updated_since'] = (updatedSince as any instanceof Date) ?
                    (updatedSince as any).toISOString() :
                    updatedSince;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (assignedToUser !== undefined) {
                localVarQueryParameter['assigned_to_user'] = assignedToUser;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new feature to a specified release. Features belong to releases. This means that if you want to create one then you must scope it to a release.
         * @summary Create a feature
         * @param {string} releaseId Numeric ID or key of the release
         * @param {FeatureCreateRequest} featureCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesReleaseIdFeaturesPost: async (releaseId: string, featureCreateRequest: FeatureCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'releaseId' is not null or undefined
            assertParamExists('releasesReleaseIdFeaturesPost', 'releaseId', releaseId)
            // verify required parameter 'featureCreateRequest' is not null or undefined
            assertParamExists('releasesReleaseIdFeaturesPost', 'featureCreateRequest', featureCreateRequest)
            const localVarPath = `/releases/{release_id}/features`
                .replace(`{${"release_id"}}`, encodeURIComponent(String(releaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featureCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeaturesApi - functional programming interface
 * @export
 */
export const FeaturesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeaturesApiAxiosParamCreator(configuration)
    return {
        /**
         * Updates the custom fields of an existing feature. 
         * @summary Update a feature\'s custom fields
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdCustomFieldsPutRequest} featuresIdCustomFieldsPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresIdCustomFieldsPut(id: string, featuresIdCustomFieldsPutRequest: FeaturesIdCustomFieldsPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresIdCustomFieldsPut(id, featuresIdCustomFieldsPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeaturesApi.featuresIdCustomFieldsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the custom fields of an existing feature with tag-like values. 
         * @summary Update a feature\'s custom fields with tag-like value
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdCustomFieldsTagPutRequest} featuresIdCustomFieldsTagPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresIdCustomFieldsTagPut(id: string, featuresIdCustomFieldsTagPutRequest: FeaturesIdCustomFieldsTagPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresIdCustomFieldsTagPut(id, featuresIdCustomFieldsTagPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeaturesApi.featuresIdCustomFieldsTagPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the custom worksheet fields of an existing feature. 
         * @summary Update a feature\'s custom worksheet fields
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdCustomFieldsWorksheetPutRequest} featuresIdCustomFieldsWorksheetPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresIdCustomFieldsWorksheetPut(id: string, featuresIdCustomFieldsWorksheetPutRequest: FeaturesIdCustomFieldsWorksheetPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresIdCustomFieldsWorksheetPut(id, featuresIdCustomFieldsWorksheetPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeaturesApi.featuresIdCustomFieldsWorksheetPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes the specified feature.
         * @summary Delete a feature
         * @param {string} id Numeric ID or key of the feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeaturesApi.featuresIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the epic of an existing feature. 
         * @summary Update a feature\'s epic
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdEpicPutRequest} featuresIdEpicPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresIdEpicPut(id: string, featuresIdEpicPutRequest: FeaturesIdEpicPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresIdEpicPut(id, featuresIdEpicPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeaturesApi.featuresIdEpicPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves the details of a specific feature.
         * @summary Get a specific feature
         * @param {string} id Numeric ID or key of the feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeaturesApi.featuresIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the goals of an existing feature. 
         * @summary Update a feature\'s goals
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdGoalsPutRequest} featuresIdGoalsPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresIdGoalsPut(id: string, featuresIdGoalsPutRequest: FeaturesIdGoalsPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresIdGoalsPut(id, featuresIdGoalsPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeaturesApi.featuresIdGoalsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the progress of an existing feature. May only be set when the progress_source is manual. 
         * @summary Update a feature\'s progress
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdProgressPutRequest} featuresIdProgressPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresIdProgressPut(id: string, featuresIdProgressPutRequest: FeaturesIdProgressPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresIdProgressPut(id, featuresIdProgressPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeaturesApi.featuresIdProgressPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates an existing feature with the provided attributes. 
         * @summary Update a feature
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdPutRequest} featuresIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresIdPut(id: string, featuresIdPutRequest: FeaturesIdPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresIdPut(id, featuresIdPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeaturesApi.featuresIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of features associated with a specific release. 
         * @summary List features in a release
         * @param {string} releaseId Numeric ID or key of the release
         * @param {string} [q] Search term to match against feature name
         * @param {string} [updatedSince] UTC timestamp (in ISO8601 format). If provided, only features updated after the timestamp will be returned
         * @param {string} [tag] String tag value. If provided, only features with the associated tag will be returned
         * @param {string} [assignedToUser] ID or email address of a user. If provided, only features assigned to that user will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async releasesReleaseIdFeaturesGet(releaseId: string, q?: string, updatedSince?: string, tag?: string, assignedToUser?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturesListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.releasesReleaseIdFeaturesGet(releaseId, q, updatedSince, tag, assignedToUser, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeaturesApi.releasesReleaseIdFeaturesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Adds a new feature to a specified release. Features belong to releases. This means that if you want to create one then you must scope it to a release.
         * @summary Create a feature
         * @param {string} releaseId Numeric ID or key of the release
         * @param {FeatureCreateRequest} featureCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async releasesReleaseIdFeaturesPost(releaseId: string, featureCreateRequest: FeatureCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.releasesReleaseIdFeaturesPost(releaseId, featureCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeaturesApi.releasesReleaseIdFeaturesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FeaturesApi - factory interface
 * @export
 */
export const FeaturesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeaturesApiFp(configuration)
    return {
        /**
         * Updates the custom fields of an existing feature. 
         * @summary Update a feature\'s custom fields
         * @param {FeaturesApiFeaturesIdCustomFieldsPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdCustomFieldsPut(requestParameters: FeaturesApiFeaturesIdCustomFieldsPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature> {
            return localVarFp.featuresIdCustomFieldsPut(requestParameters.id, requestParameters.featuresIdCustomFieldsPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the custom fields of an existing feature with tag-like values. 
         * @summary Update a feature\'s custom fields with tag-like value
         * @param {FeaturesApiFeaturesIdCustomFieldsTagPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdCustomFieldsTagPut(requestParameters: FeaturesApiFeaturesIdCustomFieldsTagPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature> {
            return localVarFp.featuresIdCustomFieldsTagPut(requestParameters.id, requestParameters.featuresIdCustomFieldsTagPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the custom worksheet fields of an existing feature. 
         * @summary Update a feature\'s custom worksheet fields
         * @param {FeaturesApiFeaturesIdCustomFieldsWorksheetPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdCustomFieldsWorksheetPut(requestParameters: FeaturesApiFeaturesIdCustomFieldsWorksheetPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature> {
            return localVarFp.featuresIdCustomFieldsWorksheetPut(requestParameters.id, requestParameters.featuresIdCustomFieldsWorksheetPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the specified feature.
         * @summary Delete a feature
         * @param {FeaturesApiFeaturesIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdDelete(requestParameters: FeaturesApiFeaturesIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.featuresIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the epic of an existing feature. 
         * @summary Update a feature\'s epic
         * @param {FeaturesApiFeaturesIdEpicPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdEpicPut(requestParameters: FeaturesApiFeaturesIdEpicPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature> {
            return localVarFp.featuresIdEpicPut(requestParameters.id, requestParameters.featuresIdEpicPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the details of a specific feature.
         * @summary Get a specific feature
         * @param {FeaturesApiFeaturesIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdGet(requestParameters: FeaturesApiFeaturesIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeatureGetResponse> {
            return localVarFp.featuresIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the goals of an existing feature. 
         * @summary Update a feature\'s goals
         * @param {FeaturesApiFeaturesIdGoalsPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdGoalsPut(requestParameters: FeaturesApiFeaturesIdGoalsPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature> {
            return localVarFp.featuresIdGoalsPut(requestParameters.id, requestParameters.featuresIdGoalsPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the progress of an existing feature. May only be set when the progress_source is manual. 
         * @summary Update a feature\'s progress
         * @param {FeaturesApiFeaturesIdProgressPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdProgressPut(requestParameters: FeaturesApiFeaturesIdProgressPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature> {
            return localVarFp.featuresIdProgressPut(requestParameters.id, requestParameters.featuresIdProgressPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing feature with the provided attributes. 
         * @summary Update a feature
         * @param {FeaturesApiFeaturesIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdPut(requestParameters: FeaturesApiFeaturesIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature> {
            return localVarFp.featuresIdPut(requestParameters.id, requestParameters.featuresIdPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of features associated with a specific release. 
         * @summary List features in a release
         * @param {FeaturesApiReleasesReleaseIdFeaturesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesReleaseIdFeaturesGet(requestParameters: FeaturesApiReleasesReleaseIdFeaturesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeaturesListResponse> {
            return localVarFp.releasesReleaseIdFeaturesGet(requestParameters.releaseId, requestParameters.q, requestParameters.updatedSince, requestParameters.tag, requestParameters.assignedToUser, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new feature to a specified release. Features belong to releases. This means that if you want to create one then you must scope it to a release.
         * @summary Create a feature
         * @param {FeaturesApiReleasesReleaseIdFeaturesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesReleaseIdFeaturesPost(requestParameters: FeaturesApiReleasesReleaseIdFeaturesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature> {
            return localVarFp.releasesReleaseIdFeaturesPost(requestParameters.releaseId, requestParameters.featureCreateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeaturesApi - interface
 * @export
 * @interface FeaturesApi
 */
export interface FeaturesApiInterface {
    /**
     * Updates the custom fields of an existing feature. 
     * @summary Update a feature\'s custom fields
     * @param {FeaturesApiFeaturesIdCustomFieldsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApiInterface
     */
    featuresIdCustomFieldsPut(requestParameters: FeaturesApiFeaturesIdCustomFieldsPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature>;

    /**
     * Updates the custom fields of an existing feature with tag-like values. 
     * @summary Update a feature\'s custom fields with tag-like value
     * @param {FeaturesApiFeaturesIdCustomFieldsTagPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApiInterface
     */
    featuresIdCustomFieldsTagPut(requestParameters: FeaturesApiFeaturesIdCustomFieldsTagPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature>;

    /**
     * Updates the custom worksheet fields of an existing feature. 
     * @summary Update a feature\'s custom worksheet fields
     * @param {FeaturesApiFeaturesIdCustomFieldsWorksheetPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApiInterface
     */
    featuresIdCustomFieldsWorksheetPut(requestParameters: FeaturesApiFeaturesIdCustomFieldsWorksheetPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature>;

    /**
     * Deletes the specified feature.
     * @summary Delete a feature
     * @param {FeaturesApiFeaturesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApiInterface
     */
    featuresIdDelete(requestParameters: FeaturesApiFeaturesIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Updates the epic of an existing feature. 
     * @summary Update a feature\'s epic
     * @param {FeaturesApiFeaturesIdEpicPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApiInterface
     */
    featuresIdEpicPut(requestParameters: FeaturesApiFeaturesIdEpicPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature>;

    /**
     * Retrieves the details of a specific feature.
     * @summary Get a specific feature
     * @param {FeaturesApiFeaturesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApiInterface
     */
    featuresIdGet(requestParameters: FeaturesApiFeaturesIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeatureGetResponse>;

    /**
     * Updates the goals of an existing feature. 
     * @summary Update a feature\'s goals
     * @param {FeaturesApiFeaturesIdGoalsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApiInterface
     */
    featuresIdGoalsPut(requestParameters: FeaturesApiFeaturesIdGoalsPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature>;

    /**
     * Updates the progress of an existing feature. May only be set when the progress_source is manual. 
     * @summary Update a feature\'s progress
     * @param {FeaturesApiFeaturesIdProgressPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApiInterface
     */
    featuresIdProgressPut(requestParameters: FeaturesApiFeaturesIdProgressPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature>;

    /**
     * Updates an existing feature with the provided attributes. 
     * @summary Update a feature
     * @param {FeaturesApiFeaturesIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApiInterface
     */
    featuresIdPut(requestParameters: FeaturesApiFeaturesIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature>;

    /**
     * Returns a list of features associated with a specific release. 
     * @summary List features in a release
     * @param {FeaturesApiReleasesReleaseIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApiInterface
     */
    releasesReleaseIdFeaturesGet(requestParameters: FeaturesApiReleasesReleaseIdFeaturesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeaturesListResponse>;

    /**
     * Adds a new feature to a specified release. Features belong to releases. This means that if you want to create one then you must scope it to a release.
     * @summary Create a feature
     * @param {FeaturesApiReleasesReleaseIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApiInterface
     */
    releasesReleaseIdFeaturesPost(requestParameters: FeaturesApiReleasesReleaseIdFeaturesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature>;

}

/**
 * Request parameters for featuresIdCustomFieldsPut operation in FeaturesApi.
 * @export
 * @interface FeaturesApiFeaturesIdCustomFieldsPutRequest
 */
export interface FeaturesApiFeaturesIdCustomFieldsPutRequest {
    /**
     * Numeric ID or key of the feature
     * @type {string}
     * @memberof FeaturesApiFeaturesIdCustomFieldsPut
     */
    readonly id: string

    /**
     * 
     * @type {FeaturesIdCustomFieldsPutRequest}
     * @memberof FeaturesApiFeaturesIdCustomFieldsPut
     */
    readonly featuresIdCustomFieldsPutRequest: FeaturesIdCustomFieldsPutRequest
}

/**
 * Request parameters for featuresIdCustomFieldsTagPut operation in FeaturesApi.
 * @export
 * @interface FeaturesApiFeaturesIdCustomFieldsTagPutRequest
 */
export interface FeaturesApiFeaturesIdCustomFieldsTagPutRequest {
    /**
     * Numeric ID or key of the feature
     * @type {string}
     * @memberof FeaturesApiFeaturesIdCustomFieldsTagPut
     */
    readonly id: string

    /**
     * 
     * @type {FeaturesIdCustomFieldsTagPutRequest}
     * @memberof FeaturesApiFeaturesIdCustomFieldsTagPut
     */
    readonly featuresIdCustomFieldsTagPutRequest: FeaturesIdCustomFieldsTagPutRequest
}

/**
 * Request parameters for featuresIdCustomFieldsWorksheetPut operation in FeaturesApi.
 * @export
 * @interface FeaturesApiFeaturesIdCustomFieldsWorksheetPutRequest
 */
export interface FeaturesApiFeaturesIdCustomFieldsWorksheetPutRequest {
    /**
     * Numeric ID or key of the feature
     * @type {string}
     * @memberof FeaturesApiFeaturesIdCustomFieldsWorksheetPut
     */
    readonly id: string

    /**
     * 
     * @type {FeaturesIdCustomFieldsWorksheetPutRequest}
     * @memberof FeaturesApiFeaturesIdCustomFieldsWorksheetPut
     */
    readonly featuresIdCustomFieldsWorksheetPutRequest: FeaturesIdCustomFieldsWorksheetPutRequest
}

/**
 * Request parameters for featuresIdDelete operation in FeaturesApi.
 * @export
 * @interface FeaturesApiFeaturesIdDeleteRequest
 */
export interface FeaturesApiFeaturesIdDeleteRequest {
    /**
     * Numeric ID or key of the feature
     * @type {string}
     * @memberof FeaturesApiFeaturesIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for featuresIdEpicPut operation in FeaturesApi.
 * @export
 * @interface FeaturesApiFeaturesIdEpicPutRequest
 */
export interface FeaturesApiFeaturesIdEpicPutRequest {
    /**
     * Numeric ID or key of the feature
     * @type {string}
     * @memberof FeaturesApiFeaturesIdEpicPut
     */
    readonly id: string

    /**
     * 
     * @type {FeaturesIdEpicPutRequest}
     * @memberof FeaturesApiFeaturesIdEpicPut
     */
    readonly featuresIdEpicPutRequest: FeaturesIdEpicPutRequest
}

/**
 * Request parameters for featuresIdGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiFeaturesIdGetRequest
 */
export interface FeaturesApiFeaturesIdGetRequest {
    /**
     * Numeric ID or key of the feature
     * @type {string}
     * @memberof FeaturesApiFeaturesIdGet
     */
    readonly id: string
}

/**
 * Request parameters for featuresIdGoalsPut operation in FeaturesApi.
 * @export
 * @interface FeaturesApiFeaturesIdGoalsPutRequest
 */
export interface FeaturesApiFeaturesIdGoalsPutRequest {
    /**
     * Numeric ID or key of the feature
     * @type {string}
     * @memberof FeaturesApiFeaturesIdGoalsPut
     */
    readonly id: string

    /**
     * 
     * @type {FeaturesIdGoalsPutRequest}
     * @memberof FeaturesApiFeaturesIdGoalsPut
     */
    readonly featuresIdGoalsPutRequest: FeaturesIdGoalsPutRequest
}

/**
 * Request parameters for featuresIdProgressPut operation in FeaturesApi.
 * @export
 * @interface FeaturesApiFeaturesIdProgressPutRequest
 */
export interface FeaturesApiFeaturesIdProgressPutRequest {
    /**
     * Numeric ID or key of the feature
     * @type {string}
     * @memberof FeaturesApiFeaturesIdProgressPut
     */
    readonly id: string

    /**
     * 
     * @type {FeaturesIdProgressPutRequest}
     * @memberof FeaturesApiFeaturesIdProgressPut
     */
    readonly featuresIdProgressPutRequest: FeaturesIdProgressPutRequest
}

/**
 * Request parameters for featuresIdPut operation in FeaturesApi.
 * @export
 * @interface FeaturesApiFeaturesIdPutRequest
 */
export interface FeaturesApiFeaturesIdPutRequest {
    /**
     * Numeric ID or key of the feature
     * @type {string}
     * @memberof FeaturesApiFeaturesIdPut
     */
    readonly id: string

    /**
     * 
     * @type {FeaturesIdPutRequest}
     * @memberof FeaturesApiFeaturesIdPut
     */
    readonly featuresIdPutRequest: FeaturesIdPutRequest
}

/**
 * Request parameters for releasesReleaseIdFeaturesGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiReleasesReleaseIdFeaturesGetRequest
 */
export interface FeaturesApiReleasesReleaseIdFeaturesGetRequest {
    /**
     * Numeric ID or key of the release
     * @type {string}
     * @memberof FeaturesApiReleasesReleaseIdFeaturesGet
     */
    readonly releaseId: string

    /**
     * Search term to match against feature name
     * @type {string}
     * @memberof FeaturesApiReleasesReleaseIdFeaturesGet
     */
    readonly q?: string

    /**
     * UTC timestamp (in ISO8601 format). If provided, only features updated after the timestamp will be returned
     * @type {string}
     * @memberof FeaturesApiReleasesReleaseIdFeaturesGet
     */
    readonly updatedSince?: string

    /**
     * String tag value. If provided, only features with the associated tag will be returned
     * @type {string}
     * @memberof FeaturesApiReleasesReleaseIdFeaturesGet
     */
    readonly tag?: string

    /**
     * ID or email address of a user. If provided, only features assigned to that user will be returned
     * @type {string}
     * @memberof FeaturesApiReleasesReleaseIdFeaturesGet
     */
    readonly assignedToUser?: string
}

/**
 * Request parameters for releasesReleaseIdFeaturesPost operation in FeaturesApi.
 * @export
 * @interface FeaturesApiReleasesReleaseIdFeaturesPostRequest
 */
export interface FeaturesApiReleasesReleaseIdFeaturesPostRequest {
    /**
     * Numeric ID or key of the release
     * @type {string}
     * @memberof FeaturesApiReleasesReleaseIdFeaturesPost
     */
    readonly releaseId: string

    /**
     * 
     * @type {FeatureCreateRequest}
     * @memberof FeaturesApiReleasesReleaseIdFeaturesPost
     */
    readonly featureCreateRequest: FeatureCreateRequest
}

/**
 * FeaturesApi - object-oriented interface
 * @export
 * @class FeaturesApi
 * @extends {BaseAPI}
 */
export class FeaturesApi extends BaseAPI implements FeaturesApiInterface {
    /**
     * Updates the custom fields of an existing feature. 
     * @summary Update a feature\'s custom fields
     * @param {FeaturesApiFeaturesIdCustomFieldsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public featuresIdCustomFieldsPut(requestParameters: FeaturesApiFeaturesIdCustomFieldsPutRequest, options?: RawAxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).featuresIdCustomFieldsPut(requestParameters.id, requestParameters.featuresIdCustomFieldsPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the custom fields of an existing feature with tag-like values. 
     * @summary Update a feature\'s custom fields with tag-like value
     * @param {FeaturesApiFeaturesIdCustomFieldsTagPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public featuresIdCustomFieldsTagPut(requestParameters: FeaturesApiFeaturesIdCustomFieldsTagPutRequest, options?: RawAxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).featuresIdCustomFieldsTagPut(requestParameters.id, requestParameters.featuresIdCustomFieldsTagPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the custom worksheet fields of an existing feature. 
     * @summary Update a feature\'s custom worksheet fields
     * @param {FeaturesApiFeaturesIdCustomFieldsWorksheetPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public featuresIdCustomFieldsWorksheetPut(requestParameters: FeaturesApiFeaturesIdCustomFieldsWorksheetPutRequest, options?: RawAxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).featuresIdCustomFieldsWorksheetPut(requestParameters.id, requestParameters.featuresIdCustomFieldsWorksheetPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the specified feature.
     * @summary Delete a feature
     * @param {FeaturesApiFeaturesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public featuresIdDelete(requestParameters: FeaturesApiFeaturesIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).featuresIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the epic of an existing feature. 
     * @summary Update a feature\'s epic
     * @param {FeaturesApiFeaturesIdEpicPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public featuresIdEpicPut(requestParameters: FeaturesApiFeaturesIdEpicPutRequest, options?: RawAxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).featuresIdEpicPut(requestParameters.id, requestParameters.featuresIdEpicPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the details of a specific feature.
     * @summary Get a specific feature
     * @param {FeaturesApiFeaturesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public featuresIdGet(requestParameters: FeaturesApiFeaturesIdGetRequest, options?: RawAxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).featuresIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the goals of an existing feature. 
     * @summary Update a feature\'s goals
     * @param {FeaturesApiFeaturesIdGoalsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public featuresIdGoalsPut(requestParameters: FeaturesApiFeaturesIdGoalsPutRequest, options?: RawAxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).featuresIdGoalsPut(requestParameters.id, requestParameters.featuresIdGoalsPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the progress of an existing feature. May only be set when the progress_source is manual. 
     * @summary Update a feature\'s progress
     * @param {FeaturesApiFeaturesIdProgressPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public featuresIdProgressPut(requestParameters: FeaturesApiFeaturesIdProgressPutRequest, options?: RawAxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).featuresIdProgressPut(requestParameters.id, requestParameters.featuresIdProgressPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an existing feature with the provided attributes. 
     * @summary Update a feature
     * @param {FeaturesApiFeaturesIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public featuresIdPut(requestParameters: FeaturesApiFeaturesIdPutRequest, options?: RawAxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).featuresIdPut(requestParameters.id, requestParameters.featuresIdPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of features associated with a specific release. 
     * @summary List features in a release
     * @param {FeaturesApiReleasesReleaseIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public releasesReleaseIdFeaturesGet(requestParameters: FeaturesApiReleasesReleaseIdFeaturesGetRequest, options?: RawAxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).releasesReleaseIdFeaturesGet(requestParameters.releaseId, requestParameters.q, requestParameters.updatedSince, requestParameters.tag, requestParameters.assignedToUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new feature to a specified release. Features belong to releases. This means that if you want to create one then you must scope it to a release.
     * @summary Create a feature
     * @param {FeaturesApiReleasesReleaseIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public releasesReleaseIdFeaturesPost(requestParameters: FeaturesApiReleasesReleaseIdFeaturesPostRequest, options?: RawAxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).releasesReleaseIdFeaturesPost(requestParameters.releaseId, requestParameters.featureCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

