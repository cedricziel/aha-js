/* tslint:disable */
/* eslint-disable */
/**
 * Aha! REST API
 * API for interacting with Aha! product management platform.  ## Rate Limiting The API enforces rate limits to ensure fair usage: - **300 requests per minute** per account - **20 requests per second** per account  When rate limits are exceeded, the API returns a `429 Too Many Requests` response with a `retry_after` header indicating when to retry.  ## Authentication The API supports two authentication methods: - **OAuth 2.0**: For web applications and integrations requiring user consent - **API Tokens**: For server-to-server integrations and personal access  ## Request Headers - **User-Agent**: Required header to identify the client application - **Content-Type**: Set to `application/json` for POST/PUT requests - **Authorization**: Bearer token or OAuth access token  ## Response Format All responses are in JSON format. List endpoints include pagination metadata in the `meta.pagination` object.  ## Error Handling The API uses standard HTTP status codes and includes detailed error messages in the response body for debugging. 
 *
 * The version of the OpenAPI document: 1.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Comment } from '../model';
// @ts-ignore
import type { CommentCreateRequest } from '../model';
// @ts-ignore
import type { Feature } from '../model';
// @ts-ignore
import type { FeatureGetResponse } from '../model';
// @ts-ignore
import type { FeatureUpdateRequest } from '../model';
// @ts-ignore
import type { FeatureUpdateResponse } from '../model';
// @ts-ignore
import type { FeaturesIdCustomFieldsWorksheetPutRequest } from '../model';
// @ts-ignore
import type { FeaturesIdEpicPutRequest } from '../model';
// @ts-ignore
import type { FeaturesIdGoalsPutRequest } from '../model';
// @ts-ignore
import type { FeaturesIdProgressPutRequest } from '../model';
// @ts-ignore
import type { FeaturesIdProgressSourcePutRequest } from '../model';
// @ts-ignore
import type { FeaturesIdReleasePutRequest } from '../model';
// @ts-ignore
import type { FeaturesIdScorePutRequest } from '../model';
// @ts-ignore
import type { FeaturesIdTagsPutRequest } from '../model';
// @ts-ignore
import type { FeaturesList429Response } from '../model';
// @ts-ignore
import type { FeaturesList504Response } from '../model';
// @ts-ignore
import type { FeaturesListResponse } from '../model';
/**
 * FeaturesApi - axios parameter creator
 */
export const FeaturesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new comment to the specified feature.
         * @summary Create a comment on a feature
         * @param {string} featureId 
         * @param {CommentCreateRequest} commentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsCreateFeature: async (featureId: string, commentCreateRequest: CommentCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('commentsCreateFeature', 'featureId', featureId)
            // verify required parameter 'commentCreateRequest' is not null or undefined
            assertParamExists('commentsCreateFeature', 'commentCreateRequest', commentCreateRequest)
            const localVarPath = `/features/{feature_id}/comments`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commentCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the specified feature.
         * @summary Delete a feature
         * @param {string} id Numeric ID or key of the feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('featuresDelete', 'id', id)
            const localVarPath = `/features/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the details of a specific feature.
         * @summary Get a specific feature
         * @param {string} id Numeric ID or key of the feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('featuresGet', 'id', id)
            const localVarPath = `/features/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the custom worksheet fields of an existing feature. 
         * @summary Update a feature\'s custom worksheet fields
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdCustomFieldsWorksheetPutRequest} featuresIdCustomFieldsWorksheetPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdCustomFieldsWorksheetPut: async (id: string, featuresIdCustomFieldsWorksheetPutRequest: FeaturesIdCustomFieldsWorksheetPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('featuresIdCustomFieldsWorksheetPut', 'id', id)
            // verify required parameter 'featuresIdCustomFieldsWorksheetPutRequest' is not null or undefined
            assertParamExists('featuresIdCustomFieldsWorksheetPut', 'featuresIdCustomFieldsWorksheetPutRequest', featuresIdCustomFieldsWorksheetPutRequest)
            const localVarPath = `/features/{id}/custom_fields/worksheet`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featuresIdCustomFieldsWorksheetPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the epic of an existing feature. 
         * @summary Update a feature\'s epic
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdEpicPutRequest} featuresIdEpicPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdEpicPut: async (id: string, featuresIdEpicPutRequest: FeaturesIdEpicPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('featuresIdEpicPut', 'id', id)
            // verify required parameter 'featuresIdEpicPutRequest' is not null or undefined
            assertParamExists('featuresIdEpicPut', 'featuresIdEpicPutRequest', featuresIdEpicPutRequest)
            const localVarPath = `/features/{id}/epic`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featuresIdEpicPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the goals of an existing feature. 
         * @summary Update a feature\'s goals
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdGoalsPutRequest} featuresIdGoalsPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdGoalsPut: async (id: string, featuresIdGoalsPutRequest: FeaturesIdGoalsPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('featuresIdGoalsPut', 'id', id)
            // verify required parameter 'featuresIdGoalsPutRequest' is not null or undefined
            assertParamExists('featuresIdGoalsPut', 'featuresIdGoalsPutRequest', featuresIdGoalsPutRequest)
            const localVarPath = `/features/{id}/goals`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featuresIdGoalsPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the progress of an existing feature. May only be set when the progress_source is manual. 
         * @summary Update a feature\'s progress
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdProgressPutRequest} featuresIdProgressPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdProgressPut: async (id: string, featuresIdProgressPutRequest: FeaturesIdProgressPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('featuresIdProgressPut', 'id', id)
            // verify required parameter 'featuresIdProgressPutRequest' is not null or undefined
            assertParamExists('featuresIdProgressPut', 'featuresIdProgressPutRequest', featuresIdProgressPutRequest)
            const localVarPath = `/features/{id}/progress`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featuresIdProgressPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the progress source of an existing feature. Options are: progress_manual, progress_from_requirements, progress_from_remaining_estimate, progress_from_todos. 
         * @summary Update a feature\'s progress source
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdProgressSourcePutRequest} featuresIdProgressSourcePutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdProgressSourcePut: async (id: string, featuresIdProgressSourcePutRequest: FeaturesIdProgressSourcePutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('featuresIdProgressSourcePut', 'id', id)
            // verify required parameter 'featuresIdProgressSourcePutRequest' is not null or undefined
            assertParamExists('featuresIdProgressSourcePut', 'featuresIdProgressSourcePutRequest', featuresIdProgressSourcePutRequest)
            const localVarPath = `/features/{id}/progress_source`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featuresIdProgressSourcePutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the release of an existing feature. 
         * @summary Update a feature\'s release
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdReleasePutRequest} featuresIdReleasePutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdReleasePut: async (id: string, featuresIdReleasePutRequest: FeaturesIdReleasePutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('featuresIdReleasePut', 'id', id)
            // verify required parameter 'featuresIdReleasePutRequest' is not null or undefined
            assertParamExists('featuresIdReleasePut', 'featuresIdReleasePutRequest', featuresIdReleasePutRequest)
            const localVarPath = `/features/{id}/release`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featuresIdReleasePutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the score of an existing feature. 
         * @summary Update a feature\'s score
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdScorePutRequest} featuresIdScorePutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdScorePut: async (id: string, featuresIdScorePutRequest: FeaturesIdScorePutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('featuresIdScorePut', 'id', id)
            // verify required parameter 'featuresIdScorePutRequest' is not null or undefined
            assertParamExists('featuresIdScorePut', 'featuresIdScorePutRequest', featuresIdScorePutRequest)
            const localVarPath = `/features/{id}/score`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featuresIdScorePutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the tags of an existing feature using an array. 
         * @summary Update a feature\'s tags with an array
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdTagsPutRequest} featuresIdTagsPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdTagsPut: async (id: string, featuresIdTagsPutRequest: FeaturesIdTagsPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('featuresIdTagsPut', 'id', id)
            // verify required parameter 'featuresIdTagsPutRequest' is not null or undefined
            assertParamExists('featuresIdTagsPut', 'featuresIdTagsPutRequest', featuresIdTagsPutRequest)
            const localVarPath = `/features/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featuresIdTagsPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of features. You can filter by various criteria like name, modification date, tag, or assignee. Features belong to releases, so they are scoped to a release. 
         * @summary List features
         * @param {number} [page] Page number for pagination (starts at 1)
         * @param {number} [perPage] Number of items per page (max 200)
         * @param {string} [fields] Comma-separated list of fields to include in response for customization
         * @param {string} [q] Search term to match against feature name
         * @param {string} [updatedSince] UTC timestamp (in ISO8601 format). If provided, only features updated after the timestamp will be returned
         * @param {string} [tag] String tag value. If provided, only features with the associated tag will be returned
         * @param {string} [assignedToUser] ID or email address of a user. If provided, only features assigned to that user will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresList: async (page?: number, perPage?: number, fields?: string, q?: string, updatedSince?: string, tag?: string, assignedToUser?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (updatedSince !== undefined) {
                localVarQueryParameter['updated_since'] = (updatedSince as any instanceof Date) ?
                    (updatedSince as any).toISOString() :
                    updatedSince;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (assignedToUser !== undefined) {
                localVarQueryParameter['assigned_to_user'] = assignedToUser;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing feature with the provided attributes.
         * @summary Update a feature
         * @param {string} id Numeric ID or key of the feature
         * @param {FeatureUpdateRequest} featureUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresUpdate: async (id: string, featureUpdateRequest: FeatureUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('featuresUpdate', 'id', id)
            // verify required parameter 'featureUpdateRequest' is not null or undefined
            assertParamExists('featuresUpdate', 'featureUpdateRequest', featureUpdateRequest)
            const localVarPath = `/features/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featureUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeaturesApi - functional programming interface
 */
export const FeaturesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeaturesApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new comment to the specified feature.
         * @summary Create a comment on a feature
         * @param {string} featureId 
         * @param {CommentCreateRequest} commentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsCreateFeature(featureId: string, commentCreateRequest: CommentCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsCreateFeature(featureId, commentCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeaturesApi.commentsCreateFeature']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes the specified feature.
         * @summary Delete a feature
         * @param {string} id Numeric ID or key of the feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeaturesApi.featuresDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves the details of a specific feature.
         * @summary Get a specific feature
         * @param {string} id Numeric ID or key of the feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeaturesApi.featuresGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the custom worksheet fields of an existing feature. 
         * @summary Update a feature\'s custom worksheet fields
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdCustomFieldsWorksheetPutRequest} featuresIdCustomFieldsWorksheetPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresIdCustomFieldsWorksheetPut(id: string, featuresIdCustomFieldsWorksheetPutRequest: FeaturesIdCustomFieldsWorksheetPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresIdCustomFieldsWorksheetPut(id, featuresIdCustomFieldsWorksheetPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeaturesApi.featuresIdCustomFieldsWorksheetPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the epic of an existing feature. 
         * @summary Update a feature\'s epic
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdEpicPutRequest} featuresIdEpicPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresIdEpicPut(id: string, featuresIdEpicPutRequest: FeaturesIdEpicPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresIdEpicPut(id, featuresIdEpicPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeaturesApi.featuresIdEpicPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the goals of an existing feature. 
         * @summary Update a feature\'s goals
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdGoalsPutRequest} featuresIdGoalsPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresIdGoalsPut(id: string, featuresIdGoalsPutRequest: FeaturesIdGoalsPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresIdGoalsPut(id, featuresIdGoalsPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeaturesApi.featuresIdGoalsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the progress of an existing feature. May only be set when the progress_source is manual. 
         * @summary Update a feature\'s progress
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdProgressPutRequest} featuresIdProgressPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresIdProgressPut(id: string, featuresIdProgressPutRequest: FeaturesIdProgressPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresIdProgressPut(id, featuresIdProgressPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeaturesApi.featuresIdProgressPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the progress source of an existing feature. Options are: progress_manual, progress_from_requirements, progress_from_remaining_estimate, progress_from_todos. 
         * @summary Update a feature\'s progress source
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdProgressSourcePutRequest} featuresIdProgressSourcePutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresIdProgressSourcePut(id: string, featuresIdProgressSourcePutRequest: FeaturesIdProgressSourcePutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresIdProgressSourcePut(id, featuresIdProgressSourcePutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeaturesApi.featuresIdProgressSourcePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the release of an existing feature. 
         * @summary Update a feature\'s release
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdReleasePutRequest} featuresIdReleasePutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresIdReleasePut(id: string, featuresIdReleasePutRequest: FeaturesIdReleasePutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresIdReleasePut(id, featuresIdReleasePutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeaturesApi.featuresIdReleasePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the score of an existing feature. 
         * @summary Update a feature\'s score
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdScorePutRequest} featuresIdScorePutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresIdScorePut(id: string, featuresIdScorePutRequest: FeaturesIdScorePutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresIdScorePut(id, featuresIdScorePutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeaturesApi.featuresIdScorePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the tags of an existing feature using an array. 
         * @summary Update a feature\'s tags with an array
         * @param {string} id Numeric ID or key of the feature
         * @param {FeaturesIdTagsPutRequest} featuresIdTagsPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresIdTagsPut(id: string, featuresIdTagsPutRequest: FeaturesIdTagsPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresIdTagsPut(id, featuresIdTagsPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeaturesApi.featuresIdTagsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of features. You can filter by various criteria like name, modification date, tag, or assignee. Features belong to releases, so they are scoped to a release. 
         * @summary List features
         * @param {number} [page] Page number for pagination (starts at 1)
         * @param {number} [perPage] Number of items per page (max 200)
         * @param {string} [fields] Comma-separated list of fields to include in response for customization
         * @param {string} [q] Search term to match against feature name
         * @param {string} [updatedSince] UTC timestamp (in ISO8601 format). If provided, only features updated after the timestamp will be returned
         * @param {string} [tag] String tag value. If provided, only features with the associated tag will be returned
         * @param {string} [assignedToUser] ID or email address of a user. If provided, only features assigned to that user will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresList(page?: number, perPage?: number, fields?: string, q?: string, updatedSince?: string, tag?: string, assignedToUser?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturesListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresList(page, perPage, fields, q, updatedSince, tag, assignedToUser, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeaturesApi.featuresList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates an existing feature with the provided attributes.
         * @summary Update a feature
         * @param {string} id Numeric ID or key of the feature
         * @param {FeatureUpdateRequest} featureUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresUpdate(id: string, featureUpdateRequest: FeatureUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresUpdate(id, featureUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeaturesApi.featuresUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FeaturesApi - factory interface
 */
export const FeaturesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeaturesApiFp(configuration)
    return {
        /**
         * Adds a new comment to the specified feature.
         * @summary Create a comment on a feature
         * @param {FeaturesApiCommentsCreateFeatureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsCreateFeature(requestParameters: FeaturesApiCommentsCreateFeatureRequest, options?: RawAxiosRequestConfig): AxiosPromise<Comment> {
            return localVarFp.commentsCreateFeature(requestParameters.featureId, requestParameters.commentCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the specified feature.
         * @summary Delete a feature
         * @param {FeaturesApiFeaturesDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresDelete(requestParameters: FeaturesApiFeaturesDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.featuresDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the details of a specific feature.
         * @summary Get a specific feature
         * @param {FeaturesApiFeaturesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresGet(requestParameters: FeaturesApiFeaturesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeatureGetResponse> {
            return localVarFp.featuresGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the custom worksheet fields of an existing feature. 
         * @summary Update a feature\'s custom worksheet fields
         * @param {FeaturesApiFeaturesIdCustomFieldsWorksheetPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdCustomFieldsWorksheetPut(requestParameters: FeaturesApiFeaturesIdCustomFieldsWorksheetPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature> {
            return localVarFp.featuresIdCustomFieldsWorksheetPut(requestParameters.id, requestParameters.featuresIdCustomFieldsWorksheetPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the epic of an existing feature. 
         * @summary Update a feature\'s epic
         * @param {FeaturesApiFeaturesIdEpicPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdEpicPut(requestParameters: FeaturesApiFeaturesIdEpicPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature> {
            return localVarFp.featuresIdEpicPut(requestParameters.id, requestParameters.featuresIdEpicPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the goals of an existing feature. 
         * @summary Update a feature\'s goals
         * @param {FeaturesApiFeaturesIdGoalsPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdGoalsPut(requestParameters: FeaturesApiFeaturesIdGoalsPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature> {
            return localVarFp.featuresIdGoalsPut(requestParameters.id, requestParameters.featuresIdGoalsPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the progress of an existing feature. May only be set when the progress_source is manual. 
         * @summary Update a feature\'s progress
         * @param {FeaturesApiFeaturesIdProgressPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdProgressPut(requestParameters: FeaturesApiFeaturesIdProgressPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature> {
            return localVarFp.featuresIdProgressPut(requestParameters.id, requestParameters.featuresIdProgressPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the progress source of an existing feature. Options are: progress_manual, progress_from_requirements, progress_from_remaining_estimate, progress_from_todos. 
         * @summary Update a feature\'s progress source
         * @param {FeaturesApiFeaturesIdProgressSourcePutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdProgressSourcePut(requestParameters: FeaturesApiFeaturesIdProgressSourcePutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature> {
            return localVarFp.featuresIdProgressSourcePut(requestParameters.id, requestParameters.featuresIdProgressSourcePutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the release of an existing feature. 
         * @summary Update a feature\'s release
         * @param {FeaturesApiFeaturesIdReleasePutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdReleasePut(requestParameters: FeaturesApiFeaturesIdReleasePutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature> {
            return localVarFp.featuresIdReleasePut(requestParameters.id, requestParameters.featuresIdReleasePutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the score of an existing feature. 
         * @summary Update a feature\'s score
         * @param {FeaturesApiFeaturesIdScorePutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdScorePut(requestParameters: FeaturesApiFeaturesIdScorePutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature> {
            return localVarFp.featuresIdScorePut(requestParameters.id, requestParameters.featuresIdScorePutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the tags of an existing feature using an array. 
         * @summary Update a feature\'s tags with an array
         * @param {FeaturesApiFeaturesIdTagsPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdTagsPut(requestParameters: FeaturesApiFeaturesIdTagsPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature> {
            return localVarFp.featuresIdTagsPut(requestParameters.id, requestParameters.featuresIdTagsPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of features. You can filter by various criteria like name, modification date, tag, or assignee. Features belong to releases, so they are scoped to a release. 
         * @summary List features
         * @param {FeaturesApiFeaturesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresList(requestParameters: FeaturesApiFeaturesListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<FeaturesListResponse> {
            return localVarFp.featuresList(requestParameters.page, requestParameters.perPage, requestParameters.fields, requestParameters.q, requestParameters.updatedSince, requestParameters.tag, requestParameters.assignedToUser, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing feature with the provided attributes.
         * @summary Update a feature
         * @param {FeaturesApiFeaturesUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresUpdate(requestParameters: FeaturesApiFeaturesUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeatureUpdateResponse> {
            return localVarFp.featuresUpdate(requestParameters.id, requestParameters.featureUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeaturesApi - interface
 */
export interface FeaturesApiInterface {
    /**
     * Adds a new comment to the specified feature.
     * @summary Create a comment on a feature
     * @param {FeaturesApiCommentsCreateFeatureRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentsCreateFeature(requestParameters: FeaturesApiCommentsCreateFeatureRequest, options?: RawAxiosRequestConfig): AxiosPromise<Comment>;

    /**
     * Deletes the specified feature.
     * @summary Delete a feature
     * @param {FeaturesApiFeaturesDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    featuresDelete(requestParameters: FeaturesApiFeaturesDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Retrieves the details of a specific feature.
     * @summary Get a specific feature
     * @param {FeaturesApiFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    featuresGet(requestParameters: FeaturesApiFeaturesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeatureGetResponse>;

    /**
     * Updates the custom worksheet fields of an existing feature. 
     * @summary Update a feature\'s custom worksheet fields
     * @param {FeaturesApiFeaturesIdCustomFieldsWorksheetPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    featuresIdCustomFieldsWorksheetPut(requestParameters: FeaturesApiFeaturesIdCustomFieldsWorksheetPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature>;

    /**
     * Updates the epic of an existing feature. 
     * @summary Update a feature\'s epic
     * @param {FeaturesApiFeaturesIdEpicPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    featuresIdEpicPut(requestParameters: FeaturesApiFeaturesIdEpicPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature>;

    /**
     * Updates the goals of an existing feature. 
     * @summary Update a feature\'s goals
     * @param {FeaturesApiFeaturesIdGoalsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    featuresIdGoalsPut(requestParameters: FeaturesApiFeaturesIdGoalsPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature>;

    /**
     * Updates the progress of an existing feature. May only be set when the progress_source is manual. 
     * @summary Update a feature\'s progress
     * @param {FeaturesApiFeaturesIdProgressPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    featuresIdProgressPut(requestParameters: FeaturesApiFeaturesIdProgressPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature>;

    /**
     * Updates the progress source of an existing feature. Options are: progress_manual, progress_from_requirements, progress_from_remaining_estimate, progress_from_todos. 
     * @summary Update a feature\'s progress source
     * @param {FeaturesApiFeaturesIdProgressSourcePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    featuresIdProgressSourcePut(requestParameters: FeaturesApiFeaturesIdProgressSourcePutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature>;

    /**
     * Updates the release of an existing feature. 
     * @summary Update a feature\'s release
     * @param {FeaturesApiFeaturesIdReleasePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    featuresIdReleasePut(requestParameters: FeaturesApiFeaturesIdReleasePutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature>;

    /**
     * Updates the score of an existing feature. 
     * @summary Update a feature\'s score
     * @param {FeaturesApiFeaturesIdScorePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    featuresIdScorePut(requestParameters: FeaturesApiFeaturesIdScorePutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature>;

    /**
     * Updates the tags of an existing feature using an array. 
     * @summary Update a feature\'s tags with an array
     * @param {FeaturesApiFeaturesIdTagsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    featuresIdTagsPut(requestParameters: FeaturesApiFeaturesIdTagsPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feature>;

    /**
     * Returns a list of features. You can filter by various criteria like name, modification date, tag, or assignee. Features belong to releases, so they are scoped to a release. 
     * @summary List features
     * @param {FeaturesApiFeaturesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    featuresList(requestParameters?: FeaturesApiFeaturesListRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeaturesListResponse>;

    /**
     * Updates an existing feature with the provided attributes.
     * @summary Update a feature
     * @param {FeaturesApiFeaturesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    featuresUpdate(requestParameters: FeaturesApiFeaturesUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeatureUpdateResponse>;

}

/**
 * Request parameters for commentsCreateFeature operation in FeaturesApi.
 */
export interface FeaturesApiCommentsCreateFeatureRequest {
    readonly featureId: string

    readonly commentCreateRequest: CommentCreateRequest
}

/**
 * Request parameters for featuresDelete operation in FeaturesApi.
 */
export interface FeaturesApiFeaturesDeleteRequest {
    /**
     * Numeric ID or key of the feature
     */
    readonly id: string
}

/**
 * Request parameters for featuresGet operation in FeaturesApi.
 */
export interface FeaturesApiFeaturesGetRequest {
    /**
     * Numeric ID or key of the feature
     */
    readonly id: string
}

/**
 * Request parameters for featuresIdCustomFieldsWorksheetPut operation in FeaturesApi.
 */
export interface FeaturesApiFeaturesIdCustomFieldsWorksheetPutRequest {
    /**
     * Numeric ID or key of the feature
     */
    readonly id: string

    readonly featuresIdCustomFieldsWorksheetPutRequest: FeaturesIdCustomFieldsWorksheetPutRequest
}

/**
 * Request parameters for featuresIdEpicPut operation in FeaturesApi.
 */
export interface FeaturesApiFeaturesIdEpicPutRequest {
    /**
     * Numeric ID or key of the feature
     */
    readonly id: string

    readonly featuresIdEpicPutRequest: FeaturesIdEpicPutRequest
}

/**
 * Request parameters for featuresIdGoalsPut operation in FeaturesApi.
 */
export interface FeaturesApiFeaturesIdGoalsPutRequest {
    /**
     * Numeric ID or key of the feature
     */
    readonly id: string

    readonly featuresIdGoalsPutRequest: FeaturesIdGoalsPutRequest
}

/**
 * Request parameters for featuresIdProgressPut operation in FeaturesApi.
 */
export interface FeaturesApiFeaturesIdProgressPutRequest {
    /**
     * Numeric ID or key of the feature
     */
    readonly id: string

    readonly featuresIdProgressPutRequest: FeaturesIdProgressPutRequest
}

/**
 * Request parameters for featuresIdProgressSourcePut operation in FeaturesApi.
 */
export interface FeaturesApiFeaturesIdProgressSourcePutRequest {
    /**
     * Numeric ID or key of the feature
     */
    readonly id: string

    readonly featuresIdProgressSourcePutRequest: FeaturesIdProgressSourcePutRequest
}

/**
 * Request parameters for featuresIdReleasePut operation in FeaturesApi.
 */
export interface FeaturesApiFeaturesIdReleasePutRequest {
    /**
     * Numeric ID or key of the feature
     */
    readonly id: string

    readonly featuresIdReleasePutRequest: FeaturesIdReleasePutRequest
}

/**
 * Request parameters for featuresIdScorePut operation in FeaturesApi.
 */
export interface FeaturesApiFeaturesIdScorePutRequest {
    /**
     * Numeric ID or key of the feature
     */
    readonly id: string

    readonly featuresIdScorePutRequest: FeaturesIdScorePutRequest
}

/**
 * Request parameters for featuresIdTagsPut operation in FeaturesApi.
 */
export interface FeaturesApiFeaturesIdTagsPutRequest {
    /**
     * Numeric ID or key of the feature
     */
    readonly id: string

    readonly featuresIdTagsPutRequest: FeaturesIdTagsPutRequest
}

/**
 * Request parameters for featuresList operation in FeaturesApi.
 */
export interface FeaturesApiFeaturesListRequest {
    /**
     * Page number for pagination (starts at 1)
     */
    readonly page?: number

    /**
     * Number of items per page (max 200)
     */
    readonly perPage?: number

    /**
     * Comma-separated list of fields to include in response for customization
     */
    readonly fields?: string

    /**
     * Search term to match against feature name
     */
    readonly q?: string

    /**
     * UTC timestamp (in ISO8601 format). If provided, only features updated after the timestamp will be returned
     */
    readonly updatedSince?: string

    /**
     * String tag value. If provided, only features with the associated tag will be returned
     */
    readonly tag?: string

    /**
     * ID or email address of a user. If provided, only features assigned to that user will be returned
     */
    readonly assignedToUser?: string
}

/**
 * Request parameters for featuresUpdate operation in FeaturesApi.
 */
export interface FeaturesApiFeaturesUpdateRequest {
    /**
     * Numeric ID or key of the feature
     */
    readonly id: string

    readonly featureUpdateRequest: FeatureUpdateRequest
}

/**
 * FeaturesApi - object-oriented interface
 */
export class FeaturesApi extends BaseAPI implements FeaturesApiInterface {
    /**
     * Adds a new comment to the specified feature.
     * @summary Create a comment on a feature
     * @param {FeaturesApiCommentsCreateFeatureRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public commentsCreateFeature(requestParameters: FeaturesApiCommentsCreateFeatureRequest, options?: RawAxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).commentsCreateFeature(requestParameters.featureId, requestParameters.commentCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the specified feature.
     * @summary Delete a feature
     * @param {FeaturesApiFeaturesDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public featuresDelete(requestParameters: FeaturesApiFeaturesDeleteRequest, options?: RawAxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).featuresDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the details of a specific feature.
     * @summary Get a specific feature
     * @param {FeaturesApiFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public featuresGet(requestParameters: FeaturesApiFeaturesGetRequest, options?: RawAxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).featuresGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the custom worksheet fields of an existing feature. 
     * @summary Update a feature\'s custom worksheet fields
     * @param {FeaturesApiFeaturesIdCustomFieldsWorksheetPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public featuresIdCustomFieldsWorksheetPut(requestParameters: FeaturesApiFeaturesIdCustomFieldsWorksheetPutRequest, options?: RawAxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).featuresIdCustomFieldsWorksheetPut(requestParameters.id, requestParameters.featuresIdCustomFieldsWorksheetPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the epic of an existing feature. 
     * @summary Update a feature\'s epic
     * @param {FeaturesApiFeaturesIdEpicPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public featuresIdEpicPut(requestParameters: FeaturesApiFeaturesIdEpicPutRequest, options?: RawAxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).featuresIdEpicPut(requestParameters.id, requestParameters.featuresIdEpicPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the goals of an existing feature. 
     * @summary Update a feature\'s goals
     * @param {FeaturesApiFeaturesIdGoalsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public featuresIdGoalsPut(requestParameters: FeaturesApiFeaturesIdGoalsPutRequest, options?: RawAxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).featuresIdGoalsPut(requestParameters.id, requestParameters.featuresIdGoalsPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the progress of an existing feature. May only be set when the progress_source is manual. 
     * @summary Update a feature\'s progress
     * @param {FeaturesApiFeaturesIdProgressPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public featuresIdProgressPut(requestParameters: FeaturesApiFeaturesIdProgressPutRequest, options?: RawAxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).featuresIdProgressPut(requestParameters.id, requestParameters.featuresIdProgressPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the progress source of an existing feature. Options are: progress_manual, progress_from_requirements, progress_from_remaining_estimate, progress_from_todos. 
     * @summary Update a feature\'s progress source
     * @param {FeaturesApiFeaturesIdProgressSourcePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public featuresIdProgressSourcePut(requestParameters: FeaturesApiFeaturesIdProgressSourcePutRequest, options?: RawAxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).featuresIdProgressSourcePut(requestParameters.id, requestParameters.featuresIdProgressSourcePutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the release of an existing feature. 
     * @summary Update a feature\'s release
     * @param {FeaturesApiFeaturesIdReleasePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public featuresIdReleasePut(requestParameters: FeaturesApiFeaturesIdReleasePutRequest, options?: RawAxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).featuresIdReleasePut(requestParameters.id, requestParameters.featuresIdReleasePutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the score of an existing feature. 
     * @summary Update a feature\'s score
     * @param {FeaturesApiFeaturesIdScorePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public featuresIdScorePut(requestParameters: FeaturesApiFeaturesIdScorePutRequest, options?: RawAxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).featuresIdScorePut(requestParameters.id, requestParameters.featuresIdScorePutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the tags of an existing feature using an array. 
     * @summary Update a feature\'s tags with an array
     * @param {FeaturesApiFeaturesIdTagsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public featuresIdTagsPut(requestParameters: FeaturesApiFeaturesIdTagsPutRequest, options?: RawAxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).featuresIdTagsPut(requestParameters.id, requestParameters.featuresIdTagsPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of features. You can filter by various criteria like name, modification date, tag, or assignee. Features belong to releases, so they are scoped to a release. 
     * @summary List features
     * @param {FeaturesApiFeaturesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public featuresList(requestParameters: FeaturesApiFeaturesListRequest = {}, options?: RawAxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).featuresList(requestParameters.page, requestParameters.perPage, requestParameters.fields, requestParameters.q, requestParameters.updatedSince, requestParameters.tag, requestParameters.assignedToUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an existing feature with the provided attributes.
     * @summary Update a feature
     * @param {FeaturesApiFeaturesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public featuresUpdate(requestParameters: FeaturesApiFeaturesUpdateRequest, options?: RawAxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).featuresUpdate(requestParameters.id, requestParameters.featureUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

