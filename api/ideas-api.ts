/* tslint:disable */
/* eslint-disable */
/**
 * Aha! REST API
 * API for interacting with Aha! product management platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { EpicsEpicIdCommentsGet200Response } from '../model';
/**
 * IdeasApi - axios parameter creator
 * @export
 */
export const IdeasApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a list of comments associated with the specified idea.
         * @summary List comments on an idea
         * @param {string} ideaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ideasIdeaIdCommentsGet: async (ideaId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ideaId' is not null or undefined
            assertParamExists('ideasIdeaIdCommentsGet', 'ideaId', ideaId)
            const localVarPath = `/ideas/{idea_id}/comments`
                .replace(`{${"idea_id"}}`, encodeURIComponent(String(ideaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdeasApi - functional programming interface
 * @export
 */
export const IdeasApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdeasApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a list of comments associated with the specified idea.
         * @summary List comments on an idea
         * @param {string} ideaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ideasIdeaIdCommentsGet(ideaId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EpicsEpicIdCommentsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ideasIdeaIdCommentsGet(ideaId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdeasApi.ideasIdeaIdCommentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IdeasApi - factory interface
 * @export
 */
export const IdeasApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdeasApiFp(configuration)
    return {
        /**
         * Retrieves a list of comments associated with the specified idea.
         * @summary List comments on an idea
         * @param {IdeasApiIdeasIdeaIdCommentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ideasIdeaIdCommentsGet(requestParameters: IdeasApiIdeasIdeaIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response> {
            return localVarFp.ideasIdeaIdCommentsGet(requestParameters.ideaId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IdeasApi - interface
 * @export
 * @interface IdeasApi
 */
export interface IdeasApiInterface {
    /**
     * Retrieves a list of comments associated with the specified idea.
     * @summary List comments on an idea
     * @param {IdeasApiIdeasIdeaIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeasApiInterface
     */
    ideasIdeaIdCommentsGet(requestParameters: IdeasApiIdeasIdeaIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response>;

}

/**
 * Request parameters for ideasIdeaIdCommentsGet operation in IdeasApi.
 * @export
 * @interface IdeasApiIdeasIdeaIdCommentsGetRequest
 */
export interface IdeasApiIdeasIdeaIdCommentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof IdeasApiIdeasIdeaIdCommentsGet
     */
    readonly ideaId: string
}

/**
 * IdeasApi - object-oriented interface
 * @export
 * @class IdeasApi
 * @extends {BaseAPI}
 */
export class IdeasApi extends BaseAPI implements IdeasApiInterface {
    /**
     * Retrieves a list of comments associated with the specified idea.
     * @summary List comments on an idea
     * @param {IdeasApiIdeasIdeaIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeasApi
     */
    public ideasIdeaIdCommentsGet(requestParameters: IdeasApiIdeasIdeaIdCommentsGetRequest, options?: RawAxiosRequestConfig) {
        return IdeasApiFp(this.configuration).ideasIdeaIdCommentsGet(requestParameters.ideaId, options).then((request) => request(this.axios, this.basePath));
    }
}

