/* tslint:disable */
/* eslint-disable */
/**
 * Aha! REST API
 * API for interacting with Aha! product management platform.  ## Rate Limiting The API enforces rate limits to ensure fair usage: - **300 requests per minute** per account - **20 requests per second** per account  When rate limits are exceeded, the API returns a `429 Too Many Requests` response with a `retry_after` header indicating when to retry.  ## Authentication The API supports two authentication methods: - **OAuth 2.0**: For web applications and integrations requiring user consent - **API Tokens**: For server-to-server integrations and personal access  ## Request Headers - **User-Agent**: Required header to identify the client application - **Content-Type**: Set to `application/json` for POST/PUT requests - **Authorization**: Bearer token or OAuth access token  ## Response Format All responses are in JSON format. List endpoints include pagination metadata in the `meta.pagination` object.  ## Error Handling The API uses standard HTTP status codes and includes detailed error messages in the response body for debugging. 
 *
 * The version of the OpenAPI document: 1.0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommentsGetEpic200Response } from '../model';
// @ts-ignore
import type { TodoCreateRequest } from '../model';
// @ts-ignore
import type { TodoUpdateRequest } from '../model';
// @ts-ignore
import type { TodosCreate201Response } from '../model';
// @ts-ignore
import type { TodosList200Response } from '../model';
/**
 * ToDosApi - axios parameter creator
 */
export const ToDosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a list of comments associated with the specified to-do.
         * @summary List comments on a to-do
         * @param {string} todoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGetTodo: async (todoId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'todoId' is not null or undefined
            assertParamExists('commentsGetTodo', 'todoId', todoId)
            const localVarPath = `/todos/{todo_id}/comments`
                .replace(`{${"todo_id"}}`, encodeURIComponent(String(todoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new to-do.
         * @summary Create a to-do
         * @param {TodoCreateRequest} todoCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosCreate: async (todoCreateRequest: TodoCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'todoCreateRequest' is not null or undefined
            assertParamExists('todosCreate', 'todoCreateRequest', todoCreateRequest)
            const localVarPath = `/todos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(todoCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the specified to-do.
         * @summary Delete a to-do
         * @param {string} id Numeric ID of the to-do
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('todosDelete', 'id', id)
            const localVarPath = `/todos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves details of a specific to-do.
         * @summary Get a specific to-do
         * @param {string} id Numeric ID of the to-do
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('todosGet', 'id', id)
            const localVarPath = `/todos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all to-dos.
         * @summary List to-dos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/todos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the specified to-do.
         * @summary Update a to-do
         * @param {string} id Numeric ID of the to-do
         * @param {TodoUpdateRequest} todoUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosUpdate: async (id: string, todoUpdateRequest: TodoUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('todosUpdate', 'id', id)
            // verify required parameter 'todoUpdateRequest' is not null or undefined
            assertParamExists('todosUpdate', 'todoUpdateRequest', todoUpdateRequest)
            const localVarPath = `/todos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(todoUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ToDosApi - functional programming interface
 */
export const ToDosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ToDosApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a list of comments associated with the specified to-do.
         * @summary List comments on a to-do
         * @param {string} todoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsGetTodo(todoId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentsGetEpic200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsGetTodo(todoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToDosApi.commentsGetTodo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new to-do.
         * @summary Create a to-do
         * @param {TodoCreateRequest} todoCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todosCreate(todoCreateRequest: TodoCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TodosCreate201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.todosCreate(todoCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToDosApi.todosCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes the specified to-do.
         * @summary Delete a to-do
         * @param {string} id Numeric ID of the to-do
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todosDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.todosDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToDosApi.todosDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves details of a specific to-do.
         * @summary Get a specific to-do
         * @param {string} id Numeric ID of the to-do
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todosGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TodosCreate201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.todosGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToDosApi.todosGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of all to-dos.
         * @summary List to-dos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todosList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TodosList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.todosList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToDosApi.todosList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the specified to-do.
         * @summary Update a to-do
         * @param {string} id Numeric ID of the to-do
         * @param {TodoUpdateRequest} todoUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todosUpdate(id: string, todoUpdateRequest: TodoUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TodosCreate201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.todosUpdate(id, todoUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToDosApi.todosUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ToDosApi - factory interface
 */
export const ToDosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ToDosApiFp(configuration)
    return {
        /**
         * Retrieves a list of comments associated with the specified to-do.
         * @summary List comments on a to-do
         * @param {ToDosApiCommentsGetTodoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGetTodo(requestParameters: ToDosApiCommentsGetTodoRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentsGetEpic200Response> {
            return localVarFp.commentsGetTodo(requestParameters.todoId, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new to-do.
         * @summary Create a to-do
         * @param {ToDosApiTodosCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosCreate(requestParameters: ToDosApiTodosCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<TodosCreate201Response> {
            return localVarFp.todosCreate(requestParameters.todoCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the specified to-do.
         * @summary Delete a to-do
         * @param {ToDosApiTodosDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosDelete(requestParameters: ToDosApiTodosDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.todosDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves details of a specific to-do.
         * @summary Get a specific to-do
         * @param {ToDosApiTodosGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosGet(requestParameters: ToDosApiTodosGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<TodosCreate201Response> {
            return localVarFp.todosGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all to-dos.
         * @summary List to-dos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosList(options?: RawAxiosRequestConfig): AxiosPromise<TodosList200Response> {
            return localVarFp.todosList(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the specified to-do.
         * @summary Update a to-do
         * @param {ToDosApiTodosUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosUpdate(requestParameters: ToDosApiTodosUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<TodosCreate201Response> {
            return localVarFp.todosUpdate(requestParameters.id, requestParameters.todoUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ToDosApi - interface
 */
export interface ToDosApiInterface {
    /**
     * Retrieves a list of comments associated with the specified to-do.
     * @summary List comments on a to-do
     * @param {ToDosApiCommentsGetTodoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentsGetTodo(requestParameters: ToDosApiCommentsGetTodoRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentsGetEpic200Response>;

    /**
     * Creates a new to-do.
     * @summary Create a to-do
     * @param {ToDosApiTodosCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    todosCreate(requestParameters: ToDosApiTodosCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<TodosCreate201Response>;

    /**
     * Deletes the specified to-do.
     * @summary Delete a to-do
     * @param {ToDosApiTodosDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    todosDelete(requestParameters: ToDosApiTodosDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Retrieves details of a specific to-do.
     * @summary Get a specific to-do
     * @param {ToDosApiTodosGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    todosGet(requestParameters: ToDosApiTodosGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<TodosCreate201Response>;

    /**
     * Retrieves a list of all to-dos.
     * @summary List to-dos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    todosList(options?: RawAxiosRequestConfig): AxiosPromise<TodosList200Response>;

    /**
     * Updates the specified to-do.
     * @summary Update a to-do
     * @param {ToDosApiTodosUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    todosUpdate(requestParameters: ToDosApiTodosUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<TodosCreate201Response>;

}

/**
 * Request parameters for commentsGetTodo operation in ToDosApi.
 */
export interface ToDosApiCommentsGetTodoRequest {
    readonly todoId: string
}

/**
 * Request parameters for todosCreate operation in ToDosApi.
 */
export interface ToDosApiTodosCreateRequest {
    readonly todoCreateRequest: TodoCreateRequest
}

/**
 * Request parameters for todosDelete operation in ToDosApi.
 */
export interface ToDosApiTodosDeleteRequest {
    /**
     * Numeric ID of the to-do
     */
    readonly id: string
}

/**
 * Request parameters for todosGet operation in ToDosApi.
 */
export interface ToDosApiTodosGetRequest {
    /**
     * Numeric ID of the to-do
     */
    readonly id: string
}

/**
 * Request parameters for todosUpdate operation in ToDosApi.
 */
export interface ToDosApiTodosUpdateRequest {
    /**
     * Numeric ID of the to-do
     */
    readonly id: string

    readonly todoUpdateRequest: TodoUpdateRequest
}

/**
 * ToDosApi - object-oriented interface
 */
export class ToDosApi extends BaseAPI implements ToDosApiInterface {
    /**
     * Retrieves a list of comments associated with the specified to-do.
     * @summary List comments on a to-do
     * @param {ToDosApiCommentsGetTodoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public commentsGetTodo(requestParameters: ToDosApiCommentsGetTodoRequest, options?: RawAxiosRequestConfig) {
        return ToDosApiFp(this.configuration).commentsGetTodo(requestParameters.todoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new to-do.
     * @summary Create a to-do
     * @param {ToDosApiTodosCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public todosCreate(requestParameters: ToDosApiTodosCreateRequest, options?: RawAxiosRequestConfig) {
        return ToDosApiFp(this.configuration).todosCreate(requestParameters.todoCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the specified to-do.
     * @summary Delete a to-do
     * @param {ToDosApiTodosDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public todosDelete(requestParameters: ToDosApiTodosDeleteRequest, options?: RawAxiosRequestConfig) {
        return ToDosApiFp(this.configuration).todosDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves details of a specific to-do.
     * @summary Get a specific to-do
     * @param {ToDosApiTodosGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public todosGet(requestParameters: ToDosApiTodosGetRequest, options?: RawAxiosRequestConfig) {
        return ToDosApiFp(this.configuration).todosGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of all to-dos.
     * @summary List to-dos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public todosList(options?: RawAxiosRequestConfig) {
        return ToDosApiFp(this.configuration).todosList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the specified to-do.
     * @summary Update a to-do
     * @param {ToDosApiTodosUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public todosUpdate(requestParameters: ToDosApiTodosUpdateRequest, options?: RawAxiosRequestConfig) {
        return ToDosApiFp(this.configuration).todosUpdate(requestParameters.id, requestParameters.todoUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

