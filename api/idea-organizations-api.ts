/* tslint:disable */
/* eslint-disable */
/**
 * Aha! REST API
 * API for interacting with Aha! product management platform.
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { IdeaOrganizationCreateRequest } from '../model';
// @ts-ignore
import type { IdeaOrganizationGetResponse } from '../model';
// @ts-ignore
import type { IdeaOrganizationUpdateRequest } from '../model';
// @ts-ignore
import type { IdeaOrganizationsListResponse } from '../model';
/**
 * IdeaOrganizationsApi - axios parameter creator
 * @export
 */
export const IdeaOrganizationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new idea organization.
         * @summary Create an idea organization
         * @param {IdeaOrganizationCreateRequest} ideaOrganizationCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ideaOrganizationsCreate: async (ideaOrganizationCreateRequest: IdeaOrganizationCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ideaOrganizationCreateRequest' is not null or undefined
            assertParamExists('ideaOrganizationsCreate', 'ideaOrganizationCreateRequest', ideaOrganizationCreateRequest)
            const localVarPath = `/idea_organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ideaOrganizationCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an idea organization.
         * @summary Delete an idea organization
         * @param {string} id Numeric ID of the idea organization
         * @param {boolean} [deleteProxyVotes] Delete the organization even if it has proxy votes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ideaOrganizationsDelete: async (id: string, deleteProxyVotes?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ideaOrganizationsDelete', 'id', id)
            const localVarPath = `/idea_organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (deleteProxyVotes !== undefined) {
                localVarQueryParameter['delete_proxy_votes'] = deleteProxyVotes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a specific idea organization by ID.
         * @summary Get an idea organization
         * @param {string} id Numeric ID of the idea organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ideaOrganizationsGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ideaOrganizationsGet', 'id', id)
            const localVarPath = `/idea_organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of idea organizations with optional filtering.
         * @summary List idea organizations
         * @param {string} [q] Search term to match against organization name
         * @param {string} [emailDomain] Returns organizations with matching email domain
         * @param {number} [page] Page number for pagination
         * @param {number} [perPage] Number of organizations per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ideaOrganizationsList: async (q?: string, emailDomain?: string, page?: number, perPage?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/idea_organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (emailDomain !== undefined) {
                localVarQueryParameter['email_domain'] = emailDomain;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing idea organization.
         * @summary Update an idea organization
         * @param {string} id Numeric ID of the idea organization
         * @param {IdeaOrganizationUpdateRequest} ideaOrganizationUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ideaOrganizationsUpdate: async (id: string, ideaOrganizationUpdateRequest: IdeaOrganizationUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ideaOrganizationsUpdate', 'id', id)
            // verify required parameter 'ideaOrganizationUpdateRequest' is not null or undefined
            assertParamExists('ideaOrganizationsUpdate', 'ideaOrganizationUpdateRequest', ideaOrganizationUpdateRequest)
            const localVarPath = `/idea_organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ideaOrganizationUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdeaOrganizationsApi - functional programming interface
 * @export
 */
export const IdeaOrganizationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdeaOrganizationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new idea organization.
         * @summary Create an idea organization
         * @param {IdeaOrganizationCreateRequest} ideaOrganizationCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ideaOrganizationsCreate(ideaOrganizationCreateRequest: IdeaOrganizationCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdeaOrganizationGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ideaOrganizationsCreate(ideaOrganizationCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdeaOrganizationsApi.ideaOrganizationsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes an idea organization.
         * @summary Delete an idea organization
         * @param {string} id Numeric ID of the idea organization
         * @param {boolean} [deleteProxyVotes] Delete the organization even if it has proxy votes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ideaOrganizationsDelete(id: string, deleteProxyVotes?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ideaOrganizationsDelete(id, deleteProxyVotes, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdeaOrganizationsApi.ideaOrganizationsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a specific idea organization by ID.
         * @summary Get an idea organization
         * @param {string} id Numeric ID of the idea organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ideaOrganizationsGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdeaOrganizationGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ideaOrganizationsGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdeaOrganizationsApi.ideaOrganizationsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of idea organizations with optional filtering.
         * @summary List idea organizations
         * @param {string} [q] Search term to match against organization name
         * @param {string} [emailDomain] Returns organizations with matching email domain
         * @param {number} [page] Page number for pagination
         * @param {number} [perPage] Number of organizations per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ideaOrganizationsList(q?: string, emailDomain?: string, page?: number, perPage?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdeaOrganizationsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ideaOrganizationsList(q, emailDomain, page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdeaOrganizationsApi.ideaOrganizationsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates an existing idea organization.
         * @summary Update an idea organization
         * @param {string} id Numeric ID of the idea organization
         * @param {IdeaOrganizationUpdateRequest} ideaOrganizationUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ideaOrganizationsUpdate(id: string, ideaOrganizationUpdateRequest: IdeaOrganizationUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdeaOrganizationGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ideaOrganizationsUpdate(id, ideaOrganizationUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdeaOrganizationsApi.ideaOrganizationsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IdeaOrganizationsApi - factory interface
 * @export
 */
export const IdeaOrganizationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdeaOrganizationsApiFp(configuration)
    return {
        /**
         * Creates a new idea organization.
         * @summary Create an idea organization
         * @param {IdeaOrganizationsApiIdeaOrganizationsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ideaOrganizationsCreate(requestParameters: IdeaOrganizationsApiIdeaOrganizationsCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<IdeaOrganizationGetResponse> {
            return localVarFp.ideaOrganizationsCreate(requestParameters.ideaOrganizationCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an idea organization.
         * @summary Delete an idea organization
         * @param {IdeaOrganizationsApiIdeaOrganizationsDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ideaOrganizationsDelete(requestParameters: IdeaOrganizationsApiIdeaOrganizationsDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.ideaOrganizationsDelete(requestParameters.id, requestParameters.deleteProxyVotes, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a specific idea organization by ID.
         * @summary Get an idea organization
         * @param {IdeaOrganizationsApiIdeaOrganizationsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ideaOrganizationsGet(requestParameters: IdeaOrganizationsApiIdeaOrganizationsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<IdeaOrganizationGetResponse> {
            return localVarFp.ideaOrganizationsGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of idea organizations with optional filtering.
         * @summary List idea organizations
         * @param {IdeaOrganizationsApiIdeaOrganizationsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ideaOrganizationsList(requestParameters: IdeaOrganizationsApiIdeaOrganizationsListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<IdeaOrganizationsListResponse> {
            return localVarFp.ideaOrganizationsList(requestParameters.q, requestParameters.emailDomain, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing idea organization.
         * @summary Update an idea organization
         * @param {IdeaOrganizationsApiIdeaOrganizationsUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ideaOrganizationsUpdate(requestParameters: IdeaOrganizationsApiIdeaOrganizationsUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<IdeaOrganizationGetResponse> {
            return localVarFp.ideaOrganizationsUpdate(requestParameters.id, requestParameters.ideaOrganizationUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IdeaOrganizationsApi - interface
 * @export
 * @interface IdeaOrganizationsApi
 */
export interface IdeaOrganizationsApiInterface {
    /**
     * Creates a new idea organization.
     * @summary Create an idea organization
     * @param {IdeaOrganizationsApiIdeaOrganizationsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaOrganizationsApiInterface
     */
    ideaOrganizationsCreate(requestParameters: IdeaOrganizationsApiIdeaOrganizationsCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<IdeaOrganizationGetResponse>;

    /**
     * Deletes an idea organization.
     * @summary Delete an idea organization
     * @param {IdeaOrganizationsApiIdeaOrganizationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaOrganizationsApiInterface
     */
    ideaOrganizationsDelete(requestParameters: IdeaOrganizationsApiIdeaOrganizationsDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Retrieves a specific idea organization by ID.
     * @summary Get an idea organization
     * @param {IdeaOrganizationsApiIdeaOrganizationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaOrganizationsApiInterface
     */
    ideaOrganizationsGet(requestParameters: IdeaOrganizationsApiIdeaOrganizationsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<IdeaOrganizationGetResponse>;

    /**
     * Retrieves a list of idea organizations with optional filtering.
     * @summary List idea organizations
     * @param {IdeaOrganizationsApiIdeaOrganizationsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaOrganizationsApiInterface
     */
    ideaOrganizationsList(requestParameters?: IdeaOrganizationsApiIdeaOrganizationsListRequest, options?: RawAxiosRequestConfig): AxiosPromise<IdeaOrganizationsListResponse>;

    /**
     * Updates an existing idea organization.
     * @summary Update an idea organization
     * @param {IdeaOrganizationsApiIdeaOrganizationsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaOrganizationsApiInterface
     */
    ideaOrganizationsUpdate(requestParameters: IdeaOrganizationsApiIdeaOrganizationsUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<IdeaOrganizationGetResponse>;

}

/**
 * Request parameters for ideaOrganizationsCreate operation in IdeaOrganizationsApi.
 * @export
 * @interface IdeaOrganizationsApiIdeaOrganizationsCreateRequest
 */
export interface IdeaOrganizationsApiIdeaOrganizationsCreateRequest {
    /**
     * 
     * @type {IdeaOrganizationCreateRequest}
     * @memberof IdeaOrganizationsApiIdeaOrganizationsCreate
     */
    readonly ideaOrganizationCreateRequest: IdeaOrganizationCreateRequest
}

/**
 * Request parameters for ideaOrganizationsDelete operation in IdeaOrganizationsApi.
 * @export
 * @interface IdeaOrganizationsApiIdeaOrganizationsDeleteRequest
 */
export interface IdeaOrganizationsApiIdeaOrganizationsDeleteRequest {
    /**
     * Numeric ID of the idea organization
     * @type {string}
     * @memberof IdeaOrganizationsApiIdeaOrganizationsDelete
     */
    readonly id: string

    /**
     * Delete the organization even if it has proxy votes
     * @type {boolean}
     * @memberof IdeaOrganizationsApiIdeaOrganizationsDelete
     */
    readonly deleteProxyVotes?: boolean
}

/**
 * Request parameters for ideaOrganizationsGet operation in IdeaOrganizationsApi.
 * @export
 * @interface IdeaOrganizationsApiIdeaOrganizationsGetRequest
 */
export interface IdeaOrganizationsApiIdeaOrganizationsGetRequest {
    /**
     * Numeric ID of the idea organization
     * @type {string}
     * @memberof IdeaOrganizationsApiIdeaOrganizationsGet
     */
    readonly id: string
}

/**
 * Request parameters for ideaOrganizationsList operation in IdeaOrganizationsApi.
 * @export
 * @interface IdeaOrganizationsApiIdeaOrganizationsListRequest
 */
export interface IdeaOrganizationsApiIdeaOrganizationsListRequest {
    /**
     * Search term to match against organization name
     * @type {string}
     * @memberof IdeaOrganizationsApiIdeaOrganizationsList
     */
    readonly q?: string

    /**
     * Returns organizations with matching email domain
     * @type {string}
     * @memberof IdeaOrganizationsApiIdeaOrganizationsList
     */
    readonly emailDomain?: string

    /**
     * Page number for pagination
     * @type {number}
     * @memberof IdeaOrganizationsApiIdeaOrganizationsList
     */
    readonly page?: number

    /**
     * Number of organizations per page
     * @type {number}
     * @memberof IdeaOrganizationsApiIdeaOrganizationsList
     */
    readonly perPage?: number
}

/**
 * Request parameters for ideaOrganizationsUpdate operation in IdeaOrganizationsApi.
 * @export
 * @interface IdeaOrganizationsApiIdeaOrganizationsUpdateRequest
 */
export interface IdeaOrganizationsApiIdeaOrganizationsUpdateRequest {
    /**
     * Numeric ID of the idea organization
     * @type {string}
     * @memberof IdeaOrganizationsApiIdeaOrganizationsUpdate
     */
    readonly id: string

    /**
     * 
     * @type {IdeaOrganizationUpdateRequest}
     * @memberof IdeaOrganizationsApiIdeaOrganizationsUpdate
     */
    readonly ideaOrganizationUpdateRequest: IdeaOrganizationUpdateRequest
}

/**
 * IdeaOrganizationsApi - object-oriented interface
 * @export
 * @class IdeaOrganizationsApi
 * @extends {BaseAPI}
 */
export class IdeaOrganizationsApi extends BaseAPI implements IdeaOrganizationsApiInterface {
    /**
     * Creates a new idea organization.
     * @summary Create an idea organization
     * @param {IdeaOrganizationsApiIdeaOrganizationsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaOrganizationsApi
     */
    public ideaOrganizationsCreate(requestParameters: IdeaOrganizationsApiIdeaOrganizationsCreateRequest, options?: RawAxiosRequestConfig) {
        return IdeaOrganizationsApiFp(this.configuration).ideaOrganizationsCreate(requestParameters.ideaOrganizationCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an idea organization.
     * @summary Delete an idea organization
     * @param {IdeaOrganizationsApiIdeaOrganizationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaOrganizationsApi
     */
    public ideaOrganizationsDelete(requestParameters: IdeaOrganizationsApiIdeaOrganizationsDeleteRequest, options?: RawAxiosRequestConfig) {
        return IdeaOrganizationsApiFp(this.configuration).ideaOrganizationsDelete(requestParameters.id, requestParameters.deleteProxyVotes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a specific idea organization by ID.
     * @summary Get an idea organization
     * @param {IdeaOrganizationsApiIdeaOrganizationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaOrganizationsApi
     */
    public ideaOrganizationsGet(requestParameters: IdeaOrganizationsApiIdeaOrganizationsGetRequest, options?: RawAxiosRequestConfig) {
        return IdeaOrganizationsApiFp(this.configuration).ideaOrganizationsGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of idea organizations with optional filtering.
     * @summary List idea organizations
     * @param {IdeaOrganizationsApiIdeaOrganizationsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaOrganizationsApi
     */
    public ideaOrganizationsList(requestParameters: IdeaOrganizationsApiIdeaOrganizationsListRequest = {}, options?: RawAxiosRequestConfig) {
        return IdeaOrganizationsApiFp(this.configuration).ideaOrganizationsList(requestParameters.q, requestParameters.emailDomain, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an existing idea organization.
     * @summary Update an idea organization
     * @param {IdeaOrganizationsApiIdeaOrganizationsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaOrganizationsApi
     */
    public ideaOrganizationsUpdate(requestParameters: IdeaOrganizationsApiIdeaOrganizationsUpdateRequest, options?: RawAxiosRequestConfig) {
        return IdeaOrganizationsApiFp(this.configuration).ideaOrganizationsUpdate(requestParameters.id, requestParameters.ideaOrganizationUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

