/* tslint:disable */
/* eslint-disable */
/**
 * Aha! REST API
 * API for interacting with Aha! product management platform.  ## Rate Limiting The API enforces rate limits to ensure fair usage: - **300 requests per minute** per account - **20 requests per second** per account  When rate limits are exceeded, the API returns a `429 Too Many Requests` response with a `retry_after` header indicating when to retry.  ## Authentication The API supports two authentication methods: - **OAuth 2.0**: For web applications and integrations requiring user consent - **API Tokens**: For server-to-server integrations and personal access  ## Request Headers - **User-Agent**: Required header to identify the client application - **Content-Type**: Set to `application/json` for POST/PUT requests - **Authorization**: Bearer token or OAuth access token  ## Response Format All responses are in JSON format. List endpoints include pagination metadata in the `meta.pagination` object.  ## Error Handling The API uses standard HTTP status codes and includes detailed error messages in the response body for debugging. 
 *
 * The version of the OpenAPI document: 1.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id Numeric ID or key of the feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdCustomFieldsPut: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('featuresIdCustomFieldsPut', 'id', id)
            const localVarPath = `/features/{id}/custom_fields`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id Numeric ID or key of the feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdCustomFieldsTagPut: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('featuresIdCustomFieldsTagPut', 'id', id)
            const localVarPath = `/features/{id}/custom_fields/tag`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} releaseId Numeric ID or key of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesReleaseIdFeaturesGet: async (releaseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'releaseId' is not null or undefined
            assertParamExists('releasesReleaseIdFeaturesGet', 'releaseId', releaseId)
            const localVarPath = `/releases/{release_id}/features`
                .replace(`{${"release_id"}}`, encodeURIComponent(String(releaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} releaseId Numeric ID or key of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesReleaseIdFeaturesPost: async (releaseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'releaseId' is not null or undefined
            assertParamExists('releasesReleaseIdFeaturesPost', 'releaseId', releaseId)
            const localVarPath = `/releases/{release_id}/features`
                .replace(`{${"release_id"}}`, encodeURIComponent(String(releaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id Numeric ID or key of the feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresIdCustomFieldsPut(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresIdCustomFieldsPut(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.featuresIdCustomFieldsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id Numeric ID or key of the feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresIdCustomFieldsTagPut(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresIdCustomFieldsTagPut(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.featuresIdCustomFieldsTagPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} releaseId Numeric ID or key of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async releasesReleaseIdFeaturesGet(releaseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.releasesReleaseIdFeaturesGet(releaseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.releasesReleaseIdFeaturesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} releaseId Numeric ID or key of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async releasesReleaseIdFeaturesPost(releaseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.releasesReleaseIdFeaturesPost(releaseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.releasesReleaseIdFeaturesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {DefaultApiFeaturesIdCustomFieldsPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdCustomFieldsPut(requestParameters: DefaultApiFeaturesIdCustomFieldsPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.featuresIdCustomFieldsPut(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFeaturesIdCustomFieldsTagPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdCustomFieldsTagPut(requestParameters: DefaultApiFeaturesIdCustomFieldsTagPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.featuresIdCustomFieldsTagPut(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiReleasesReleaseIdFeaturesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesReleaseIdFeaturesGet(requestParameters: DefaultApiReleasesReleaseIdFeaturesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.releasesReleaseIdFeaturesGet(requestParameters.releaseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiReleasesReleaseIdFeaturesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesReleaseIdFeaturesPost(requestParameters: DefaultApiReleasesReleaseIdFeaturesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.releasesReleaseIdFeaturesPost(requestParameters.releaseId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @param {DefaultApiFeaturesIdCustomFieldsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    featuresIdCustomFieldsPut(requestParameters: DefaultApiFeaturesIdCustomFieldsPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {DefaultApiFeaturesIdCustomFieldsTagPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    featuresIdCustomFieldsTagPut(requestParameters: DefaultApiFeaturesIdCustomFieldsTagPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {DefaultApiReleasesReleaseIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    releasesReleaseIdFeaturesGet(requestParameters: DefaultApiReleasesReleaseIdFeaturesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {DefaultApiReleasesReleaseIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    releasesReleaseIdFeaturesPost(requestParameters: DefaultApiReleasesReleaseIdFeaturesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for featuresIdCustomFieldsPut operation in DefaultApi.
 * @export
 * @interface DefaultApiFeaturesIdCustomFieldsPutRequest
 */
export interface DefaultApiFeaturesIdCustomFieldsPutRequest {
    /**
     * Numeric ID or key of the feature
     * @type {string}
     * @memberof DefaultApiFeaturesIdCustomFieldsPut
     */
    readonly id: string
}

/**
 * Request parameters for featuresIdCustomFieldsTagPut operation in DefaultApi.
 * @export
 * @interface DefaultApiFeaturesIdCustomFieldsTagPutRequest
 */
export interface DefaultApiFeaturesIdCustomFieldsTagPutRequest {
    /**
     * Numeric ID or key of the feature
     * @type {string}
     * @memberof DefaultApiFeaturesIdCustomFieldsTagPut
     */
    readonly id: string
}

/**
 * Request parameters for releasesReleaseIdFeaturesGet operation in DefaultApi.
 * @export
 * @interface DefaultApiReleasesReleaseIdFeaturesGetRequest
 */
export interface DefaultApiReleasesReleaseIdFeaturesGetRequest {
    /**
     * Numeric ID or key of the release
     * @type {string}
     * @memberof DefaultApiReleasesReleaseIdFeaturesGet
     */
    readonly releaseId: string
}

/**
 * Request parameters for releasesReleaseIdFeaturesPost operation in DefaultApi.
 * @export
 * @interface DefaultApiReleasesReleaseIdFeaturesPostRequest
 */
export interface DefaultApiReleasesReleaseIdFeaturesPostRequest {
    /**
     * Numeric ID or key of the release
     * @type {string}
     * @memberof DefaultApiReleasesReleaseIdFeaturesPost
     */
    readonly releaseId: string
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @param {DefaultApiFeaturesIdCustomFieldsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public featuresIdCustomFieldsPut(requestParameters: DefaultApiFeaturesIdCustomFieldsPutRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).featuresIdCustomFieldsPut(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFeaturesIdCustomFieldsTagPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public featuresIdCustomFieldsTagPut(requestParameters: DefaultApiFeaturesIdCustomFieldsTagPutRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).featuresIdCustomFieldsTagPut(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiReleasesReleaseIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public releasesReleaseIdFeaturesGet(requestParameters: DefaultApiReleasesReleaseIdFeaturesGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).releasesReleaseIdFeaturesGet(requestParameters.releaseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiReleasesReleaseIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public releasesReleaseIdFeaturesPost(requestParameters: DefaultApiReleasesReleaseIdFeaturesPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).releasesReleaseIdFeaturesPost(requestParameters.releaseId, options).then((request) => request(this.axios, this.basePath));
    }
}

