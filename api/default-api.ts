/* tslint:disable */
/* eslint-disable */
/**
 * Aha! REST API
 * API for interacting with Aha! product management platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Comment } from '../model';
// @ts-ignore
import type { CommentCreateRequest } from '../model';
// @ts-ignore
import type { Competitor } from '../model';
// @ts-ignore
import type { EpicsEpicIdCommentsGet200Response } from '../model';
// @ts-ignore
import type { User } from '../model';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves details of the specified competitor.
         * @summary Get a specific competitor
         * @param {string} competitorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitorsCompetitorIdGet: async (competitorId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'competitorId' is not null or undefined
            assertParamExists('competitorsCompetitorIdGet', 'competitorId', competitorId)
            const localVarPath = `/competitors/{competitor_id}`
                .replace(`{${"competitor_id"}}`, encodeURIComponent(String(competitorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of comments associated with the specified epic.
         * @summary List comments on an epic
         * @param {string} epicId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        epicsEpicIdCommentsGet: async (epicId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'epicId' is not null or undefined
            assertParamExists('epicsEpicIdCommentsGet', 'epicId', epicId)
            const localVarPath = `/epics/{epic_id}/comments`
                .replace(`{${"epic_id"}}`, encodeURIComponent(String(epicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new comment to the specified feature.
         * @summary Create a comment on a feature
         * @param {string} featureId 
         * @param {CommentCreateRequest} commentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresFeatureIdCommentsPost: async (featureId: string, commentCreateRequest: CommentCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('featuresFeatureIdCommentsPost', 'featureId', featureId)
            // verify required parameter 'commentCreateRequest' is not null or undefined
            assertParamExists('featuresFeatureIdCommentsPost', 'commentCreateRequest', commentCreateRequest)
            const localVarPath = `/features/{feature_id}/comments`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commentCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id Numeric ID or key of the feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdCustomFieldsPut: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('featuresIdCustomFieldsPut', 'id', id)
            const localVarPath = `/features/{id}/custom_fields`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id Numeric ID or key of the feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdCustomFieldsTagPut: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('featuresIdCustomFieldsTagPut', 'id', id)
            const localVarPath = `/features/{id}/custom_fields/tag`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id Numeric ID or key of the feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('featuresIdDelete', 'id', id)
            const localVarPath = `/features/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id Numeric ID or key of the feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('featuresIdGet', 'id', id)
            const localVarPath = `/features/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id Numeric ID or key of the feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdPut: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('featuresIdPut', 'id', id)
            const localVarPath = `/features/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of comments associated with the specified goal.
         * @summary List comments on a goal
         * @param {string} goalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsGoalIdCommentsGet: async (goalId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalId' is not null or undefined
            assertParamExists('goalsGoalIdCommentsGet', 'goalId', goalId)
            const localVarPath = `/goals/{goal_id}/comments`
                .replace(`{${"goal_id"}}`, encodeURIComponent(String(goalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of comments associated with the specified idea.
         * @summary List comments on an idea
         * @param {string} ideaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ideasIdeaIdCommentsGet: async (ideaId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ideaId' is not null or undefined
            assertParamExists('ideasIdeaIdCommentsGet', 'ideaId', ideaId)
            const localVarPath = `/ideas/{idea_id}/comments`
                .replace(`{${"idea_id"}}`, encodeURIComponent(String(ideaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of comments associated with the specified initiative.
         * @summary List comments on an initiative
         * @param {string} initiativeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiativesInitiativeIdCommentsGet: async (initiativeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'initiativeId' is not null or undefined
            assertParamExists('initiativesInitiativeIdCommentsGet', 'initiativeId', initiativeId)
            const localVarPath = `/initiatives/{initiative_id}/comments`
                .replace(`{${"initiative_id"}}`, encodeURIComponent(String(initiativeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of comments associated with the specified product.
         * @summary List comments in a product
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsProductIdCommentsGet: async (productId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('productsProductIdCommentsGet', 'productId', productId)
            const localVarPath = `/products/{product_id}/comments`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of comments associated with the specified release phase.
         * @summary List comments on a release phase
         * @param {string} releasePhaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasePhasesReleasePhaseIdCommentsGet: async (releasePhaseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'releasePhaseId' is not null or undefined
            assertParamExists('releasePhasesReleasePhaseIdCommentsGet', 'releasePhaseId', releasePhaseId)
            const localVarPath = `/release_phases/{release_phase_id}/comments`
                .replace(`{${"release_phase_id"}}`, encodeURIComponent(String(releasePhaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of comments associated with the specified release.
         * @summary List comments on a release
         * @param {string} releaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesReleaseIdCommentsGet: async (releaseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'releaseId' is not null or undefined
            assertParamExists('releasesReleaseIdCommentsGet', 'releaseId', releaseId)
            const localVarPath = `/releases/{release_id}/comments`
                .replace(`{${"release_id"}}`, encodeURIComponent(String(releaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} releaseId Numeric ID or key of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesReleaseIdFeaturesGet: async (releaseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'releaseId' is not null or undefined
            assertParamExists('releasesReleaseIdFeaturesGet', 'releaseId', releaseId)
            const localVarPath = `/releases/{release_id}/features`
                .replace(`{${"release_id"}}`, encodeURIComponent(String(releaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} releaseId Numeric ID or key of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesReleaseIdFeaturesPost: async (releaseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'releaseId' is not null or undefined
            assertParamExists('releasesReleaseIdFeaturesPost', 'releaseId', releaseId)
            const localVarPath = `/releases/{release_id}/features`
                .replace(`{${"release_id"}}`, encodeURIComponent(String(releaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of comments associated with the specified requirement.
         * @summary List comments on a requirement
         * @param {string} requirementId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requirementsRequirementIdCommentsGet: async (requirementId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requirementId' is not null or undefined
            assertParamExists('requirementsRequirementIdCommentsGet', 'requirementId', requirementId)
            const localVarPath = `/requirements/{requirement_id}/comments`
                .replace(`{${"requirement_id"}}`, encodeURIComponent(String(requirementId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of comments associated with the specified to-do.
         * @summary List comments on a to-do
         * @param {string} todoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosTodoIdCommentsGet: async (todoId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'todoId' is not null or undefined
            assertParamExists('todosTodoIdCommentsGet', 'todoId', todoId)
            const localVarPath = `/todos/{todo_id}/comments`
                .replace(`{${"todo_id"}}`, encodeURIComponent(String(todoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a list of users associated with the Aha! account.
         * @summary List users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves details of a specific user by their ID.
         * @summary Get a specific user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdGet', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves details of the specified competitor.
         * @summary Get a specific competitor
         * @param {string} competitorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async competitorsCompetitorIdGet(competitorId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Competitor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.competitorsCompetitorIdGet(competitorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.competitorsCompetitorIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of comments associated with the specified epic.
         * @summary List comments on an epic
         * @param {string} epicId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async epicsEpicIdCommentsGet(epicId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EpicsEpicIdCommentsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.epicsEpicIdCommentsGet(epicId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.epicsEpicIdCommentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Adds a new comment to the specified feature.
         * @summary Create a comment on a feature
         * @param {string} featureId 
         * @param {CommentCreateRequest} commentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresFeatureIdCommentsPost(featureId: string, commentCreateRequest: CommentCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresFeatureIdCommentsPost(featureId, commentCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.featuresFeatureIdCommentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id Numeric ID or key of the feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresIdCustomFieldsPut(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresIdCustomFieldsPut(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.featuresIdCustomFieldsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id Numeric ID or key of the feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresIdCustomFieldsTagPut(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresIdCustomFieldsTagPut(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.featuresIdCustomFieldsTagPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id Numeric ID or key of the feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.featuresIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id Numeric ID or key of the feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.featuresIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id Numeric ID or key of the feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresIdPut(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresIdPut(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.featuresIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of comments associated with the specified goal.
         * @summary List comments on a goal
         * @param {string} goalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async goalsGoalIdCommentsGet(goalId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EpicsEpicIdCommentsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.goalsGoalIdCommentsGet(goalId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.goalsGoalIdCommentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of comments associated with the specified idea.
         * @summary List comments on an idea
         * @param {string} ideaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ideasIdeaIdCommentsGet(ideaId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EpicsEpicIdCommentsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ideasIdeaIdCommentsGet(ideaId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.ideasIdeaIdCommentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of comments associated with the specified initiative.
         * @summary List comments on an initiative
         * @param {string} initiativeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initiativesInitiativeIdCommentsGet(initiativeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EpicsEpicIdCommentsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.initiativesInitiativeIdCommentsGet(initiativeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.initiativesInitiativeIdCommentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of comments associated with the specified product.
         * @summary List comments in a product
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsProductIdCommentsGet(productId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EpicsEpicIdCommentsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsProductIdCommentsGet(productId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.productsProductIdCommentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of comments associated with the specified release phase.
         * @summary List comments on a release phase
         * @param {string} releasePhaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async releasePhasesReleasePhaseIdCommentsGet(releasePhaseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EpicsEpicIdCommentsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.releasePhasesReleasePhaseIdCommentsGet(releasePhaseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.releasePhasesReleasePhaseIdCommentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of comments associated with the specified release.
         * @summary List comments on a release
         * @param {string} releaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async releasesReleaseIdCommentsGet(releaseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EpicsEpicIdCommentsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.releasesReleaseIdCommentsGet(releaseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.releasesReleaseIdCommentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} releaseId Numeric ID or key of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async releasesReleaseIdFeaturesGet(releaseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.releasesReleaseIdFeaturesGet(releaseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.releasesReleaseIdFeaturesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} releaseId Numeric ID or key of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async releasesReleaseIdFeaturesPost(releaseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.releasesReleaseIdFeaturesPost(releaseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.releasesReleaseIdFeaturesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of comments associated with the specified requirement.
         * @summary List comments on a requirement
         * @param {string} requirementId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requirementsRequirementIdCommentsGet(requirementId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EpicsEpicIdCommentsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requirementsRequirementIdCommentsGet(requirementId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.requirementsRequirementIdCommentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of comments associated with the specified to-do.
         * @summary List comments on a to-do
         * @param {string} todoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todosTodoIdCommentsGet(todoId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EpicsEpicIdCommentsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.todosTodoIdCommentsGet(todoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.todosTodoIdCommentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetches a list of users associated with the Aha! account.
         * @summary List users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.usersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves details of a specific user by their ID.
         * @summary Get a specific user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.usersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Retrieves details of the specified competitor.
         * @summary Get a specific competitor
         * @param {DefaultApiCompetitorsCompetitorIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitorsCompetitorIdGet(requestParameters: DefaultApiCompetitorsCompetitorIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Competitor> {
            return localVarFp.competitorsCompetitorIdGet(requestParameters.competitorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of comments associated with the specified epic.
         * @summary List comments on an epic
         * @param {DefaultApiEpicsEpicIdCommentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        epicsEpicIdCommentsGet(requestParameters: DefaultApiEpicsEpicIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response> {
            return localVarFp.epicsEpicIdCommentsGet(requestParameters.epicId, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new comment to the specified feature.
         * @summary Create a comment on a feature
         * @param {DefaultApiFeaturesFeatureIdCommentsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresFeatureIdCommentsPost(requestParameters: DefaultApiFeaturesFeatureIdCommentsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Comment> {
            return localVarFp.featuresFeatureIdCommentsPost(requestParameters.featureId, requestParameters.commentCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFeaturesIdCustomFieldsPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdCustomFieldsPut(requestParameters: DefaultApiFeaturesIdCustomFieldsPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.featuresIdCustomFieldsPut(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFeaturesIdCustomFieldsTagPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdCustomFieldsTagPut(requestParameters: DefaultApiFeaturesIdCustomFieldsTagPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.featuresIdCustomFieldsTagPut(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFeaturesIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdDelete(requestParameters: DefaultApiFeaturesIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.featuresIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFeaturesIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdGet(requestParameters: DefaultApiFeaturesIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.featuresIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFeaturesIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresIdPut(requestParameters: DefaultApiFeaturesIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.featuresIdPut(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of comments associated with the specified goal.
         * @summary List comments on a goal
         * @param {DefaultApiGoalsGoalIdCommentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsGoalIdCommentsGet(requestParameters: DefaultApiGoalsGoalIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response> {
            return localVarFp.goalsGoalIdCommentsGet(requestParameters.goalId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of comments associated with the specified idea.
         * @summary List comments on an idea
         * @param {DefaultApiIdeasIdeaIdCommentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ideasIdeaIdCommentsGet(requestParameters: DefaultApiIdeasIdeaIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response> {
            return localVarFp.ideasIdeaIdCommentsGet(requestParameters.ideaId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of comments associated with the specified initiative.
         * @summary List comments on an initiative
         * @param {DefaultApiInitiativesInitiativeIdCommentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiativesInitiativeIdCommentsGet(requestParameters: DefaultApiInitiativesInitiativeIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response> {
            return localVarFp.initiativesInitiativeIdCommentsGet(requestParameters.initiativeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of comments associated with the specified product.
         * @summary List comments in a product
         * @param {DefaultApiProductsProductIdCommentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsProductIdCommentsGet(requestParameters: DefaultApiProductsProductIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response> {
            return localVarFp.productsProductIdCommentsGet(requestParameters.productId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of comments associated with the specified release phase.
         * @summary List comments on a release phase
         * @param {DefaultApiReleasePhasesReleasePhaseIdCommentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasePhasesReleasePhaseIdCommentsGet(requestParameters: DefaultApiReleasePhasesReleasePhaseIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response> {
            return localVarFp.releasePhasesReleasePhaseIdCommentsGet(requestParameters.releasePhaseId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of comments associated with the specified release.
         * @summary List comments on a release
         * @param {DefaultApiReleasesReleaseIdCommentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesReleaseIdCommentsGet(requestParameters: DefaultApiReleasesReleaseIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response> {
            return localVarFp.releasesReleaseIdCommentsGet(requestParameters.releaseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiReleasesReleaseIdFeaturesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesReleaseIdFeaturesGet(requestParameters: DefaultApiReleasesReleaseIdFeaturesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.releasesReleaseIdFeaturesGet(requestParameters.releaseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiReleasesReleaseIdFeaturesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesReleaseIdFeaturesPost(requestParameters: DefaultApiReleasesReleaseIdFeaturesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.releasesReleaseIdFeaturesPost(requestParameters.releaseId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of comments associated with the specified requirement.
         * @summary List comments on a requirement
         * @param {DefaultApiRequirementsRequirementIdCommentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requirementsRequirementIdCommentsGet(requestParameters: DefaultApiRequirementsRequirementIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response> {
            return localVarFp.requirementsRequirementIdCommentsGet(requestParameters.requirementId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of comments associated with the specified to-do.
         * @summary List comments on a to-do
         * @param {DefaultApiTodosTodoIdCommentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosTodoIdCommentsGet(requestParameters: DefaultApiTodosTodoIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response> {
            return localVarFp.todosTodoIdCommentsGet(requestParameters.todoId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a list of users associated with the Aha! account.
         * @summary List users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.usersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves details of a specific user by their ID.
         * @summary Get a specific user
         * @param {DefaultApiUsersIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet(requestParameters: DefaultApiUsersIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.usersIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Retrieves details of the specified competitor.
     * @summary Get a specific competitor
     * @param {DefaultApiCompetitorsCompetitorIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    competitorsCompetitorIdGet(requestParameters: DefaultApiCompetitorsCompetitorIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Competitor>;

    /**
     * Retrieves a list of comments associated with the specified epic.
     * @summary List comments on an epic
     * @param {DefaultApiEpicsEpicIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    epicsEpicIdCommentsGet(requestParameters: DefaultApiEpicsEpicIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response>;

    /**
     * Adds a new comment to the specified feature.
     * @summary Create a comment on a feature
     * @param {DefaultApiFeaturesFeatureIdCommentsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    featuresFeatureIdCommentsPost(requestParameters: DefaultApiFeaturesFeatureIdCommentsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Comment>;

    /**
     * 
     * @param {DefaultApiFeaturesIdCustomFieldsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    featuresIdCustomFieldsPut(requestParameters: DefaultApiFeaturesIdCustomFieldsPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {DefaultApiFeaturesIdCustomFieldsTagPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    featuresIdCustomFieldsTagPut(requestParameters: DefaultApiFeaturesIdCustomFieldsTagPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {DefaultApiFeaturesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    featuresIdDelete(requestParameters: DefaultApiFeaturesIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {DefaultApiFeaturesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    featuresIdGet(requestParameters: DefaultApiFeaturesIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {DefaultApiFeaturesIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    featuresIdPut(requestParameters: DefaultApiFeaturesIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Retrieves a list of comments associated with the specified goal.
     * @summary List comments on a goal
     * @param {DefaultApiGoalsGoalIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    goalsGoalIdCommentsGet(requestParameters: DefaultApiGoalsGoalIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response>;

    /**
     * Retrieves a list of comments associated with the specified idea.
     * @summary List comments on an idea
     * @param {DefaultApiIdeasIdeaIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    ideasIdeaIdCommentsGet(requestParameters: DefaultApiIdeasIdeaIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response>;

    /**
     * Retrieves a list of comments associated with the specified initiative.
     * @summary List comments on an initiative
     * @param {DefaultApiInitiativesInitiativeIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    initiativesInitiativeIdCommentsGet(requestParameters: DefaultApiInitiativesInitiativeIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response>;

    /**
     * Retrieves a list of comments associated with the specified product.
     * @summary List comments in a product
     * @param {DefaultApiProductsProductIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    productsProductIdCommentsGet(requestParameters: DefaultApiProductsProductIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response>;

    /**
     * Retrieves a list of comments associated with the specified release phase.
     * @summary List comments on a release phase
     * @param {DefaultApiReleasePhasesReleasePhaseIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    releasePhasesReleasePhaseIdCommentsGet(requestParameters: DefaultApiReleasePhasesReleasePhaseIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response>;

    /**
     * Retrieves a list of comments associated with the specified release.
     * @summary List comments on a release
     * @param {DefaultApiReleasesReleaseIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    releasesReleaseIdCommentsGet(requestParameters: DefaultApiReleasesReleaseIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response>;

    /**
     * 
     * @param {DefaultApiReleasesReleaseIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    releasesReleaseIdFeaturesGet(requestParameters: DefaultApiReleasesReleaseIdFeaturesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {DefaultApiReleasesReleaseIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    releasesReleaseIdFeaturesPost(requestParameters: DefaultApiReleasesReleaseIdFeaturesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Retrieves a list of comments associated with the specified requirement.
     * @summary List comments on a requirement
     * @param {DefaultApiRequirementsRequirementIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    requirementsRequirementIdCommentsGet(requestParameters: DefaultApiRequirementsRequirementIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response>;

    /**
     * Retrieves a list of comments associated with the specified to-do.
     * @summary List comments on a to-do
     * @param {DefaultApiTodosTodoIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    todosTodoIdCommentsGet(requestParameters: DefaultApiTodosTodoIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response>;

    /**
     * Fetches a list of users associated with the Aha! account.
     * @summary List users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    usersGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<User>>;

    /**
     * Retrieves details of a specific user by their ID.
     * @summary Get a specific user
     * @param {DefaultApiUsersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    usersIdGet(requestParameters: DefaultApiUsersIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<User>;

}

/**
 * Request parameters for competitorsCompetitorIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiCompetitorsCompetitorIdGetRequest
 */
export interface DefaultApiCompetitorsCompetitorIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiCompetitorsCompetitorIdGet
     */
    readonly competitorId: string
}

/**
 * Request parameters for epicsEpicIdCommentsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiEpicsEpicIdCommentsGetRequest
 */
export interface DefaultApiEpicsEpicIdCommentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiEpicsEpicIdCommentsGet
     */
    readonly epicId: string
}

/**
 * Request parameters for featuresFeatureIdCommentsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiFeaturesFeatureIdCommentsPostRequest
 */
export interface DefaultApiFeaturesFeatureIdCommentsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiFeaturesFeatureIdCommentsPost
     */
    readonly featureId: string

    /**
     * 
     * @type {CommentCreateRequest}
     * @memberof DefaultApiFeaturesFeatureIdCommentsPost
     */
    readonly commentCreateRequest: CommentCreateRequest
}

/**
 * Request parameters for featuresIdCustomFieldsPut operation in DefaultApi.
 * @export
 * @interface DefaultApiFeaturesIdCustomFieldsPutRequest
 */
export interface DefaultApiFeaturesIdCustomFieldsPutRequest {
    /**
     * Numeric ID or key of the feature
     * @type {string}
     * @memberof DefaultApiFeaturesIdCustomFieldsPut
     */
    readonly id: string
}

/**
 * Request parameters for featuresIdCustomFieldsTagPut operation in DefaultApi.
 * @export
 * @interface DefaultApiFeaturesIdCustomFieldsTagPutRequest
 */
export interface DefaultApiFeaturesIdCustomFieldsTagPutRequest {
    /**
     * Numeric ID or key of the feature
     * @type {string}
     * @memberof DefaultApiFeaturesIdCustomFieldsTagPut
     */
    readonly id: string
}

/**
 * Request parameters for featuresIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiFeaturesIdDeleteRequest
 */
export interface DefaultApiFeaturesIdDeleteRequest {
    /**
     * Numeric ID or key of the feature
     * @type {string}
     * @memberof DefaultApiFeaturesIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for featuresIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiFeaturesIdGetRequest
 */
export interface DefaultApiFeaturesIdGetRequest {
    /**
     * Numeric ID or key of the feature
     * @type {string}
     * @memberof DefaultApiFeaturesIdGet
     */
    readonly id: string
}

/**
 * Request parameters for featuresIdPut operation in DefaultApi.
 * @export
 * @interface DefaultApiFeaturesIdPutRequest
 */
export interface DefaultApiFeaturesIdPutRequest {
    /**
     * Numeric ID or key of the feature
     * @type {string}
     * @memberof DefaultApiFeaturesIdPut
     */
    readonly id: string
}

/**
 * Request parameters for goalsGoalIdCommentsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiGoalsGoalIdCommentsGetRequest
 */
export interface DefaultApiGoalsGoalIdCommentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGoalsGoalIdCommentsGet
     */
    readonly goalId: string
}

/**
 * Request parameters for ideasIdeaIdCommentsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiIdeasIdeaIdCommentsGetRequest
 */
export interface DefaultApiIdeasIdeaIdCommentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiIdeasIdeaIdCommentsGet
     */
    readonly ideaId: string
}

/**
 * Request parameters for initiativesInitiativeIdCommentsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiInitiativesInitiativeIdCommentsGetRequest
 */
export interface DefaultApiInitiativesInitiativeIdCommentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiInitiativesInitiativeIdCommentsGet
     */
    readonly initiativeId: string
}

/**
 * Request parameters for productsProductIdCommentsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiProductsProductIdCommentsGetRequest
 */
export interface DefaultApiProductsProductIdCommentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiProductsProductIdCommentsGet
     */
    readonly productId: string
}

/**
 * Request parameters for releasePhasesReleasePhaseIdCommentsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiReleasePhasesReleasePhaseIdCommentsGetRequest
 */
export interface DefaultApiReleasePhasesReleasePhaseIdCommentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiReleasePhasesReleasePhaseIdCommentsGet
     */
    readonly releasePhaseId: string
}

/**
 * Request parameters for releasesReleaseIdCommentsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiReleasesReleaseIdCommentsGetRequest
 */
export interface DefaultApiReleasesReleaseIdCommentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiReleasesReleaseIdCommentsGet
     */
    readonly releaseId: string
}

/**
 * Request parameters for releasesReleaseIdFeaturesGet operation in DefaultApi.
 * @export
 * @interface DefaultApiReleasesReleaseIdFeaturesGetRequest
 */
export interface DefaultApiReleasesReleaseIdFeaturesGetRequest {
    /**
     * Numeric ID or key of the release
     * @type {string}
     * @memberof DefaultApiReleasesReleaseIdFeaturesGet
     */
    readonly releaseId: string
}

/**
 * Request parameters for releasesReleaseIdFeaturesPost operation in DefaultApi.
 * @export
 * @interface DefaultApiReleasesReleaseIdFeaturesPostRequest
 */
export interface DefaultApiReleasesReleaseIdFeaturesPostRequest {
    /**
     * Numeric ID or key of the release
     * @type {string}
     * @memberof DefaultApiReleasesReleaseIdFeaturesPost
     */
    readonly releaseId: string
}

/**
 * Request parameters for requirementsRequirementIdCommentsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiRequirementsRequirementIdCommentsGetRequest
 */
export interface DefaultApiRequirementsRequirementIdCommentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiRequirementsRequirementIdCommentsGet
     */
    readonly requirementId: string
}

/**
 * Request parameters for todosTodoIdCommentsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiTodosTodoIdCommentsGetRequest
 */
export interface DefaultApiTodosTodoIdCommentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiTodosTodoIdCommentsGet
     */
    readonly todoId: string
}

/**
 * Request parameters for usersIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiUsersIdGetRequest
 */
export interface DefaultApiUsersIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiUsersIdGet
     */
    readonly id: string
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Retrieves details of the specified competitor.
     * @summary Get a specific competitor
     * @param {DefaultApiCompetitorsCompetitorIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public competitorsCompetitorIdGet(requestParameters: DefaultApiCompetitorsCompetitorIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).competitorsCompetitorIdGet(requestParameters.competitorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of comments associated with the specified epic.
     * @summary List comments on an epic
     * @param {DefaultApiEpicsEpicIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public epicsEpicIdCommentsGet(requestParameters: DefaultApiEpicsEpicIdCommentsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).epicsEpicIdCommentsGet(requestParameters.epicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new comment to the specified feature.
     * @summary Create a comment on a feature
     * @param {DefaultApiFeaturesFeatureIdCommentsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public featuresFeatureIdCommentsPost(requestParameters: DefaultApiFeaturesFeatureIdCommentsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).featuresFeatureIdCommentsPost(requestParameters.featureId, requestParameters.commentCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFeaturesIdCustomFieldsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public featuresIdCustomFieldsPut(requestParameters: DefaultApiFeaturesIdCustomFieldsPutRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).featuresIdCustomFieldsPut(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFeaturesIdCustomFieldsTagPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public featuresIdCustomFieldsTagPut(requestParameters: DefaultApiFeaturesIdCustomFieldsTagPutRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).featuresIdCustomFieldsTagPut(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFeaturesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public featuresIdDelete(requestParameters: DefaultApiFeaturesIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).featuresIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFeaturesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public featuresIdGet(requestParameters: DefaultApiFeaturesIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).featuresIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFeaturesIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public featuresIdPut(requestParameters: DefaultApiFeaturesIdPutRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).featuresIdPut(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of comments associated with the specified goal.
     * @summary List comments on a goal
     * @param {DefaultApiGoalsGoalIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public goalsGoalIdCommentsGet(requestParameters: DefaultApiGoalsGoalIdCommentsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).goalsGoalIdCommentsGet(requestParameters.goalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of comments associated with the specified idea.
     * @summary List comments on an idea
     * @param {DefaultApiIdeasIdeaIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public ideasIdeaIdCommentsGet(requestParameters: DefaultApiIdeasIdeaIdCommentsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).ideasIdeaIdCommentsGet(requestParameters.ideaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of comments associated with the specified initiative.
     * @summary List comments on an initiative
     * @param {DefaultApiInitiativesInitiativeIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public initiativesInitiativeIdCommentsGet(requestParameters: DefaultApiInitiativesInitiativeIdCommentsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).initiativesInitiativeIdCommentsGet(requestParameters.initiativeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of comments associated with the specified product.
     * @summary List comments in a product
     * @param {DefaultApiProductsProductIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public productsProductIdCommentsGet(requestParameters: DefaultApiProductsProductIdCommentsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).productsProductIdCommentsGet(requestParameters.productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of comments associated with the specified release phase.
     * @summary List comments on a release phase
     * @param {DefaultApiReleasePhasesReleasePhaseIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public releasePhasesReleasePhaseIdCommentsGet(requestParameters: DefaultApiReleasePhasesReleasePhaseIdCommentsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).releasePhasesReleasePhaseIdCommentsGet(requestParameters.releasePhaseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of comments associated with the specified release.
     * @summary List comments on a release
     * @param {DefaultApiReleasesReleaseIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public releasesReleaseIdCommentsGet(requestParameters: DefaultApiReleasesReleaseIdCommentsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).releasesReleaseIdCommentsGet(requestParameters.releaseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiReleasesReleaseIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public releasesReleaseIdFeaturesGet(requestParameters: DefaultApiReleasesReleaseIdFeaturesGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).releasesReleaseIdFeaturesGet(requestParameters.releaseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiReleasesReleaseIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public releasesReleaseIdFeaturesPost(requestParameters: DefaultApiReleasesReleaseIdFeaturesPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).releasesReleaseIdFeaturesPost(requestParameters.releaseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of comments associated with the specified requirement.
     * @summary List comments on a requirement
     * @param {DefaultApiRequirementsRequirementIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public requirementsRequirementIdCommentsGet(requestParameters: DefaultApiRequirementsRequirementIdCommentsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).requirementsRequirementIdCommentsGet(requestParameters.requirementId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of comments associated with the specified to-do.
     * @summary List comments on a to-do
     * @param {DefaultApiTodosTodoIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public todosTodoIdCommentsGet(requestParameters: DefaultApiTodosTodoIdCommentsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).todosTodoIdCommentsGet(requestParameters.todoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches a list of users associated with the Aha! account.
     * @summary List users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves details of a specific user by their ID.
     * @summary Get a specific user
     * @param {DefaultApiUsersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersIdGet(requestParameters: DefaultApiUsersIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}

