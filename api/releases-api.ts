/* tslint:disable */
/* eslint-disable */
/**
 * Aha! REST API
 * API for interacting with Aha! product management platform.  ## Rate Limiting The API enforces rate limits to ensure fair usage: - **300 requests per minute** per account - **20 requests per second** per account  When rate limits are exceeded, the API returns a `429 Too Many Requests` response with a `retry_after` header indicating when to retry.  ## Authentication The API supports two authentication methods: - **OAuth 2.0**: For web applications and integrations requiring user consent - **API Tokens**: For server-to-server integrations and personal access  ## Request Headers - **User-Agent**: Required header to identify the client application - **Content-Type**: Set to `application/json` for POST/PUT requests - **Authorization**: Bearer token or OAuth access token  ## Response Format All responses are in JSON format. List endpoints include pagination metadata in the `meta.pagination` object.  ## Error Handling The API uses standard HTTP status codes and includes detailed error messages in the response body for debugging. 
 *
 * The version of the OpenAPI document: 1.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommentsGetEpic200Response } from '../model';
// @ts-ignore
import type { ReleaseCreateRequest } from '../model';
// @ts-ignore
import type { ReleaseGetResponse } from '../model';
// @ts-ignore
import type { ReleaseUpdateRequest } from '../model';
// @ts-ignore
import type { ReleasesListResponse } from '../model';
/**
 * ReleasesApi - axios parameter creator
 * @export
 */
export const ReleasesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a list of comments associated with the specified release.
         * @summary List comments on a release
         * @param {string} releaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGetRelease: async (releaseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'releaseId' is not null or undefined
            assertParamExists('commentsGetRelease', 'releaseId', releaseId)
            const localVarPath = `/releases/{release_id}/comments`
                .replace(`{${"release_id"}}`, encodeURIComponent(String(releaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all releases for a specific product.
         * @summary List releases for a product
         * @param {string} productId Numeric ID or key of the product
         * @param {string} [q] Search term to match against release name.
         * @param {string} [updatedSince] UTC timestamp (in ISO8601 format). If provided, only releases updated after the timestamp will be returned.
         * @param {string} [status] Status filter for releases.
         * @param {boolean} [parkingLot] When true, returns only parking lot releases.
         * @param {number} [page] Page number for pagination.
         * @param {number} [perPage] Number of releases per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productReleasesList: async (productId: string, q?: string, updatedSince?: string, status?: string, parkingLot?: boolean, page?: number, perPage?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('productReleasesList', 'productId', productId)
            const localVarPath = `/products/{product_id}/releases`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (updatedSince !== undefined) {
                localVarQueryParameter['updated_since'] = (updatedSince as any instanceof Date) ?
                    (updatedSince as any).toISOString() :
                    updatedSince;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (parkingLot !== undefined) {
                localVarQueryParameter['parking_lot'] = parkingLot;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new release for the specified product.
         * @summary Create a release
         * @param {string} productId Numeric ID or key of the product
         * @param {ReleaseCreateRequest} releaseCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesCreate: async (productId: string, releaseCreateRequest: ReleaseCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('releasesCreate', 'productId', productId)
            // verify required parameter 'releaseCreateRequest' is not null or undefined
            assertParamExists('releasesCreate', 'releaseCreateRequest', releaseCreateRequest)
            const localVarPath = `/products/{product_id}/releases`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(releaseCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a specific release by its ID or reference number.
         * @summary Delete a release
         * @param {string} id Numeric ID or reference number of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('releasesDelete', 'id', id)
            const localVarPath = `/releases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a specific release by its ID or reference number.
         * @summary Get a release
         * @param {string} id Numeric ID or reference number of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('releasesGet', 'id', id)
            const localVarPath = `/releases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all releases in the account.
         * @summary List releases
         * @param {number} [page] Page number for pagination (starts at 1)
         * @param {number} [perPage] Number of items per page (max 200)
         * @param {string} [fields] Comma-separated list of fields to include in response for customization
         * @param {string} [q] Search term to match against release name.
         * @param {string} [updatedSince] UTC timestamp (in ISO8601 format). If provided, only releases updated after the timestamp will be returned.
         * @param {string} [assignedToUser] ID or email address of a user. If provided, returns only releases assigned to that user.
         * @param {string} [status] Status filter for releases.
         * @param {boolean} [parkingLot] When true, returns only parking lot releases.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesList: async (page?: number, perPage?: number, fields?: string, q?: string, updatedSince?: string, assignedToUser?: string, status?: string, parkingLot?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/releases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (updatedSince !== undefined) {
                localVarQueryParameter['updated_since'] = (updatedSince as any instanceof Date) ?
                    (updatedSince as any).toISOString() :
                    updatedSince;
            }

            if (assignedToUser !== undefined) {
                localVarQueryParameter['assigned_to_user'] = assignedToUser;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (parkingLot !== undefined) {
                localVarQueryParameter['parking_lot'] = parkingLot;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a specific release by its ID or reference number.
         * @summary Update a release
         * @param {string} id Numeric ID or reference number of the release
         * @param {ReleaseUpdateRequest} releaseUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesUpdate: async (id: string, releaseUpdateRequest: ReleaseUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('releasesUpdate', 'id', id)
            // verify required parameter 'releaseUpdateRequest' is not null or undefined
            assertParamExists('releasesUpdate', 'releaseUpdateRequest', releaseUpdateRequest)
            const localVarPath = `/releases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(releaseUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReleasesApi - functional programming interface
 * @export
 */
export const ReleasesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReleasesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a list of comments associated with the specified release.
         * @summary List comments on a release
         * @param {string} releaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsGetRelease(releaseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentsGetEpic200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsGetRelease(releaseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReleasesApi.commentsGetRelease']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of all releases for a specific product.
         * @summary List releases for a product
         * @param {string} productId Numeric ID or key of the product
         * @param {string} [q] Search term to match against release name.
         * @param {string} [updatedSince] UTC timestamp (in ISO8601 format). If provided, only releases updated after the timestamp will be returned.
         * @param {string} [status] Status filter for releases.
         * @param {boolean} [parkingLot] When true, returns only parking lot releases.
         * @param {number} [page] Page number for pagination.
         * @param {number} [perPage] Number of releases per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productReleasesList(productId: string, q?: string, updatedSince?: string, status?: string, parkingLot?: boolean, page?: number, perPage?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReleasesListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productReleasesList(productId, q, updatedSince, status, parkingLot, page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReleasesApi.productReleasesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new release for the specified product.
         * @summary Create a release
         * @param {string} productId Numeric ID or key of the product
         * @param {ReleaseCreateRequest} releaseCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async releasesCreate(productId: string, releaseCreateRequest: ReleaseCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReleaseGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.releasesCreate(productId, releaseCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReleasesApi.releasesCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes a specific release by its ID or reference number.
         * @summary Delete a release
         * @param {string} id Numeric ID or reference number of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async releasesDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.releasesDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReleasesApi.releasesDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a specific release by its ID or reference number.
         * @summary Get a release
         * @param {string} id Numeric ID or reference number of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async releasesGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReleaseGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.releasesGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReleasesApi.releasesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of all releases in the account.
         * @summary List releases
         * @param {number} [page] Page number for pagination (starts at 1)
         * @param {number} [perPage] Number of items per page (max 200)
         * @param {string} [fields] Comma-separated list of fields to include in response for customization
         * @param {string} [q] Search term to match against release name.
         * @param {string} [updatedSince] UTC timestamp (in ISO8601 format). If provided, only releases updated after the timestamp will be returned.
         * @param {string} [assignedToUser] ID or email address of a user. If provided, returns only releases assigned to that user.
         * @param {string} [status] Status filter for releases.
         * @param {boolean} [parkingLot] When true, returns only parking lot releases.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async releasesList(page?: number, perPage?: number, fields?: string, q?: string, updatedSince?: string, assignedToUser?: string, status?: string, parkingLot?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReleasesListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.releasesList(page, perPage, fields, q, updatedSince, assignedToUser, status, parkingLot, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReleasesApi.releasesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates a specific release by its ID or reference number.
         * @summary Update a release
         * @param {string} id Numeric ID or reference number of the release
         * @param {ReleaseUpdateRequest} releaseUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async releasesUpdate(id: string, releaseUpdateRequest: ReleaseUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReleaseGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.releasesUpdate(id, releaseUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReleasesApi.releasesUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ReleasesApi - factory interface
 * @export
 */
export const ReleasesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReleasesApiFp(configuration)
    return {
        /**
         * Retrieves a list of comments associated with the specified release.
         * @summary List comments on a release
         * @param {ReleasesApiCommentsGetReleaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGetRelease(requestParameters: ReleasesApiCommentsGetReleaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentsGetEpic200Response> {
            return localVarFp.commentsGetRelease(requestParameters.releaseId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all releases for a specific product.
         * @summary List releases for a product
         * @param {ReleasesApiProductReleasesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productReleasesList(requestParameters: ReleasesApiProductReleasesListRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReleasesListResponse> {
            return localVarFp.productReleasesList(requestParameters.productId, requestParameters.q, requestParameters.updatedSince, requestParameters.status, requestParameters.parkingLot, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new release for the specified product.
         * @summary Create a release
         * @param {ReleasesApiReleasesCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesCreate(requestParameters: ReleasesApiReleasesCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReleaseGetResponse> {
            return localVarFp.releasesCreate(requestParameters.productId, requestParameters.releaseCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a specific release by its ID or reference number.
         * @summary Delete a release
         * @param {ReleasesApiReleasesDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesDelete(requestParameters: ReleasesApiReleasesDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.releasesDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a specific release by its ID or reference number.
         * @summary Get a release
         * @param {ReleasesApiReleasesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesGet(requestParameters: ReleasesApiReleasesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReleaseGetResponse> {
            return localVarFp.releasesGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all releases in the account.
         * @summary List releases
         * @param {ReleasesApiReleasesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesList(requestParameters: ReleasesApiReleasesListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ReleasesListResponse> {
            return localVarFp.releasesList(requestParameters.page, requestParameters.perPage, requestParameters.fields, requestParameters.q, requestParameters.updatedSince, requestParameters.assignedToUser, requestParameters.status, requestParameters.parkingLot, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a specific release by its ID or reference number.
         * @summary Update a release
         * @param {ReleasesApiReleasesUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasesUpdate(requestParameters: ReleasesApiReleasesUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReleaseGetResponse> {
            return localVarFp.releasesUpdate(requestParameters.id, requestParameters.releaseUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReleasesApi - interface
 * @export
 * @interface ReleasesApi
 */
export interface ReleasesApiInterface {
    /**
     * Retrieves a list of comments associated with the specified release.
     * @summary List comments on a release
     * @param {ReleasesApiCommentsGetReleaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleasesApiInterface
     */
    commentsGetRelease(requestParameters: ReleasesApiCommentsGetReleaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentsGetEpic200Response>;

    /**
     * Retrieves a list of all releases for a specific product.
     * @summary List releases for a product
     * @param {ReleasesApiProductReleasesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleasesApiInterface
     */
    productReleasesList(requestParameters: ReleasesApiProductReleasesListRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReleasesListResponse>;

    /**
     * Creates a new release for the specified product.
     * @summary Create a release
     * @param {ReleasesApiReleasesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleasesApiInterface
     */
    releasesCreate(requestParameters: ReleasesApiReleasesCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReleaseGetResponse>;

    /**
     * Deletes a specific release by its ID or reference number.
     * @summary Delete a release
     * @param {ReleasesApiReleasesDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleasesApiInterface
     */
    releasesDelete(requestParameters: ReleasesApiReleasesDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Retrieves a specific release by its ID or reference number.
     * @summary Get a release
     * @param {ReleasesApiReleasesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleasesApiInterface
     */
    releasesGet(requestParameters: ReleasesApiReleasesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReleaseGetResponse>;

    /**
     * Retrieves a list of all releases in the account.
     * @summary List releases
     * @param {ReleasesApiReleasesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleasesApiInterface
     */
    releasesList(requestParameters?: ReleasesApiReleasesListRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReleasesListResponse>;

    /**
     * Updates a specific release by its ID or reference number.
     * @summary Update a release
     * @param {ReleasesApiReleasesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleasesApiInterface
     */
    releasesUpdate(requestParameters: ReleasesApiReleasesUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReleaseGetResponse>;

}

/**
 * Request parameters for commentsGetRelease operation in ReleasesApi.
 * @export
 * @interface ReleasesApiCommentsGetReleaseRequest
 */
export interface ReleasesApiCommentsGetReleaseRequest {
    /**
     * 
     * @type {string}
     * @memberof ReleasesApiCommentsGetRelease
     */
    readonly releaseId: string
}

/**
 * Request parameters for productReleasesList operation in ReleasesApi.
 * @export
 * @interface ReleasesApiProductReleasesListRequest
 */
export interface ReleasesApiProductReleasesListRequest {
    /**
     * Numeric ID or key of the product
     * @type {string}
     * @memberof ReleasesApiProductReleasesList
     */
    readonly productId: string

    /**
     * Search term to match against release name.
     * @type {string}
     * @memberof ReleasesApiProductReleasesList
     */
    readonly q?: string

    /**
     * UTC timestamp (in ISO8601 format). If provided, only releases updated after the timestamp will be returned.
     * @type {string}
     * @memberof ReleasesApiProductReleasesList
     */
    readonly updatedSince?: string

    /**
     * Status filter for releases.
     * @type {string}
     * @memberof ReleasesApiProductReleasesList
     */
    readonly status?: string

    /**
     * When true, returns only parking lot releases.
     * @type {boolean}
     * @memberof ReleasesApiProductReleasesList
     */
    readonly parkingLot?: boolean

    /**
     * Page number for pagination.
     * @type {number}
     * @memberof ReleasesApiProductReleasesList
     */
    readonly page?: number

    /**
     * Number of releases per page.
     * @type {number}
     * @memberof ReleasesApiProductReleasesList
     */
    readonly perPage?: number
}

/**
 * Request parameters for releasesCreate operation in ReleasesApi.
 * @export
 * @interface ReleasesApiReleasesCreateRequest
 */
export interface ReleasesApiReleasesCreateRequest {
    /**
     * Numeric ID or key of the product
     * @type {string}
     * @memberof ReleasesApiReleasesCreate
     */
    readonly productId: string

    /**
     * 
     * @type {ReleaseCreateRequest}
     * @memberof ReleasesApiReleasesCreate
     */
    readonly releaseCreateRequest: ReleaseCreateRequest
}

/**
 * Request parameters for releasesDelete operation in ReleasesApi.
 * @export
 * @interface ReleasesApiReleasesDeleteRequest
 */
export interface ReleasesApiReleasesDeleteRequest {
    /**
     * Numeric ID or reference number of the release
     * @type {string}
     * @memberof ReleasesApiReleasesDelete
     */
    readonly id: string
}

/**
 * Request parameters for releasesGet operation in ReleasesApi.
 * @export
 * @interface ReleasesApiReleasesGetRequest
 */
export interface ReleasesApiReleasesGetRequest {
    /**
     * Numeric ID or reference number of the release
     * @type {string}
     * @memberof ReleasesApiReleasesGet
     */
    readonly id: string
}

/**
 * Request parameters for releasesList operation in ReleasesApi.
 * @export
 * @interface ReleasesApiReleasesListRequest
 */
export interface ReleasesApiReleasesListRequest {
    /**
     * Page number for pagination (starts at 1)
     * @type {number}
     * @memberof ReleasesApiReleasesList
     */
    readonly page?: number

    /**
     * Number of items per page (max 200)
     * @type {number}
     * @memberof ReleasesApiReleasesList
     */
    readonly perPage?: number

    /**
     * Comma-separated list of fields to include in response for customization
     * @type {string}
     * @memberof ReleasesApiReleasesList
     */
    readonly fields?: string

    /**
     * Search term to match against release name.
     * @type {string}
     * @memberof ReleasesApiReleasesList
     */
    readonly q?: string

    /**
     * UTC timestamp (in ISO8601 format). If provided, only releases updated after the timestamp will be returned.
     * @type {string}
     * @memberof ReleasesApiReleasesList
     */
    readonly updatedSince?: string

    /**
     * ID or email address of a user. If provided, returns only releases assigned to that user.
     * @type {string}
     * @memberof ReleasesApiReleasesList
     */
    readonly assignedToUser?: string

    /**
     * Status filter for releases.
     * @type {string}
     * @memberof ReleasesApiReleasesList
     */
    readonly status?: string

    /**
     * When true, returns only parking lot releases.
     * @type {boolean}
     * @memberof ReleasesApiReleasesList
     */
    readonly parkingLot?: boolean
}

/**
 * Request parameters for releasesUpdate operation in ReleasesApi.
 * @export
 * @interface ReleasesApiReleasesUpdateRequest
 */
export interface ReleasesApiReleasesUpdateRequest {
    /**
     * Numeric ID or reference number of the release
     * @type {string}
     * @memberof ReleasesApiReleasesUpdate
     */
    readonly id: string

    /**
     * 
     * @type {ReleaseUpdateRequest}
     * @memberof ReleasesApiReleasesUpdate
     */
    readonly releaseUpdateRequest: ReleaseUpdateRequest
}

/**
 * ReleasesApi - object-oriented interface
 * @export
 * @class ReleasesApi
 * @extends {BaseAPI}
 */
export class ReleasesApi extends BaseAPI implements ReleasesApiInterface {
    /**
     * Retrieves a list of comments associated with the specified release.
     * @summary List comments on a release
     * @param {ReleasesApiCommentsGetReleaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleasesApi
     */
    public commentsGetRelease(requestParameters: ReleasesApiCommentsGetReleaseRequest, options?: RawAxiosRequestConfig) {
        return ReleasesApiFp(this.configuration).commentsGetRelease(requestParameters.releaseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of all releases for a specific product.
     * @summary List releases for a product
     * @param {ReleasesApiProductReleasesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleasesApi
     */
    public productReleasesList(requestParameters: ReleasesApiProductReleasesListRequest, options?: RawAxiosRequestConfig) {
        return ReleasesApiFp(this.configuration).productReleasesList(requestParameters.productId, requestParameters.q, requestParameters.updatedSince, requestParameters.status, requestParameters.parkingLot, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new release for the specified product.
     * @summary Create a release
     * @param {ReleasesApiReleasesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleasesApi
     */
    public releasesCreate(requestParameters: ReleasesApiReleasesCreateRequest, options?: RawAxiosRequestConfig) {
        return ReleasesApiFp(this.configuration).releasesCreate(requestParameters.productId, requestParameters.releaseCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a specific release by its ID or reference number.
     * @summary Delete a release
     * @param {ReleasesApiReleasesDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleasesApi
     */
    public releasesDelete(requestParameters: ReleasesApiReleasesDeleteRequest, options?: RawAxiosRequestConfig) {
        return ReleasesApiFp(this.configuration).releasesDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a specific release by its ID or reference number.
     * @summary Get a release
     * @param {ReleasesApiReleasesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleasesApi
     */
    public releasesGet(requestParameters: ReleasesApiReleasesGetRequest, options?: RawAxiosRequestConfig) {
        return ReleasesApiFp(this.configuration).releasesGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of all releases in the account.
     * @summary List releases
     * @param {ReleasesApiReleasesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleasesApi
     */
    public releasesList(requestParameters: ReleasesApiReleasesListRequest = {}, options?: RawAxiosRequestConfig) {
        return ReleasesApiFp(this.configuration).releasesList(requestParameters.page, requestParameters.perPage, requestParameters.fields, requestParameters.q, requestParameters.updatedSince, requestParameters.assignedToUser, requestParameters.status, requestParameters.parkingLot, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a specific release by its ID or reference number.
     * @summary Update a release
     * @param {ReleasesApiReleasesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleasesApi
     */
    public releasesUpdate(requestParameters: ReleasesApiReleasesUpdateRequest, options?: RawAxiosRequestConfig) {
        return ReleasesApiFp(this.configuration).releasesUpdate(requestParameters.id, requestParameters.releaseUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

