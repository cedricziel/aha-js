/* tslint:disable */
/* eslint-disable */
/**
 * Aha! REST API
 * API for interacting with Aha! product management platform.  ## Rate Limiting The API enforces rate limits to ensure fair usage: - **300 requests per minute** per account - **20 requests per second** per account  When rate limits are exceeded, the API returns a `429 Too Many Requests` response with a `retry_after` header indicating when to retry.  ## Authentication The API supports two authentication methods: - **OAuth 2.0**: For web applications and integrations requiring user consent - **API Tokens**: For server-to-server integrations and personal access  ## Request Headers - **User-Agent**: Required header to identify the client application - **Content-Type**: Set to `application/json` for POST/PUT requests - **Authorization**: Bearer token or OAuth access token  ## Response Format All responses are in JSON format. List endpoints include pagination metadata in the `meta.pagination` object.  ## Error Handling The API uses standard HTTP status codes and includes detailed error messages in the response body for debugging. 
 *
 * The version of the OpenAPI document: 1.0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommentsGetEpic200Response } from '../model';
// @ts-ignore
import type { EpicsList200Response } from '../model';
// @ts-ignore
import type { GoalCreateRequest } from '../model';
// @ts-ignore
import type { GoalGetResponse } from '../model';
// @ts-ignore
import type { GoalProgressUpdateRequest } from '../model';
// @ts-ignore
import type { GoalUpdateRequest } from '../model';
// @ts-ignore
import type { GoalsListResponse } from '../model';
/**
 * GoalsApi - axios parameter creator
 */
export const GoalsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a list of comments associated with the specified goal.
         * @summary List comments on a goal
         * @param {string} goalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGetGoal: async (goalId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalId' is not null or undefined
            assertParamExists('commentsGetGoal', 'goalId', goalId)
            const localVarPath = `/goals/{goal_id}/comments`
                .replace(`{${"goal_id"}}`, encodeURIComponent(String(goalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of epics associated with the specified goal.
         * @summary List epics associated with a goal
         * @param {string} goalId Numeric ID or key of the goal
         * @param {string} [q] Search term to match against epic name
         * @param {string} [updatedSince] UTC timestamp for filtering recently updated epics
         * @param {string} [tag] String tag to filter epics
         * @param {string} [assignedToUser] User ID or email to filter by assignee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        epicsListByGoal: async (goalId: string, q?: string, updatedSince?: string, tag?: string, assignedToUser?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalId' is not null or undefined
            assertParamExists('epicsListByGoal', 'goalId', goalId)
            const localVarPath = `/goals/{goal_id}/epics`
                .replace(`{${"goal_id"}}`, encodeURIComponent(String(goalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (updatedSince !== undefined) {
                localVarQueryParameter['updated_since'] = (updatedSince as any instanceof Date) ?
                    (updatedSince as any).toISOString() :
                    updatedSince;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (assignedToUser !== undefined) {
                localVarQueryParameter['assigned_to_user'] = assignedToUser;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new goal in the account.
         * @summary Create a goal
         * @param {GoalCreateRequest} goalCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsCreate: async (goalCreateRequest: GoalCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalCreateRequest' is not null or undefined
            assertParamExists('goalsCreate', 'goalCreateRequest', goalCreateRequest)
            const localVarPath = `/goals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(goalCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a specific goal by its ID or reference number.
         * @summary Delete a goal
         * @param {string} id Numeric ID or reference number of the goal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('goalsDelete', 'id', id)
            const localVarPath = `/goals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a specific goal by its ID or reference number.
         * @summary Get a goal
         * @param {string} id Numeric ID or reference number of the goal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('goalsGet', 'id', id)
            const localVarPath = `/goals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all goals in the account.
         * @summary List goals
         * @param {number} [page] Page number for pagination (starts at 1)
         * @param {number} [perPage] Number of items per page (max 200)
         * @param {string} [fields] Comma-separated list of fields to include in response for customization
         * @param {string} [q] Search term to match against goal name.
         * @param {string} [updatedSince] UTC timestamp (in ISO8601 format). If provided, only goals updated after the timestamp will be returned.
         * @param {string} [assignedToUser] ID or email address of a user. If provided, returns only goals assigned to that user.
         * @param {string} [status] Status filter for goals.
         * @param {string} [startDateAfter] Filter goals with start date after this date.
         * @param {string} [endDateBefore] Filter goals with end date before this date.
         * @param {number} [progressMin] Filter goals with progress greater than or equal to this value.
         * @param {number} [progressMax] Filter goals with progress less than or equal to this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsList: async (page?: number, perPage?: number, fields?: string, q?: string, updatedSince?: string, assignedToUser?: string, status?: string, startDateAfter?: string, endDateBefore?: string, progressMin?: number, progressMax?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/goals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (updatedSince !== undefined) {
                localVarQueryParameter['updated_since'] = (updatedSince as any instanceof Date) ?
                    (updatedSince as any).toISOString() :
                    updatedSince;
            }

            if (assignedToUser !== undefined) {
                localVarQueryParameter['assigned_to_user'] = assignedToUser;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (startDateAfter !== undefined) {
                localVarQueryParameter['start_date_after'] = (startDateAfter as any instanceof Date) ?
                    (startDateAfter as any).toISOString().substring(0,10) :
                    startDateAfter;
            }

            if (endDateBefore !== undefined) {
                localVarQueryParameter['end_date_before'] = (endDateBefore as any instanceof Date) ?
                    (endDateBefore as any).toISOString().substring(0,10) :
                    endDateBefore;
            }

            if (progressMin !== undefined) {
                localVarQueryParameter['progress_min'] = progressMin;
            }

            if (progressMax !== undefined) {
                localVarQueryParameter['progress_max'] = progressMax;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a specific goal by its ID or reference number.
         * @summary Update a goal
         * @param {string} id Numeric ID or reference number of the goal
         * @param {GoalUpdateRequest} goalUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsUpdate: async (id: string, goalUpdateRequest: GoalUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('goalsUpdate', 'id', id)
            // verify required parameter 'goalUpdateRequest' is not null or undefined
            assertParamExists('goalsUpdate', 'goalUpdateRequest', goalUpdateRequest)
            const localVarPath = `/goals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(goalUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the progress of a specific goal and its key results.
         * @summary Update goal progress
         * @param {string} id Numeric ID or reference number of the goal
         * @param {GoalProgressUpdateRequest} goalProgressUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsUpdateProgress: async (id: string, goalProgressUpdateRequest: GoalProgressUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('goalsUpdateProgress', 'id', id)
            // verify required parameter 'goalProgressUpdateRequest' is not null or undefined
            assertParamExists('goalsUpdateProgress', 'goalProgressUpdateRequest', goalProgressUpdateRequest)
            const localVarPath = `/goals/{id}/progress`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(goalProgressUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GoalsApi - functional programming interface
 */
export const GoalsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GoalsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a list of comments associated with the specified goal.
         * @summary List comments on a goal
         * @param {string} goalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsGetGoal(goalId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentsGetEpic200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsGetGoal(goalId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GoalsApi.commentsGetGoal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of epics associated with the specified goal.
         * @summary List epics associated with a goal
         * @param {string} goalId Numeric ID or key of the goal
         * @param {string} [q] Search term to match against epic name
         * @param {string} [updatedSince] UTC timestamp for filtering recently updated epics
         * @param {string} [tag] String tag to filter epics
         * @param {string} [assignedToUser] User ID or email to filter by assignee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async epicsListByGoal(goalId: string, q?: string, updatedSince?: string, tag?: string, assignedToUser?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EpicsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.epicsListByGoal(goalId, q, updatedSince, tag, assignedToUser, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GoalsApi.epicsListByGoal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new goal in the account.
         * @summary Create a goal
         * @param {GoalCreateRequest} goalCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async goalsCreate(goalCreateRequest: GoalCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.goalsCreate(goalCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GoalsApi.goalsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes a specific goal by its ID or reference number.
         * @summary Delete a goal
         * @param {string} id Numeric ID or reference number of the goal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async goalsDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.goalsDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GoalsApi.goalsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a specific goal by its ID or reference number.
         * @summary Get a goal
         * @param {string} id Numeric ID or reference number of the goal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async goalsGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.goalsGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GoalsApi.goalsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of all goals in the account.
         * @summary List goals
         * @param {number} [page] Page number for pagination (starts at 1)
         * @param {number} [perPage] Number of items per page (max 200)
         * @param {string} [fields] Comma-separated list of fields to include in response for customization
         * @param {string} [q] Search term to match against goal name.
         * @param {string} [updatedSince] UTC timestamp (in ISO8601 format). If provided, only goals updated after the timestamp will be returned.
         * @param {string} [assignedToUser] ID or email address of a user. If provided, returns only goals assigned to that user.
         * @param {string} [status] Status filter for goals.
         * @param {string} [startDateAfter] Filter goals with start date after this date.
         * @param {string} [endDateBefore] Filter goals with end date before this date.
         * @param {number} [progressMin] Filter goals with progress greater than or equal to this value.
         * @param {number} [progressMax] Filter goals with progress less than or equal to this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async goalsList(page?: number, perPage?: number, fields?: string, q?: string, updatedSince?: string, assignedToUser?: string, status?: string, startDateAfter?: string, endDateBefore?: string, progressMin?: number, progressMax?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.goalsList(page, perPage, fields, q, updatedSince, assignedToUser, status, startDateAfter, endDateBefore, progressMin, progressMax, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GoalsApi.goalsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates a specific goal by its ID or reference number.
         * @summary Update a goal
         * @param {string} id Numeric ID or reference number of the goal
         * @param {GoalUpdateRequest} goalUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async goalsUpdate(id: string, goalUpdateRequest: GoalUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.goalsUpdate(id, goalUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GoalsApi.goalsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the progress of a specific goal and its key results.
         * @summary Update goal progress
         * @param {string} id Numeric ID or reference number of the goal
         * @param {GoalProgressUpdateRequest} goalProgressUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async goalsUpdateProgress(id: string, goalProgressUpdateRequest: GoalProgressUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.goalsUpdateProgress(id, goalProgressUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GoalsApi.goalsUpdateProgress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GoalsApi - factory interface
 */
export const GoalsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GoalsApiFp(configuration)
    return {
        /**
         * Retrieves a list of comments associated with the specified goal.
         * @summary List comments on a goal
         * @param {GoalsApiCommentsGetGoalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGetGoal(requestParameters: GoalsApiCommentsGetGoalRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentsGetEpic200Response> {
            return localVarFp.commentsGetGoal(requestParameters.goalId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of epics associated with the specified goal.
         * @summary List epics associated with a goal
         * @param {GoalsApiEpicsListByGoalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        epicsListByGoal(requestParameters: GoalsApiEpicsListByGoalRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsList200Response> {
            return localVarFp.epicsListByGoal(requestParameters.goalId, requestParameters.q, requestParameters.updatedSince, requestParameters.tag, requestParameters.assignedToUser, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new goal in the account.
         * @summary Create a goal
         * @param {GoalsApiGoalsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsCreate(requestParameters: GoalsApiGoalsCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<GoalGetResponse> {
            return localVarFp.goalsCreate(requestParameters.goalCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a specific goal by its ID or reference number.
         * @summary Delete a goal
         * @param {GoalsApiGoalsDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsDelete(requestParameters: GoalsApiGoalsDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.goalsDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a specific goal by its ID or reference number.
         * @summary Get a goal
         * @param {GoalsApiGoalsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsGet(requestParameters: GoalsApiGoalsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<GoalGetResponse> {
            return localVarFp.goalsGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all goals in the account.
         * @summary List goals
         * @param {GoalsApiGoalsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsList(requestParameters: GoalsApiGoalsListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<GoalsListResponse> {
            return localVarFp.goalsList(requestParameters.page, requestParameters.perPage, requestParameters.fields, requestParameters.q, requestParameters.updatedSince, requestParameters.assignedToUser, requestParameters.status, requestParameters.startDateAfter, requestParameters.endDateBefore, requestParameters.progressMin, requestParameters.progressMax, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a specific goal by its ID or reference number.
         * @summary Update a goal
         * @param {GoalsApiGoalsUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsUpdate(requestParameters: GoalsApiGoalsUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<GoalGetResponse> {
            return localVarFp.goalsUpdate(requestParameters.id, requestParameters.goalUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the progress of a specific goal and its key results.
         * @summary Update goal progress
         * @param {GoalsApiGoalsUpdateProgressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsUpdateProgress(requestParameters: GoalsApiGoalsUpdateProgressRequest, options?: RawAxiosRequestConfig): AxiosPromise<GoalGetResponse> {
            return localVarFp.goalsUpdateProgress(requestParameters.id, requestParameters.goalProgressUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GoalsApi - interface
 */
export interface GoalsApiInterface {
    /**
     * Retrieves a list of comments associated with the specified goal.
     * @summary List comments on a goal
     * @param {GoalsApiCommentsGetGoalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentsGetGoal(requestParameters: GoalsApiCommentsGetGoalRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentsGetEpic200Response>;

    /**
     * Retrieves a list of epics associated with the specified goal.
     * @summary List epics associated with a goal
     * @param {GoalsApiEpicsListByGoalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    epicsListByGoal(requestParameters: GoalsApiEpicsListByGoalRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsList200Response>;

    /**
     * Creates a new goal in the account.
     * @summary Create a goal
     * @param {GoalsApiGoalsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    goalsCreate(requestParameters: GoalsApiGoalsCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<GoalGetResponse>;

    /**
     * Deletes a specific goal by its ID or reference number.
     * @summary Delete a goal
     * @param {GoalsApiGoalsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    goalsDelete(requestParameters: GoalsApiGoalsDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Retrieves a specific goal by its ID or reference number.
     * @summary Get a goal
     * @param {GoalsApiGoalsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    goalsGet(requestParameters: GoalsApiGoalsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<GoalGetResponse>;

    /**
     * Retrieves a list of all goals in the account.
     * @summary List goals
     * @param {GoalsApiGoalsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    goalsList(requestParameters?: GoalsApiGoalsListRequest, options?: RawAxiosRequestConfig): AxiosPromise<GoalsListResponse>;

    /**
     * Updates a specific goal by its ID or reference number.
     * @summary Update a goal
     * @param {GoalsApiGoalsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    goalsUpdate(requestParameters: GoalsApiGoalsUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<GoalGetResponse>;

    /**
     * Updates the progress of a specific goal and its key results.
     * @summary Update goal progress
     * @param {GoalsApiGoalsUpdateProgressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    goalsUpdateProgress(requestParameters: GoalsApiGoalsUpdateProgressRequest, options?: RawAxiosRequestConfig): AxiosPromise<GoalGetResponse>;

}

/**
 * Request parameters for commentsGetGoal operation in GoalsApi.
 */
export interface GoalsApiCommentsGetGoalRequest {
    readonly goalId: string
}

/**
 * Request parameters for epicsListByGoal operation in GoalsApi.
 */
export interface GoalsApiEpicsListByGoalRequest {
    /**
     * Numeric ID or key of the goal
     */
    readonly goalId: string

    /**
     * Search term to match against epic name
     */
    readonly q?: string

    /**
     * UTC timestamp for filtering recently updated epics
     */
    readonly updatedSince?: string

    /**
     * String tag to filter epics
     */
    readonly tag?: string

    /**
     * User ID or email to filter by assignee
     */
    readonly assignedToUser?: string
}

/**
 * Request parameters for goalsCreate operation in GoalsApi.
 */
export interface GoalsApiGoalsCreateRequest {
    readonly goalCreateRequest: GoalCreateRequest
}

/**
 * Request parameters for goalsDelete operation in GoalsApi.
 */
export interface GoalsApiGoalsDeleteRequest {
    /**
     * Numeric ID or reference number of the goal
     */
    readonly id: string
}

/**
 * Request parameters for goalsGet operation in GoalsApi.
 */
export interface GoalsApiGoalsGetRequest {
    /**
     * Numeric ID or reference number of the goal
     */
    readonly id: string
}

/**
 * Request parameters for goalsList operation in GoalsApi.
 */
export interface GoalsApiGoalsListRequest {
    /**
     * Page number for pagination (starts at 1)
     */
    readonly page?: number

    /**
     * Number of items per page (max 200)
     */
    readonly perPage?: number

    /**
     * Comma-separated list of fields to include in response for customization
     */
    readonly fields?: string

    /**
     * Search term to match against goal name.
     */
    readonly q?: string

    /**
     * UTC timestamp (in ISO8601 format). If provided, only goals updated after the timestamp will be returned.
     */
    readonly updatedSince?: string

    /**
     * ID or email address of a user. If provided, returns only goals assigned to that user.
     */
    readonly assignedToUser?: string

    /**
     * Status filter for goals.
     */
    readonly status?: string

    /**
     * Filter goals with start date after this date.
     */
    readonly startDateAfter?: string

    /**
     * Filter goals with end date before this date.
     */
    readonly endDateBefore?: string

    /**
     * Filter goals with progress greater than or equal to this value.
     */
    readonly progressMin?: number

    /**
     * Filter goals with progress less than or equal to this value.
     */
    readonly progressMax?: number
}

/**
 * Request parameters for goalsUpdate operation in GoalsApi.
 */
export interface GoalsApiGoalsUpdateRequest {
    /**
     * Numeric ID or reference number of the goal
     */
    readonly id: string

    readonly goalUpdateRequest: GoalUpdateRequest
}

/**
 * Request parameters for goalsUpdateProgress operation in GoalsApi.
 */
export interface GoalsApiGoalsUpdateProgressRequest {
    /**
     * Numeric ID or reference number of the goal
     */
    readonly id: string

    readonly goalProgressUpdateRequest: GoalProgressUpdateRequest
}

/**
 * GoalsApi - object-oriented interface
 */
export class GoalsApi extends BaseAPI implements GoalsApiInterface {
    /**
     * Retrieves a list of comments associated with the specified goal.
     * @summary List comments on a goal
     * @param {GoalsApiCommentsGetGoalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public commentsGetGoal(requestParameters: GoalsApiCommentsGetGoalRequest, options?: RawAxiosRequestConfig) {
        return GoalsApiFp(this.configuration).commentsGetGoal(requestParameters.goalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of epics associated with the specified goal.
     * @summary List epics associated with a goal
     * @param {GoalsApiEpicsListByGoalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public epicsListByGoal(requestParameters: GoalsApiEpicsListByGoalRequest, options?: RawAxiosRequestConfig) {
        return GoalsApiFp(this.configuration).epicsListByGoal(requestParameters.goalId, requestParameters.q, requestParameters.updatedSince, requestParameters.tag, requestParameters.assignedToUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new goal in the account.
     * @summary Create a goal
     * @param {GoalsApiGoalsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public goalsCreate(requestParameters: GoalsApiGoalsCreateRequest, options?: RawAxiosRequestConfig) {
        return GoalsApiFp(this.configuration).goalsCreate(requestParameters.goalCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a specific goal by its ID or reference number.
     * @summary Delete a goal
     * @param {GoalsApiGoalsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public goalsDelete(requestParameters: GoalsApiGoalsDeleteRequest, options?: RawAxiosRequestConfig) {
        return GoalsApiFp(this.configuration).goalsDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a specific goal by its ID or reference number.
     * @summary Get a goal
     * @param {GoalsApiGoalsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public goalsGet(requestParameters: GoalsApiGoalsGetRequest, options?: RawAxiosRequestConfig) {
        return GoalsApiFp(this.configuration).goalsGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of all goals in the account.
     * @summary List goals
     * @param {GoalsApiGoalsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public goalsList(requestParameters: GoalsApiGoalsListRequest = {}, options?: RawAxiosRequestConfig) {
        return GoalsApiFp(this.configuration).goalsList(requestParameters.page, requestParameters.perPage, requestParameters.fields, requestParameters.q, requestParameters.updatedSince, requestParameters.assignedToUser, requestParameters.status, requestParameters.startDateAfter, requestParameters.endDateBefore, requestParameters.progressMin, requestParameters.progressMax, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a specific goal by its ID or reference number.
     * @summary Update a goal
     * @param {GoalsApiGoalsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public goalsUpdate(requestParameters: GoalsApiGoalsUpdateRequest, options?: RawAxiosRequestConfig) {
        return GoalsApiFp(this.configuration).goalsUpdate(requestParameters.id, requestParameters.goalUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the progress of a specific goal and its key results.
     * @summary Update goal progress
     * @param {GoalsApiGoalsUpdateProgressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public goalsUpdateProgress(requestParameters: GoalsApiGoalsUpdateProgressRequest, options?: RawAxiosRequestConfig) {
        return GoalsApiFp(this.configuration).goalsUpdateProgress(requestParameters.id, requestParameters.goalProgressUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

