/* tslint:disable */
/* eslint-disable */
/**
 * Aha! REST API
 * API for interacting with Aha! product management platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { EpicsEpicIdCommentsGet200Response } from '../model';
// @ts-ignore
import type { ProductsProductIdEpicsGet200Response } from '../model';
/**
 * GoalsApi - axios parameter creator
 * @export
 */
export const GoalsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a list of comments associated with the specified goal.
         * @summary List comments on a goal
         * @param {string} goalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsGoalIdCommentsGet: async (goalId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalId' is not null or undefined
            assertParamExists('goalsGoalIdCommentsGet', 'goalId', goalId)
            const localVarPath = `/goals/{goal_id}/comments`
                .replace(`{${"goal_id"}}`, encodeURIComponent(String(goalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of epics associated with the specified goal.
         * @summary List epics associated with a goal
         * @param {string} goalId Numeric ID or key of the goal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsGoalIdEpicsGet: async (goalId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalId' is not null or undefined
            assertParamExists('goalsGoalIdEpicsGet', 'goalId', goalId)
            const localVarPath = `/goals/{goal_id}/epics`
                .replace(`{${"goal_id"}}`, encodeURIComponent(String(goalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GoalsApi - functional programming interface
 * @export
 */
export const GoalsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GoalsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a list of comments associated with the specified goal.
         * @summary List comments on a goal
         * @param {string} goalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async goalsGoalIdCommentsGet(goalId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EpicsEpicIdCommentsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.goalsGoalIdCommentsGet(goalId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GoalsApi.goalsGoalIdCommentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of epics associated with the specified goal.
         * @summary List epics associated with a goal
         * @param {string} goalId Numeric ID or key of the goal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async goalsGoalIdEpicsGet(goalId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductsProductIdEpicsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.goalsGoalIdEpicsGet(goalId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GoalsApi.goalsGoalIdEpicsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GoalsApi - factory interface
 * @export
 */
export const GoalsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GoalsApiFp(configuration)
    return {
        /**
         * Retrieves a list of comments associated with the specified goal.
         * @summary List comments on a goal
         * @param {GoalsApiGoalsGoalIdCommentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsGoalIdCommentsGet(requestParameters: GoalsApiGoalsGoalIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response> {
            return localVarFp.goalsGoalIdCommentsGet(requestParameters.goalId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of epics associated with the specified goal.
         * @summary List epics associated with a goal
         * @param {GoalsApiGoalsGoalIdEpicsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsGoalIdEpicsGet(requestParameters: GoalsApiGoalsGoalIdEpicsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductsProductIdEpicsGet200Response> {
            return localVarFp.goalsGoalIdEpicsGet(requestParameters.goalId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GoalsApi - interface
 * @export
 * @interface GoalsApi
 */
export interface GoalsApiInterface {
    /**
     * Retrieves a list of comments associated with the specified goal.
     * @summary List comments on a goal
     * @param {GoalsApiGoalsGoalIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiInterface
     */
    goalsGoalIdCommentsGet(requestParameters: GoalsApiGoalsGoalIdCommentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EpicsEpicIdCommentsGet200Response>;

    /**
     * Retrieves a list of epics associated with the specified goal.
     * @summary List epics associated with a goal
     * @param {GoalsApiGoalsGoalIdEpicsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiInterface
     */
    goalsGoalIdEpicsGet(requestParameters: GoalsApiGoalsGoalIdEpicsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductsProductIdEpicsGet200Response>;

}

/**
 * Request parameters for goalsGoalIdCommentsGet operation in GoalsApi.
 * @export
 * @interface GoalsApiGoalsGoalIdCommentsGetRequest
 */
export interface GoalsApiGoalsGoalIdCommentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof GoalsApiGoalsGoalIdCommentsGet
     */
    readonly goalId: string
}

/**
 * Request parameters for goalsGoalIdEpicsGet operation in GoalsApi.
 * @export
 * @interface GoalsApiGoalsGoalIdEpicsGetRequest
 */
export interface GoalsApiGoalsGoalIdEpicsGetRequest {
    /**
     * Numeric ID or key of the goal
     * @type {string}
     * @memberof GoalsApiGoalsGoalIdEpicsGet
     */
    readonly goalId: string
}

/**
 * GoalsApi - object-oriented interface
 * @export
 * @class GoalsApi
 * @extends {BaseAPI}
 */
export class GoalsApi extends BaseAPI implements GoalsApiInterface {
    /**
     * Retrieves a list of comments associated with the specified goal.
     * @summary List comments on a goal
     * @param {GoalsApiGoalsGoalIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApi
     */
    public goalsGoalIdCommentsGet(requestParameters: GoalsApiGoalsGoalIdCommentsGetRequest, options?: RawAxiosRequestConfig) {
        return GoalsApiFp(this.configuration).goalsGoalIdCommentsGet(requestParameters.goalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of epics associated with the specified goal.
     * @summary List epics associated with a goal
     * @param {GoalsApiGoalsGoalIdEpicsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApi
     */
    public goalsGoalIdEpicsGet(requestParameters: GoalsApiGoalsGoalIdEpicsGetRequest, options?: RawAxiosRequestConfig) {
        return GoalsApiFp(this.configuration).goalsGoalIdEpicsGet(requestParameters.goalId, options).then((request) => request(this.axios, this.basePath));
    }
}

