/* tslint:disable */
/* eslint-disable */
/**
 * Aha! REST API
 * API for interacting with Aha! product management platform.
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommentsGetEpic200Response } from '../model';
// @ts-ignore
import type { ReleasePhaseCreateRequest } from '../model';
// @ts-ignore
import type { ReleasePhaseUpdateRequest } from '../model';
// @ts-ignore
import type { ReleasePhasesCreate201Response } from '../model';
// @ts-ignore
import type { ReleasePhasesList200Response } from '../model';
/**
 * ReleasePhasesApi - axios parameter creator
 * @export
 */
export const ReleasePhasesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a list of comments associated with the specified release phase.
         * @summary List comments on a release phase
         * @param {string} releasePhaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGetReleasePhase: async (releasePhaseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'releasePhaseId' is not null or undefined
            assertParamExists('commentsGetReleasePhase', 'releasePhaseId', releasePhaseId)
            const localVarPath = `/release_phases/{release_phase_id}/comments`
                .replace(`{${"release_phase_id"}}`, encodeURIComponent(String(releasePhaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new release phase.
         * @summary Create a release phase
         * @param {ReleasePhaseCreateRequest} releasePhaseCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasePhasesCreate: async (releasePhaseCreateRequest: ReleasePhaseCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'releasePhaseCreateRequest' is not null or undefined
            assertParamExists('releasePhasesCreate', 'releasePhaseCreateRequest', releasePhaseCreateRequest)
            const localVarPath = `/release_phases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(releasePhaseCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the specified release phase.
         * @summary Delete a release phase
         * @param {string} id Numeric ID of the release phase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasePhasesDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('releasePhasesDelete', 'id', id)
            const localVarPath = `/release_phases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves details of a specific release phase.
         * @summary Get a specific release phase
         * @param {string} id Numeric ID of the release phase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasePhasesGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('releasePhasesGet', 'id', id)
            const localVarPath = `/release_phases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of release phases in the account.
         * @summary List release phases in the account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasePhasesList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/release_phases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the specified release phase.
         * @summary Update a release phase
         * @param {string} id Numeric ID of the release phase
         * @param {ReleasePhaseUpdateRequest} releasePhaseUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasePhasesUpdate: async (id: string, releasePhaseUpdateRequest: ReleasePhaseUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('releasePhasesUpdate', 'id', id)
            // verify required parameter 'releasePhaseUpdateRequest' is not null or undefined
            assertParamExists('releasePhasesUpdate', 'releasePhaseUpdateRequest', releasePhaseUpdateRequest)
            const localVarPath = `/release_phases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(releasePhaseUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReleasePhasesApi - functional programming interface
 * @export
 */
export const ReleasePhasesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReleasePhasesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a list of comments associated with the specified release phase.
         * @summary List comments on a release phase
         * @param {string} releasePhaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsGetReleasePhase(releasePhaseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentsGetEpic200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsGetReleasePhase(releasePhaseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReleasePhasesApi.commentsGetReleasePhase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new release phase.
         * @summary Create a release phase
         * @param {ReleasePhaseCreateRequest} releasePhaseCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async releasePhasesCreate(releasePhaseCreateRequest: ReleasePhaseCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReleasePhasesCreate201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.releasePhasesCreate(releasePhaseCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReleasePhasesApi.releasePhasesCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes the specified release phase.
         * @summary Delete a release phase
         * @param {string} id Numeric ID of the release phase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async releasePhasesDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.releasePhasesDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReleasePhasesApi.releasePhasesDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves details of a specific release phase.
         * @summary Get a specific release phase
         * @param {string} id Numeric ID of the release phase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async releasePhasesGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReleasePhasesCreate201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.releasePhasesGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReleasePhasesApi.releasePhasesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of release phases in the account.
         * @summary List release phases in the account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async releasePhasesList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReleasePhasesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.releasePhasesList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReleasePhasesApi.releasePhasesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the specified release phase.
         * @summary Update a release phase
         * @param {string} id Numeric ID of the release phase
         * @param {ReleasePhaseUpdateRequest} releasePhaseUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async releasePhasesUpdate(id: string, releasePhaseUpdateRequest: ReleasePhaseUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReleasePhasesCreate201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.releasePhasesUpdate(id, releasePhaseUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReleasePhasesApi.releasePhasesUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ReleasePhasesApi - factory interface
 * @export
 */
export const ReleasePhasesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReleasePhasesApiFp(configuration)
    return {
        /**
         * Retrieves a list of comments associated with the specified release phase.
         * @summary List comments on a release phase
         * @param {ReleasePhasesApiCommentsGetReleasePhaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGetReleasePhase(requestParameters: ReleasePhasesApiCommentsGetReleasePhaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentsGetEpic200Response> {
            return localVarFp.commentsGetReleasePhase(requestParameters.releasePhaseId, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new release phase.
         * @summary Create a release phase
         * @param {ReleasePhasesApiReleasePhasesCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasePhasesCreate(requestParameters: ReleasePhasesApiReleasePhasesCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReleasePhasesCreate201Response> {
            return localVarFp.releasePhasesCreate(requestParameters.releasePhaseCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the specified release phase.
         * @summary Delete a release phase
         * @param {ReleasePhasesApiReleasePhasesDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasePhasesDelete(requestParameters: ReleasePhasesApiReleasePhasesDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.releasePhasesDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves details of a specific release phase.
         * @summary Get a specific release phase
         * @param {ReleasePhasesApiReleasePhasesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasePhasesGet(requestParameters: ReleasePhasesApiReleasePhasesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReleasePhasesCreate201Response> {
            return localVarFp.releasePhasesGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of release phases in the account.
         * @summary List release phases in the account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasePhasesList(options?: RawAxiosRequestConfig): AxiosPromise<ReleasePhasesList200Response> {
            return localVarFp.releasePhasesList(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the specified release phase.
         * @summary Update a release phase
         * @param {ReleasePhasesApiReleasePhasesUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasePhasesUpdate(requestParameters: ReleasePhasesApiReleasePhasesUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReleasePhasesCreate201Response> {
            return localVarFp.releasePhasesUpdate(requestParameters.id, requestParameters.releasePhaseUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReleasePhasesApi - interface
 * @export
 * @interface ReleasePhasesApi
 */
export interface ReleasePhasesApiInterface {
    /**
     * Retrieves a list of comments associated with the specified release phase.
     * @summary List comments on a release phase
     * @param {ReleasePhasesApiCommentsGetReleasePhaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleasePhasesApiInterface
     */
    commentsGetReleasePhase(requestParameters: ReleasePhasesApiCommentsGetReleasePhaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentsGetEpic200Response>;

    /**
     * Creates a new release phase.
     * @summary Create a release phase
     * @param {ReleasePhasesApiReleasePhasesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleasePhasesApiInterface
     */
    releasePhasesCreate(requestParameters: ReleasePhasesApiReleasePhasesCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReleasePhasesCreate201Response>;

    /**
     * Deletes the specified release phase.
     * @summary Delete a release phase
     * @param {ReleasePhasesApiReleasePhasesDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleasePhasesApiInterface
     */
    releasePhasesDelete(requestParameters: ReleasePhasesApiReleasePhasesDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Retrieves details of a specific release phase.
     * @summary Get a specific release phase
     * @param {ReleasePhasesApiReleasePhasesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleasePhasesApiInterface
     */
    releasePhasesGet(requestParameters: ReleasePhasesApiReleasePhasesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReleasePhasesCreate201Response>;

    /**
     * Retrieves a list of release phases in the account.
     * @summary List release phases in the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleasePhasesApiInterface
     */
    releasePhasesList(options?: RawAxiosRequestConfig): AxiosPromise<ReleasePhasesList200Response>;

    /**
     * Updates the specified release phase.
     * @summary Update a release phase
     * @param {ReleasePhasesApiReleasePhasesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleasePhasesApiInterface
     */
    releasePhasesUpdate(requestParameters: ReleasePhasesApiReleasePhasesUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReleasePhasesCreate201Response>;

}

/**
 * Request parameters for commentsGetReleasePhase operation in ReleasePhasesApi.
 * @export
 * @interface ReleasePhasesApiCommentsGetReleasePhaseRequest
 */
export interface ReleasePhasesApiCommentsGetReleasePhaseRequest {
    /**
     * 
     * @type {string}
     * @memberof ReleasePhasesApiCommentsGetReleasePhase
     */
    readonly releasePhaseId: string
}

/**
 * Request parameters for releasePhasesCreate operation in ReleasePhasesApi.
 * @export
 * @interface ReleasePhasesApiReleasePhasesCreateRequest
 */
export interface ReleasePhasesApiReleasePhasesCreateRequest {
    /**
     * 
     * @type {ReleasePhaseCreateRequest}
     * @memberof ReleasePhasesApiReleasePhasesCreate
     */
    readonly releasePhaseCreateRequest: ReleasePhaseCreateRequest
}

/**
 * Request parameters for releasePhasesDelete operation in ReleasePhasesApi.
 * @export
 * @interface ReleasePhasesApiReleasePhasesDeleteRequest
 */
export interface ReleasePhasesApiReleasePhasesDeleteRequest {
    /**
     * Numeric ID of the release phase
     * @type {string}
     * @memberof ReleasePhasesApiReleasePhasesDelete
     */
    readonly id: string
}

/**
 * Request parameters for releasePhasesGet operation in ReleasePhasesApi.
 * @export
 * @interface ReleasePhasesApiReleasePhasesGetRequest
 */
export interface ReleasePhasesApiReleasePhasesGetRequest {
    /**
     * Numeric ID of the release phase
     * @type {string}
     * @memberof ReleasePhasesApiReleasePhasesGet
     */
    readonly id: string
}

/**
 * Request parameters for releasePhasesUpdate operation in ReleasePhasesApi.
 * @export
 * @interface ReleasePhasesApiReleasePhasesUpdateRequest
 */
export interface ReleasePhasesApiReleasePhasesUpdateRequest {
    /**
     * Numeric ID of the release phase
     * @type {string}
     * @memberof ReleasePhasesApiReleasePhasesUpdate
     */
    readonly id: string

    /**
     * 
     * @type {ReleasePhaseUpdateRequest}
     * @memberof ReleasePhasesApiReleasePhasesUpdate
     */
    readonly releasePhaseUpdateRequest: ReleasePhaseUpdateRequest
}

/**
 * ReleasePhasesApi - object-oriented interface
 * @export
 * @class ReleasePhasesApi
 * @extends {BaseAPI}
 */
export class ReleasePhasesApi extends BaseAPI implements ReleasePhasesApiInterface {
    /**
     * Retrieves a list of comments associated with the specified release phase.
     * @summary List comments on a release phase
     * @param {ReleasePhasesApiCommentsGetReleasePhaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleasePhasesApi
     */
    public commentsGetReleasePhase(requestParameters: ReleasePhasesApiCommentsGetReleasePhaseRequest, options?: RawAxiosRequestConfig) {
        return ReleasePhasesApiFp(this.configuration).commentsGetReleasePhase(requestParameters.releasePhaseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new release phase.
     * @summary Create a release phase
     * @param {ReleasePhasesApiReleasePhasesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleasePhasesApi
     */
    public releasePhasesCreate(requestParameters: ReleasePhasesApiReleasePhasesCreateRequest, options?: RawAxiosRequestConfig) {
        return ReleasePhasesApiFp(this.configuration).releasePhasesCreate(requestParameters.releasePhaseCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the specified release phase.
     * @summary Delete a release phase
     * @param {ReleasePhasesApiReleasePhasesDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleasePhasesApi
     */
    public releasePhasesDelete(requestParameters: ReleasePhasesApiReleasePhasesDeleteRequest, options?: RawAxiosRequestConfig) {
        return ReleasePhasesApiFp(this.configuration).releasePhasesDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves details of a specific release phase.
     * @summary Get a specific release phase
     * @param {ReleasePhasesApiReleasePhasesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleasePhasesApi
     */
    public releasePhasesGet(requestParameters: ReleasePhasesApiReleasePhasesGetRequest, options?: RawAxiosRequestConfig) {
        return ReleasePhasesApiFp(this.configuration).releasePhasesGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of release phases in the account.
     * @summary List release phases in the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleasePhasesApi
     */
    public releasePhasesList(options?: RawAxiosRequestConfig) {
        return ReleasePhasesApiFp(this.configuration).releasePhasesList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the specified release phase.
     * @summary Update a release phase
     * @param {ReleasePhasesApiReleasePhasesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleasePhasesApi
     */
    public releasePhasesUpdate(requestParameters: ReleasePhasesApiReleasePhasesUpdateRequest, options?: RawAxiosRequestConfig) {
        return ReleasePhasesApiFp(this.configuration).releasePhasesUpdate(requestParameters.id, requestParameters.releasePhaseUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

