/* tslint:disable */
/* eslint-disable */
/**
 * Aha! REST API
 * API for interacting with Aha! product management platform.  ## Rate Limiting The API enforces rate limits to ensure fair usage: - **300 requests per minute** per account - **20 requests per second** per account  When rate limits are exceeded, the API returns a `429 Too Many Requests` response with a `retry_after` header indicating when to retry.  ## Authentication The API supports two authentication methods: - **OAuth 2.0**: For web applications and integrations requiring user consent - **API Tokens**: For server-to-server integrations and personal access  ## Request Headers - **User-Agent**: Required header to identify the client application - **Content-Type**: Set to `application/json` for POST/PUT requests - **Authorization**: Bearer token or OAuth access token  ## Response Format All responses are in JSON format. List endpoints include pagination metadata in the `meta.pagination` object.  ## Error Handling The API uses standard HTTP status codes and includes detailed error messages in the response body for debugging. 
 *
 * The version of the OpenAPI document: 1.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import type { IdeaUpdateRequestScoreFactsInner } from './idea-update-request-score-facts-inner';

export interface IdeaUpdateRequest {
    /**
     * Name of the idea
     */
    'name'?: string;
    /**
     * Description of the idea
     */
    'description'?: string;
    /**
     * ID of the workflow status
     */
    'workflow_status_id'?: string;
    /**
     * ID of the user to assign the idea to
     */
    'assigned_to_user_id'?: string;
    /**
     * Visibility setting for the idea
     */
    'visibility'?: IdeaUpdateRequestVisibilityEnum;
    /**
     * Administrator response to the idea
     */
    'admin_response'?: string;
    /**
     * Tags to associate with the idea
     */
    'tags'?: Array<string>;
    /**
     * Categories for the idea
     */
    'categories'?: Array<string>;
    /**
     * Custom field values for the idea
     */
    'custom_fields'?: { [key: string]: any; };
    /**
     * User IDs to watch this idea
     */
    'watchers'?: Array<string>;
    /**
     * Score facts for the idea
     */
    'score_facts'?: Array<IdeaUpdateRequestScoreFactsInner>;
}

export const IdeaUpdateRequestVisibilityEnum = {
    VISIBLE_TO_ALL_IDEAS_PORTAL_USERS: 'Visible to all ideas portal users',
    VISIBLE_TO_ADMINISTRATORS_ONLY: 'Visible to administrators only',
    HIDDEN: 'Hidden'
} as const;

export type IdeaUpdateRequestVisibilityEnum = typeof IdeaUpdateRequestVisibilityEnum[keyof typeof IdeaUpdateRequestVisibilityEnum];


