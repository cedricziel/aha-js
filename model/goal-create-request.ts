/* tslint:disable */
/* eslint-disable */
/**
 * Aha! REST API
 * API for interacting with Aha! product management platform.  ## Rate Limiting The API enforces rate limits to ensure fair usage: - **300 requests per minute** per account - **20 requests per second** per account  When rate limits are exceeded, the API returns a `429 Too Many Requests` response with a `retry_after` header indicating when to retry.  ## Authentication The API supports two authentication methods: - **OAuth 2.0**: For web applications and integrations requiring user consent - **API Tokens**: For server-to-server integrations and personal access  ## Request Headers - **User-Agent**: Required header to identify the client application - **Content-Type**: Set to `application/json` for POST/PUT requests - **Authorization**: Bearer token or OAuth access token  ## Response Format All responses are in JSON format. List endpoints include pagination metadata in the `meta.pagination` object.  ## Error Handling The API uses standard HTTP status codes and includes detailed error messages in the response body for debugging. 
 *
 * The version of the OpenAPI document: 1.0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import type { GoalCreateRequestKeyResultsInner } from './goal-create-request-key-results-inner';

export interface GoalCreateRequest {
    /**
     * Name of the goal
     */
    'name': string;
    /**
     * Description of the goal
     */
    'description'?: string;
    /**
     * Start date of the goal
     */
    'start_date'?: string;
    /**
     * End date of the goal
     */
    'end_date'?: string;
    /**
     * Initial progress percentage
     */
    'progress'?: number;
    /**
     * Source for calculating progress
     */
    'progress_source'?: GoalCreateRequestProgressSourceEnum;
    /**
     * ID of the user assigned to the goal
     */
    'assigned_to_user_id'?: string;
    /**
     * ID of the workflow status
     */
    'workflow_status_id'?: string;
    /**
     * Key results to create with the goal
     */
    'key_results'?: Array<GoalCreateRequestKeyResultsInner>;
    /**
     * IDs of initiatives to associate with the goal
     */
    'initiative_ids'?: Array<string>;
    /**
     * IDs of features to associate with the goal
     */
    'feature_ids'?: Array<string>;
    /**
     * IDs of releases to associate with the goal
     */
    'release_ids'?: Array<string>;
    /**
     * Custom field values for the goal
     */
    'custom_fields'?: { [key: string]: any; };
    /**
     * Tags to associate with the goal
     */
    'tags'?: Array<string>;
}

export const GoalCreateRequestProgressSourceEnum = {
    PROGRESS_MANUAL: 'progress_manual',
    PROGRESS_ROLLUP: 'progress_rollup'
} as const;

export type GoalCreateRequestProgressSourceEnum = typeof GoalCreateRequestProgressSourceEnum[keyof typeof GoalCreateRequestProgressSourceEnum];


