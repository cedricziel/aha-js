/* tslint:disable */
/* eslint-disable */
/**
 * Aha! REST API
 * API for interacting with Aha! product management platform.  ## Rate Limiting The API enforces rate limits to ensure fair usage: - **300 requests per minute** per account - **20 requests per second** per account  When rate limits are exceeded, the API returns a `429 Too Many Requests` response with a `retry_after` header indicating when to retry.  ## Authentication The API supports two authentication methods: - **OAuth 2.0**: For web applications and integrations requiring user consent - **API Tokens**: For server-to-server integrations and personal access  ## Request Headers - **User-Agent**: Required header to identify the client application - **Content-Type**: Set to `application/json` for POST/PUT requests - **Authorization**: Bearer token or OAuth access token  ## Response Format All responses are in JSON format. List endpoints include pagination metadata in the `meta.pagination` object.  ## Error Handling The API uses standard HTTP status codes and includes detailed error messages in the response body for debugging. 
 *
 * The version of the OpenAPI document: 1.0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import type { IdeaCreateByPortalUserRequestIdeaCreatedByPortalUser } from './idea-create-by-portal-user-request-idea-created-by-portal-user';

export interface IdeaCreateByPortalUserRequestIdea {
    /**
     * Name of the idea
     */
    'name': string;
    /**
     * Description of the idea — may include HTML formatting.
     */
    'description'?: string;
    /**
     * Status of the idea — must be a valid status for the selected product. 
     */
    'workflow_status'?: string;
    /**
     * Tags to add to the idea. Multiple tags must be separated by commas. 
     */
    'tags'?: string;
    /**
     * Names of any existing categories the idea should be assigned to. Multiple categories must be separated by commas. 
     */
    'categories'?: string;
    'created_by_portal_user': IdeaCreateByPortalUserRequestIdeaCreatedByPortalUser;
    /**
     * Email address of user that is assigned the idea.
     */
    'assigned_to_user'?: string;
    /**
     * Name or ID of the feature that the idea was promoted to
     */
    'feature'?: string;
    /**
     * Name or ID of the initiative that the idea was promoted to
     */
    'initiative'?: string;
    /**
     * Name or ID of the epic that the idea was promoted to
     */
    'epic'?: string;
    /**
     * Idea ID or key for an idea which this idea duplicates. Setting this value will merge this idea into the provided idea ID; setting it to a null or blank value will unmerge this idea. Note that in the API response, this attribute is called duplicate_of. 
     */
    'duplicate_idea'?: string;
    /**
     * Number of votes to seed the vote count with when importing from other systems 
     */
    'initial_votes'?: number;
    /**
     * Initial visibility of the idea (aha, creator, employee, employee_or_creator, creator_organization, or public - aha is the default) 
     */
    'visibility'?: string;
    /**
     * Date of idea creation. In UTC timezone with format YYYY-MM-DD or YYYY-MM-DD HH:MM:SS. 
     */
    'created_at'?: string;
    /**
     * Whether the idea is considered spam. Must be \'true\' or \'false\'
     */
    'spam'?: boolean;
    /**
     * Numeric ID of the ideas portal. We strongly suggest you set this if the creator is an idea user. 
     */
    'submitted_idea_portal_id'?: string;
    /**
     * If true, the idea will not be submitted to any portal. Default is false. 
     */
    'skip_portal'?: boolean;
}

