/* tslint:disable */
/* eslint-disable */
/**
 * Aha! REST API
 * API for interacting with Aha! product management platform.  ## Rate Limiting The API enforces rate limits to ensure fair usage: - **300 requests per minute** per account - **20 requests per second** per account  When rate limits are exceeded, the API returns a `429 Too Many Requests` response with a `retry_after` header indicating when to retry.  ## Authentication The API supports two authentication methods: - **OAuth 2.0**: For web applications and integrations requiring user consent - **API Tokens**: For server-to-server integrations and personal access  ## Request Headers - **User-Agent**: Required header to identify the client application - **Content-Type**: Set to `application/json` for POST/PUT requests - **Authorization**: Bearer token or OAuth access token  ## Response Format All responses are in JSON format. List endpoints include pagination metadata in the `meta.pagination` object.  ## Error Handling The API uses standard HTTP status codes and includes detailed error messages in the response body for debugging. 
 *
 * The version of the OpenAPI document: 1.0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import type { FeatureIntegrationFieldsInner } from './feature-integration-fields-inner';
// May contain unused imports in some cases
// @ts-ignore
import type { IdeasListResponseIdeasInnerDescription } from './ideas-list-response-ideas-inner-description';
// May contain unused imports in some cases
// @ts-ignore
import type { IdeasListResponseIdeasInnerWorkflowStatus } from './ideas-list-response-ideas-inner-workflow-status';
// May contain unused imports in some cases
// @ts-ignore
import type { InitiativeResponseInitiativeProject } from './initiative-response-initiative-project';
// May contain unused imports in some cases
// @ts-ignore
import type { ReleasePhasesInner } from './release-phases-inner';
// May contain unused imports in some cases
// @ts-ignore
import type { ReleaseWorkflowStatusTimesInner } from './release-workflow-status-times-inner';
// May contain unused imports in some cases
// @ts-ignore
import type { User } from './user';

export interface Release {
    /**
     * Unique identifier of the release
     */
    'id'?: string;
    /**
     * Name of the release
     */
    'name'?: string;
    /**
     * Reference number of the release
     */
    'reference_num'?: string;
    /**
     * Date when development started
     */
    'development_started_on'?: string | null;
    /**
     * Planned start date of the release
     */
    'start_date'?: string | null;
    /**
     * Planned release date
     */
    'release_date'?: string | null;
    /**
     * Actual release date
     */
    'released_on'?: string | null;
    /**
     * External release date visible to customers
     */
    'external_release_date'?: string | null;
    /**
     * Theme or focus of the release
     */
    'theme'?: string;
    /**
     * Whether this release is a parking lot
     */
    'parking_lot'?: boolean;
    /**
     * Position for sorting releases
     */
    'position'?: number;
    /**
     * Creation date of the release
     */
    'created_at'?: string;
    /**
     * Last update date of the release
     */
    'updated_at'?: string;
    /**
     * ID of the product the release belongs to
     */
    'product_id'?: string;
    /**
     * Progress completed on the release (0-100)
     */
    'progress'?: number;
    /**
     * Source for calculating progress on the release
     */
    'progress_source'?: string;
    /**
     * URL to view the release in the Aha! web application
     */
    'url'?: string;
    /**
     * API resource URL for the release
     */
    'resource'?: string;
    'project'?: InitiativeResponseInitiativeProject;
    'workflow_status'?: IdeasListResponseIdeasInnerWorkflowStatus;
    'description'?: IdeasListResponseIdeasInnerDescription;
    /**
     * Attachments to the release
     */
    'attachments'?: Array<object>;
    'owner'?: User;
    'assigned_to_user'?: User;
    'created_by_user'?: User;
    /**
     * Number of comments on the release
     */
    'comments_count'?: number;
    /**
     * Goals associated with the release
     */
    'goals'?: Array<object>;
    /**
     * Integration fields for the release
     */
    'integration_fields'?: Array<FeatureIntegrationFieldsInner>;
    /**
     * Workflow status times for the release
     */
    'workflow_status_times'?: Array<ReleaseWorkflowStatusTimesInner>;
    /**
     * Custom fields for the release
     */
    'custom_fields'?: Array<object>;
    /**
     * Tags associated with the release
     */
    'tags'?: Array<string>;
    /**
     * Full tag objects with metadata
     */
    'full_tags'?: Array<object>;
    /**
     * Release phases
     */
    'phases'?: Array<ReleasePhasesInner>;
}

